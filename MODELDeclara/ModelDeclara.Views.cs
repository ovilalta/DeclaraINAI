//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System.Data.Entity.Infrastructure.MappingViews;

[assembly: DbMappingViewCacheTypeAttribute(
    typeof(MODELDeclara_V2.cnxDeclara),
    typeof(Edm_EntityMappingGeneratedViews.ViewsForBaseEntitySets36018992db85d04f543505411004397a72851dfd2cbc93a45e2c07f35dd0eefc))]

namespace Edm_EntityMappingGeneratedViews
{
    using System;
    using System.CodeDom.Compiler;
    using System.Data.Entity.Core.Metadata.Edm;

    /// <summary>
    /// Implements a mapping view cache.
    /// </summary>
    [GeneratedCode("Entity Framework 6 Power Tools", "0.9.2.0")]
    internal sealed class ViewsForBaseEntitySets36018992db85d04f543505411004397a72851dfd2cbc93a45e2c07f35dd0eefc : DbMappingViewCache
    {
        /// <summary>
        /// Gets a hash value computed over the mapping closure.
        /// </summary>
        public override string MappingHashValue
        {
            get { return "36018992db85d04f543505411004397a72851dfd2cbc93a45e2c07f35dd0eefc"; }
        }

        /// <summary>
        /// Gets a view corresponding to the specified extent.
        /// </summary>
        /// <param name="extent">The extent.</param>
        /// <returns>The mapping view, or null if the extent is not associated with a mapping view.</returns>
        public override DbMappingView GetView(EntitySetBase extent)
        {
            if (extent == null)
            {
                throw new ArgumentNullException("extent");
            }

            var extentName = extent.EntityContainer.Name + "." + extent.Name;

            if (extentName == "ModelDeclaraStoreContainer.ALTA")
            {
                return GetView0();
            }

            if (extentName == "ModelDeclaraStoreContainer.ALTA_ADEUDO")
            {
                return GetView1();
            }

            if (extentName == "ModelDeclaraStoreContainer.ALTA_ADEUDO_PAGOS")
            {
                return GetView2();
            }

            if (extentName == "ModelDeclaraStoreContainer.ALTA_ADEUDO_TITULAR")
            {
                return GetView3();
            }

            if (extentName == "ModelDeclaraStoreContainer.ALTA_COMODATO")
            {
                return GetView4();
            }

            if (extentName == "ModelDeclaraStoreContainer.ALTA_COMODATO_INMUEBLE")
            {
                return GetView5();
            }

            if (extentName == "ModelDeclaraStoreContainer.ALTA_COMODATO_VEHICULO")
            {
                return GetView6();
            }

            if (extentName == "ModelDeclaraStoreContainer.ALTA_INMUEBLE")
            {
                return GetView7();
            }

            if (extentName == "ModelDeclaraStoreContainer.ALTA_INMUEBLE_ADEUDO")
            {
                return GetView8();
            }

            if (extentName == "ModelDeclaraStoreContainer.ALTA_INMUEBLE_COPROPIETARIO")
            {
                return GetView9();
            }

            if (extentName == "ModelDeclaraStoreContainer.ALTA_INMUEBLE_FORMA_ADQUISICION")
            {
                return GetView10();
            }

            if (extentName == "ModelDeclaraStoreContainer.ALTA_INMUEBLE_PAGO_INICIAL")
            {
                return GetView11();
            }

            if (extentName == "ModelDeclaraStoreContainer.ALTA_INMUEBLE_TITULAR")
            {
                return GetView12();
            }

            if (extentName == "ModelDeclaraStoreContainer.ALTA_INVERSION")
            {
                return GetView13();
            }

            if (extentName == "ModelDeclaraStoreContainer.ALTA_INVERSION_COPROPIETARIO")
            {
                return GetView14();
            }

            if (extentName == "ModelDeclaraStoreContainer.ALTA_INVERSION_TITULAR")
            {
                return GetView15();
            }

            if (extentName == "ModelDeclaraStoreContainer.ALTA_MUEBLE")
            {
                return GetView16();
            }

            if (extentName == "ModelDeclaraStoreContainer.ALTA_MUEBLE_COPROPIETARIO")
            {
                return GetView17();
            }

            if (extentName == "ModelDeclaraStoreContainer.ALTA_MUEBLE_FORMA_ADQUISICION")
            {
                return GetView18();
            }

            if (extentName == "ModelDeclaraStoreContainer.ALTA_MUEBLE_TITULAR")
            {
                return GetView19();
            }

            if (extentName == "ModelDeclaraStoreContainer.ALTA_TARJETA")
            {
                return GetView20();
            }

            if (extentName == "ModelDeclaraStoreContainer.ALTA_VEHICULO")
            {
                return GetView21();
            }

            if (extentName == "ModelDeclaraStoreContainer.ALTA_VEHICULO_ADEUDO")
            {
                return GetView22();
            }

            if (extentName == "ModelDeclaraStoreContainer.ALTA_VEHICULO_COPROPIETARIO")
            {
                return GetView23();
            }

            if (extentName == "ModelDeclaraStoreContainer.ALTA_VEHICULO_FORMA_ADQUISICION")
            {
                return GetView24();
            }

            if (extentName == "ModelDeclaraStoreContainer.ALTA_VEHICULO_PAGO_INICIAL")
            {
                return GetView25();
            }

            if (extentName == "ModelDeclaraStoreContainer.ALTA_VEHICULO_TITULAR")
            {
                return GetView26();
            }

            if (extentName == "ModelDeclaraStoreContainer.CAT_AMBITO_PUBLICO")
            {
                return GetView27();
            }

            if (extentName == "ModelDeclaraStoreContainer.CAT_AMBITO_SECTOR")
            {
                return GetView28();
            }

            if (extentName == "ModelDeclaraStoreContainer.CAT_CODIGO_POSTAL")
            {
                return GetView29();
            }

            if (extentName == "ModelDeclaraStoreContainer.CAT_DOCUMENTO_OBTENIDO")
            {
                return GetView30();
            }

            if (extentName == "ModelDeclaraStoreContainer.CAT_ENTIDAD_FEDERATIVA")
            {
                return GetView31();
            }

            if (extentName == "ModelDeclaraStoreContainer.CAT_ESTADO_DECLARACION")
            {
                return GetView32();
            }

            if (extentName == "ModelDeclaraStoreContainer.CAT_ESTADO_ESCOLARIDAD")
            {
                return GetView33();
            }

            if (extentName == "ModelDeclaraStoreContainer.CAT_ESTADO_TESTADO")
            {
                return GetView34();
            }

            if (extentName == "ModelDeclaraStoreContainer.CAT_FORMA_ADQUISICION")
            {
                return GetView35();
            }

            if (extentName == "ModelDeclaraStoreContainer.CAT_FORMA_PAGO")
            {
                return GetView36();
            }

            if (extentName == "ModelDeclaraStoreContainer.CAT_INST_FINANCIERA")
            {
                return GetView37();
            }

            if (extentName == "ModelDeclaraStoreContainer.CAT_MARCA_VEHICULO")
            {
                return GetView38();
            }

            if (extentName == "ModelDeclaraStoreContainer.CAT_MUNICIPIO")
            {
                return GetView39();
            }

            if (extentName == "ModelDeclaraStoreContainer.CAT_NIVEL_ESCOLARIDAD")
            {
                return GetView40();
            }

            if (extentName == "ModelDeclaraStoreContainer.CAT_NIVEL_GOBIERNO")
            {
                return GetView41();
            }

            if (extentName == "ModelDeclaraStoreContainer.CAT_PAIS")
            {
                return GetView42();
            }

            if (extentName == "ModelDeclaraStoreContainer.CAT_PUESTO")
            {
                return GetView43();
            }

            if (extentName == "ModelDeclaraStoreContainer.CAT_REGIMEN_MATRIMONIAL")
            {
                return GetView44();
            }

            if (extentName == "ModelDeclaraStoreContainer.CAT_RELACION_TRANSMISOR")
            {
                return GetView45();
            }

            if (extentName == "ModelDeclaraStoreContainer.CAT_RESTRICCIONES")
            {
                return GetView46();
            }

            if (extentName == "ModelDeclaraStoreContainer.CAT_SECTOR")
            {
                return GetView47();
            }

            if (extentName == "ModelDeclaraStoreContainer.CAT_SEGUNDO_NIVEL")
            {
                return GetView48();
            }

            if (extentName == "ModelDeclaraStoreContainer.CAT_SUBTIPO_INVERSION")
            {
                return GetView49();
            }

            if (extentName == "ModelDeclaraStoreContainer.CAT_TIPO_ADEUDO")
            {
                return GetView50();
            }

            if (extentName == "ModelDeclaraStoreContainer.CAT_TIPO_BAJA")
            {
                return GetView51();
            }

            if (extentName == "ModelDeclaraStoreContainer.CAT_TIPO_DECLARACION")
            {
                return GetView52();
            }

            if (extentName == "ModelDeclaraStoreContainer.CAT_TIPO_DEPENDIENTES")
            {
                return GetView53();
            }

            if (extentName == "ModelDeclaraStoreContainer.CAT_TIPO_DOMICILIO")
            {
                return GetView54();
            }

            if (extentName == "ModelDeclaraStoreContainer.CAT_TIPO_GASTO")
            {
                return GetView55();
            }

            if (extentName == "ModelDeclaraStoreContainer.CAT_TIPO_INMUEBLE")
            {
                return GetView56();
            }

            if (extentName == "ModelDeclaraStoreContainer.CAT_TIPO_MUEBLE")
            {
                return GetView57();
            }

            if (extentName == "ModelDeclaraStoreContainer.CAT_TIPO_PATRIMONIO")
            {
                return GetView58();
            }

            if (extentName == "ModelDeclaraStoreContainer.CAT_TIPO_VEHICULO")
            {
                return GetView59();
            }

            if (extentName == "ModelDeclaraStoreContainer.CAT_USO_INMUEBLE")
            {
                return GetView60();
            }

            if (extentName == "ModelDeclaraStoreContainer.CAT_USO_VEHICULO")
            {
                return GetView61();
            }

            if (extentName == "ModelDeclaraStoreContainer.CAT_VALOR_ADQUISICION")
            {
                return GetView62();
            }

            if (extentName == "ModelDeclaraStoreContainer.DECLARACION")
            {
                return GetView63();
            }

            if (extentName == "ModelDeclaraStoreContainer.DECLARACION_APARTADO")
            {
                return GetView64();
            }

            if (extentName == "ModelDeclaraStoreContainer.DECLARACION_CARGO")
            {
                return GetView65();
            }

            if (extentName == "ModelDeclaraStoreContainer.DECLARACION_CARGO_OTRO")
            {
                return GetView66();
            }

            if (extentName == "ModelDeclaraStoreContainer.DECLARACION_DEPENDIENTES")
            {
                return GetView67();
            }

            if (extentName == "ModelDeclaraStoreContainer.DECLARACION_DEPENDIENTES_DOMICILIO")
            {
                return GetView68();
            }

            if (extentName == "ModelDeclaraStoreContainer.DECLARACION_DEPENDIENTES_PRIVADO")
            {
                return GetView69();
            }

            if (extentName == "ModelDeclaraStoreContainer.DECLARACION_DEPENDIENTES_PUBLICO")
            {
                return GetView70();
            }

            if (extentName == "ModelDeclaraStoreContainer.DECLARACION_DOM_LABORAL")
            {
                return GetView71();
            }

            if (extentName == "ModelDeclaraStoreContainer.DECLARACION_DOM_PARTICULAR")
            {
                return GetView72();
            }

            if (extentName == "ModelDeclaraStoreContainer.DECLARACION_EGRESOS")
            {
                return GetView73();
            }

            if (extentName == "ModelDeclaraStoreContainer.DECLARACION_ESCOLARIDAD")
            {
                return GetView74();
            }

            if (extentName == "ModelDeclaraStoreContainer.DECLARACION_EXPERIENCIA_LABORAL")
            {
                return GetView75();
            }

            if (extentName == "ModelDeclaraStoreContainer.DECLARACION_INGRESOS")
            {
                return GetView76();
            }

            if (extentName == "ModelDeclaraStoreContainer.DECLARACION_REGIMEN_MATRIMONIAL")
            {
                return GetView77();
            }

            if (extentName == "ModelDeclaraStoreContainer.DECLARACION_RESTRICCIONES")
            {
                return GetView78();
            }

            if (extentName == "ModelDeclaraStoreContainer.H_PATRIMONIO")
            {
                return GetView79();
            }

            if (extentName == "ModelDeclaraStoreContainer.H_PATRIMONIO_ADEUDO")
            {
                return GetView80();
            }

            if (extentName == "ModelDeclaraStoreContainer.H_PATRIMONIO_COPROPIETARIO")
            {
                return GetView81();
            }

            if (extentName == "ModelDeclaraStoreContainer.H_PATRIMONIO_DEPENDIENTES")
            {
                return GetView82();
            }

            if (extentName == "ModelDeclaraStoreContainer.H_PATRIMONIO_FORMA_ADQUISICION")
            {
                return GetView83();
            }

            if (extentName == "ModelDeclaraStoreContainer.H_PATRIMONIO_INMUEBLE")
            {
                return GetView84();
            }

            if (extentName == "ModelDeclaraStoreContainer.H_PATRIMONIO_INVERSION")
            {
                return GetView85();
            }

            if (extentName == "ModelDeclaraStoreContainer.H_PATRIMONIO_MUEBLE")
            {
                return GetView86();
            }

            if (extentName == "ModelDeclaraStoreContainer.H_PATRIMONIO_TITULAR")
            {
                return GetView87();
            }

            if (extentName == "ModelDeclaraStoreContainer.H_PATRIMONIO_VEHICULO")
            {
                return GetView88();
            }

            if (extentName == "ModelDeclaraStoreContainer.MODIFICACION")
            {
                return GetView89();
            }

            if (extentName == "ModelDeclaraStoreContainer.MODIFICACION_ADEUDO")
            {
                return GetView90();
            }

            if (extentName == "ModelDeclaraStoreContainer.MODIFICACION_ADEUDO_TITULAR")
            {
                return GetView91();
            }

            if (extentName == "ModelDeclaraStoreContainer.MODIFICACION_BAJA")
            {
                return GetView92();
            }

            if (extentName == "ModelDeclaraStoreContainer.MODIFICACION_BAJA_SINIESTRO")
            {
                return GetView93();
            }

            if (extentName == "ModelDeclaraStoreContainer.MODIFICACION_BAJA_VENTA")
            {
                return GetView94();
            }

            if (extentName == "ModelDeclaraStoreContainer.MODIFICACION_DONACION")
            {
                return GetView95();
            }

            if (extentName == "ModelDeclaraStoreContainer.MODIFICACION_GASTO")
            {
                return GetView96();
            }

            if (extentName == "ModelDeclaraStoreContainer.MODIFICACION_INGRESOS")
            {
                return GetView97();
            }

            if (extentName == "ModelDeclaraStoreContainer.MODIFICACION_INMUEBLE")
            {
                return GetView98();
            }

            if (extentName == "ModelDeclaraStoreContainer.MODIFICACION_INMUEBLE_ADEUDO")
            {
                return GetView99();
            }

            if (extentName == "ModelDeclaraStoreContainer.MODIFICACION_INMUEBLE_AMPLIACION")
            {
                return GetView100();
            }

            if (extentName == "ModelDeclaraStoreContainer.MODIFICACION_INMUEBLE_CONSTRUCCION")
            {
                return GetView101();
            }

            if (extentName == "ModelDeclaraStoreContainer.MODIFICACION_INMUEBLE_TITULA")
            {
                return GetView102();
            }

            if (extentName == "ModelDeclaraStoreContainer.MODIFICACION_INVERSION")
            {
                return GetView103();
            }

            if (extentName == "ModelDeclaraStoreContainer.MODIFICACION_INVERSION_TITU")
            {
                return GetView104();
            }

            if (extentName == "ModelDeclaraStoreContainer.MODIFICACION_MUEBLE")
            {
                return GetView105();
            }

            if (extentName == "ModelDeclaraStoreContainer.MODIFICACION_MUEBLE_TITULAR")
            {
                return GetView106();
            }

            if (extentName == "ModelDeclaraStoreContainer.MODIFICACION_TARJETA")
            {
                return GetView107();
            }

            if (extentName == "ModelDeclaraStoreContainer.MODIFICACION_TARJETA_TITU")
            {
                return GetView108();
            }

            if (extentName == "ModelDeclaraStoreContainer.MODIFICACION_VEHICULO")
            {
                return GetView109();
            }

            if (extentName == "ModelDeclaraStoreContainer.MODIFICACION_VEHICULO_ADEU")
            {
                return GetView110();
            }

            if (extentName == "ModelDeclaraStoreContainer.MODIFICACION_VEHICULO_TITU")
            {
                return GetView111();
            }

            if (extentName == "ModelDeclaraStoreContainer.PATRIMONIO")
            {
                return GetView112();
            }

            if (extentName == "ModelDeclaraStoreContainer.PATRIMONIO_ADEUDO")
            {
                return GetView113();
            }

            if (extentName == "ModelDeclaraStoreContainer.PATRIMONIO_COPROPIETARIO")
            {
                return GetView114();
            }

            if (extentName == "ModelDeclaraStoreContainer.PATRIMONIO_DEPENDIENTES")
            {
                return GetView115();
            }

            if (extentName == "ModelDeclaraStoreContainer.PATRIMONIO_FORMA_ADQUISICION")
            {
                return GetView116();
            }

            if (extentName == "ModelDeclaraStoreContainer.PATRIMONIO_INMUEBLE")
            {
                return GetView117();
            }

            if (extentName == "ModelDeclaraStoreContainer.PATRIMONIO_INMUEBLE_ADEUDO")
            {
                return GetView118();
            }

            if (extentName == "ModelDeclaraStoreContainer.PATRIMONIO_INVERSION")
            {
                return GetView119();
            }

            if (extentName == "ModelDeclaraStoreContainer.PATRIMONIO_MUEBLE")
            {
                return GetView120();
            }

            if (extentName == "ModelDeclaraStoreContainer.PATRIMONIO_TARJETA")
            {
                return GetView121();
            }

            if (extentName == "ModelDeclaraStoreContainer.PATRIMONIO_TITULAR")
            {
                return GetView122();
            }

            if (extentName == "ModelDeclaraStoreContainer.PATRIMONIO_VEHICULO")
            {
                return GetView123();
            }

            if (extentName == "ModelDeclaraStoreContainer.PATRIMONIO_VEHICULO_ADEUDO")
            {
                return GetView124();
            }

            if (extentName == "ModelDeclaraStoreContainer.USUARIO")
            {
                return GetView125();
            }

            if (extentName == "ModelDeclaraStoreContainer.USUARIO_CORREO")
            {
                return GetView126();
            }

            if (extentName == "ModelDeclaraStoreContainer.USUARIO_DOMICILIO")
            {
                return GetView127();
            }

            if (extentName == "ModelDeclaraStoreContainer.USUARIO_REC_PASS")
            {
                return GetView128();
            }

            if (extentName == "ModelDeclaraStoreContainer.USUARIO_SESION")
            {
                return GetView129();
            }

            if (extentName == "cnxDeclara.ALTA")
            {
                return GetView130();
            }

            if (extentName == "cnxDeclara.ALTA_ADEUDO")
            {
                return GetView131();
            }

            if (extentName == "cnxDeclara.ALTA_ADEUDO_PAGOS")
            {
                return GetView132();
            }

            if (extentName == "cnxDeclara.ALTA_ADEUDO_TITULAR")
            {
                return GetView133();
            }

            if (extentName == "cnxDeclara.ALTA_COMODATO")
            {
                return GetView134();
            }

            if (extentName == "cnxDeclara.ALTA_COMODATO_INMUEBLE")
            {
                return GetView135();
            }

            if (extentName == "cnxDeclara.ALTA_COMODATO_VEHICULO")
            {
                return GetView136();
            }

            if (extentName == "cnxDeclara.ALTA_INMUEBLE")
            {
                return GetView137();
            }

            if (extentName == "cnxDeclara.ALTA_INMUEBLE_ADEUDO")
            {
                return GetView138();
            }

            if (extentName == "cnxDeclara.ALTA_INMUEBLE_COPROPIETARIO")
            {
                return GetView139();
            }

            if (extentName == "cnxDeclara.ALTA_INMUEBLE_FORMA_ADQUISICION")
            {
                return GetView140();
            }

            if (extentName == "cnxDeclara.ALTA_INMUEBLE_PAGO_INICIAL")
            {
                return GetView141();
            }

            if (extentName == "cnxDeclara.ALTA_INMUEBLE_TITULAR")
            {
                return GetView142();
            }

            if (extentName == "cnxDeclara.ALTA_INVERSION")
            {
                return GetView143();
            }

            if (extentName == "cnxDeclara.ALTA_INVERSION_COPROPIETARIO")
            {
                return GetView144();
            }

            if (extentName == "cnxDeclara.ALTA_INVERSION_TITULAR")
            {
                return GetView145();
            }

            if (extentName == "cnxDeclara.ALTA_MUEBLE")
            {
                return GetView146();
            }

            if (extentName == "cnxDeclara.ALTA_MUEBLE_COPROPIETARIO")
            {
                return GetView147();
            }

            if (extentName == "cnxDeclara.ALTA_MUEBLE_FORMA_ADQUISICION")
            {
                return GetView148();
            }

            if (extentName == "cnxDeclara.ALTA_MUEBLE_TITULAR")
            {
                return GetView149();
            }

            if (extentName == "cnxDeclara.ALTA_TARJETA")
            {
                return GetView150();
            }

            if (extentName == "cnxDeclara.ALTA_VEHICULO")
            {
                return GetView151();
            }

            if (extentName == "cnxDeclara.ALTA_VEHICULO_ADEUDO")
            {
                return GetView152();
            }

            if (extentName == "cnxDeclara.ALTA_VEHICULO_COPROPIETARIO")
            {
                return GetView153();
            }

            if (extentName == "cnxDeclara.ALTA_VEHICULO_FORMA_ADQUISICION")
            {
                return GetView154();
            }

            if (extentName == "cnxDeclara.ALTA_VEHICULO_PAGO_INICIAL")
            {
                return GetView155();
            }

            if (extentName == "cnxDeclara.ALTA_VEHICULO_TITULAR")
            {
                return GetView156();
            }

            if (extentName == "cnxDeclara.CAT_AMBITO_PUBLICO")
            {
                return GetView157();
            }

            if (extentName == "cnxDeclara.CAT_AMBITO_SECTOR")
            {
                return GetView158();
            }

            if (extentName == "cnxDeclara.CAT_CODIGO_POSTAL")
            {
                return GetView159();
            }

            if (extentName == "cnxDeclara.CAT_DOCUMENTO_OBTENIDO")
            {
                return GetView160();
            }

            if (extentName == "cnxDeclara.CAT_ENTIDAD_FEDERATIVA")
            {
                return GetView161();
            }

            if (extentName == "cnxDeclara.CAT_ESTADO_DECLARACION")
            {
                return GetView162();
            }

            if (extentName == "cnxDeclara.CAT_ESTADO_ESCOLARIDAD")
            {
                return GetView163();
            }

            if (extentName == "cnxDeclara.CAT_ESTADO_TESTADO")
            {
                return GetView164();
            }

            if (extentName == "cnxDeclara.CAT_FORMA_ADQUISICION")
            {
                return GetView165();
            }

            if (extentName == "cnxDeclara.CAT_FORMA_PAGO")
            {
                return GetView166();
            }

            if (extentName == "cnxDeclara.CAT_INST_FINANCIERA")
            {
                return GetView167();
            }

            if (extentName == "cnxDeclara.CAT_MARCA_VEHICULO")
            {
                return GetView168();
            }

            if (extentName == "cnxDeclara.CAT_MUNICIPIO")
            {
                return GetView169();
            }

            if (extentName == "cnxDeclara.CAT_NIVEL_ESCOLARIDAD")
            {
                return GetView170();
            }

            if (extentName == "cnxDeclara.CAT_NIVEL_GOBIERNO")
            {
                return GetView171();
            }

            if (extentName == "cnxDeclara.CAT_PAIS")
            {
                return GetView172();
            }

            if (extentName == "cnxDeclara.CAT_PUESTO")
            {
                return GetView173();
            }

            if (extentName == "cnxDeclara.CAT_REGIMEN_MATRIMONIAL")
            {
                return GetView174();
            }

            if (extentName == "cnxDeclara.CAT_RELACION_TRANSMISOR")
            {
                return GetView175();
            }

            if (extentName == "cnxDeclara.CAT_RESTRICCIONES")
            {
                return GetView176();
            }

            if (extentName == "cnxDeclara.CAT_SECTOR")
            {
                return GetView177();
            }

            if (extentName == "cnxDeclara.CAT_SEGUNDO_NIVEL")
            {
                return GetView178();
            }

            if (extentName == "cnxDeclara.CAT_SUBTIPO_INVERSION")
            {
                return GetView179();
            }

            if (extentName == "cnxDeclara.CAT_TIPO_ADEUDO")
            {
                return GetView180();
            }

            if (extentName == "cnxDeclara.CAT_TIPO_BAJA")
            {
                return GetView181();
            }

            if (extentName == "cnxDeclara.CAT_TIPO_DECLARACION")
            {
                return GetView182();
            }

            if (extentName == "cnxDeclara.CAT_TIPO_DEPENDIENTES")
            {
                return GetView183();
            }

            if (extentName == "cnxDeclara.CAT_TIPO_DOMICILIO")
            {
                return GetView184();
            }

            if (extentName == "cnxDeclara.CAT_TIPO_GASTO")
            {
                return GetView185();
            }

            if (extentName == "cnxDeclara.CAT_TIPO_INMUEBLE")
            {
                return GetView186();
            }

            if (extentName == "cnxDeclara.CAT_TIPO_MUEBLE")
            {
                return GetView187();
            }

            if (extentName == "cnxDeclara.CAT_TIPO_PATRIMONIO")
            {
                return GetView188();
            }

            if (extentName == "cnxDeclara.CAT_TIPO_VEHICULO")
            {
                return GetView189();
            }

            if (extentName == "cnxDeclara.CAT_USO_INMUEBLE")
            {
                return GetView190();
            }

            if (extentName == "cnxDeclara.CAT_USO_VEHICULO")
            {
                return GetView191();
            }

            if (extentName == "cnxDeclara.CAT_VALOR_ADQUISICION")
            {
                return GetView192();
            }

            if (extentName == "cnxDeclara.DECLARACION")
            {
                return GetView193();
            }

            if (extentName == "cnxDeclara.DECLARACION_APARTADO")
            {
                return GetView194();
            }

            if (extentName == "cnxDeclara.DECLARACION_CARGO")
            {
                return GetView195();
            }

            if (extentName == "cnxDeclara.DECLARACION_CARGO_OTRO")
            {
                return GetView196();
            }

            if (extentName == "cnxDeclara.DECLARACION_DEPENDIENTES")
            {
                return GetView197();
            }

            if (extentName == "cnxDeclara.DECLARACION_DEPENDIENTES_DOMICILIO")
            {
                return GetView198();
            }

            if (extentName == "cnxDeclara.DECLARACION_DEPENDIENTES_PRIVADO")
            {
                return GetView199();
            }

            if (extentName == "cnxDeclara.DECLARACION_DEPENDIENTES_PUBLICO")
            {
                return GetView200();
            }

            if (extentName == "cnxDeclara.DECLARACION_DOM_LABORAL")
            {
                return GetView201();
            }

            if (extentName == "cnxDeclara.DECLARACION_DOM_PARTICULAR")
            {
                return GetView202();
            }

            if (extentName == "cnxDeclara.DECLARACION_EGRESOS")
            {
                return GetView203();
            }

            if (extentName == "cnxDeclara.DECLARACION_ESCOLARIDAD")
            {
                return GetView204();
            }

            if (extentName == "cnxDeclara.DECLARACION_EXPERIENCIA_LABORAL")
            {
                return GetView205();
            }

            if (extentName == "cnxDeclara.DECLARACION_INGRESOS")
            {
                return GetView206();
            }

            if (extentName == "cnxDeclara.DECLARACION_REGIMEN_MATRIMONIAL")
            {
                return GetView207();
            }

            if (extentName == "cnxDeclara.DECLARACION_RESTRICCIONES")
            {
                return GetView208();
            }

            if (extentName == "cnxDeclara.H_PATRIMONIO")
            {
                return GetView209();
            }

            if (extentName == "cnxDeclara.H_PATRIMONIO_ADEUDO")
            {
                return GetView210();
            }

            if (extentName == "cnxDeclara.H_PATRIMONIO_COPROPIETARIO")
            {
                return GetView211();
            }

            if (extentName == "cnxDeclara.H_PATRIMONIO_DEPENDIENTES")
            {
                return GetView212();
            }

            if (extentName == "cnxDeclara.H_PATRIMONIO_FORMA_ADQUISICION")
            {
                return GetView213();
            }

            if (extentName == "cnxDeclara.H_PATRIMONIO_INMUEBLE")
            {
                return GetView214();
            }

            if (extentName == "cnxDeclara.H_PATRIMONIO_INVERSION")
            {
                return GetView215();
            }

            if (extentName == "cnxDeclara.H_PATRIMONIO_MUEBLE")
            {
                return GetView216();
            }

            if (extentName == "cnxDeclara.H_PATRIMONIO_TITULAR")
            {
                return GetView217();
            }

            if (extentName == "cnxDeclara.H_PATRIMONIO_VEHICULO")
            {
                return GetView218();
            }

            if (extentName == "cnxDeclara.MODIFICACION")
            {
                return GetView219();
            }

            if (extentName == "cnxDeclara.MODIFICACION_ADEUDO")
            {
                return GetView220();
            }

            if (extentName == "cnxDeclara.MODIFICACION_ADEUDO_TITULAR")
            {
                return GetView221();
            }

            if (extentName == "cnxDeclara.MODIFICACION_BAJA")
            {
                return GetView222();
            }

            if (extentName == "cnxDeclara.MODIFICACION_BAJA_SINIESTRO")
            {
                return GetView223();
            }

            if (extentName == "cnxDeclara.MODIFICACION_BAJA_VENTA")
            {
                return GetView224();
            }

            if (extentName == "cnxDeclara.MODIFICACION_DONACION")
            {
                return GetView225();
            }

            if (extentName == "cnxDeclara.MODIFICACION_GASTO")
            {
                return GetView226();
            }

            if (extentName == "cnxDeclara.MODIFICACION_INGRESOS")
            {
                return GetView227();
            }

            if (extentName == "cnxDeclara.MODIFICACION_INMUEBLE")
            {
                return GetView228();
            }

            if (extentName == "cnxDeclara.MODIFICACION_INMUEBLE_ADEUDO")
            {
                return GetView229();
            }

            if (extentName == "cnxDeclara.MODIFICACION_INMUEBLE_AMPLIACION")
            {
                return GetView230();
            }

            if (extentName == "cnxDeclara.MODIFICACION_INMUEBLE_CONSTRUCCION")
            {
                return GetView231();
            }

            if (extentName == "cnxDeclara.MODIFICACION_INMUEBLE_TITULA")
            {
                return GetView232();
            }

            if (extentName == "cnxDeclara.MODIFICACION_INVERSION")
            {
                return GetView233();
            }

            if (extentName == "cnxDeclara.MODIFICACION_INVERSION_TITU")
            {
                return GetView234();
            }

            if (extentName == "cnxDeclara.MODIFICACION_MUEBLE")
            {
                return GetView235();
            }

            if (extentName == "cnxDeclara.MODIFICACION_MUEBLE_TITULAR")
            {
                return GetView236();
            }

            if (extentName == "cnxDeclara.MODIFICACION_TARJETA")
            {
                return GetView237();
            }

            if (extentName == "cnxDeclara.MODIFICACION_TARJETA_TITU")
            {
                return GetView238();
            }

            if (extentName == "cnxDeclara.MODIFICACION_VEHICULO")
            {
                return GetView239();
            }

            if (extentName == "cnxDeclara.MODIFICACION_VEHICULO_ADEU")
            {
                return GetView240();
            }

            if (extentName == "cnxDeclara.MODIFICACION_VEHICULO_TITU")
            {
                return GetView241();
            }

            if (extentName == "cnxDeclara.PATRIMONIO")
            {
                return GetView242();
            }

            if (extentName == "cnxDeclara.PATRIMONIO_ADEUDO")
            {
                return GetView243();
            }

            if (extentName == "cnxDeclara.PATRIMONIO_COPROPIETARIO")
            {
                return GetView244();
            }

            if (extentName == "cnxDeclara.PATRIMONIO_DEPENDIENTES")
            {
                return GetView245();
            }

            if (extentName == "cnxDeclara.PATRIMONIO_FORMA_ADQUISICION")
            {
                return GetView246();
            }

            if (extentName == "cnxDeclara.PATRIMONIO_INMUEBLE")
            {
                return GetView247();
            }

            if (extentName == "cnxDeclara.PATRIMONIO_INMUEBLE_ADEUDO")
            {
                return GetView248();
            }

            if (extentName == "cnxDeclara.PATRIMONIO_INVERSION")
            {
                return GetView249();
            }

            if (extentName == "cnxDeclara.PATRIMONIO_MUEBLE")
            {
                return GetView250();
            }

            if (extentName == "cnxDeclara.PATRIMONIO_TARJETA")
            {
                return GetView251();
            }

            if (extentName == "cnxDeclara.PATRIMONIO_TITULAR")
            {
                return GetView252();
            }

            if (extentName == "cnxDeclara.PATRIMONIO_VEHICULO")
            {
                return GetView253();
            }

            if (extentName == "cnxDeclara.PATRIMONIO_VEHICULO_ADEUDO")
            {
                return GetView254();
            }

            if (extentName == "cnxDeclara.USUARIO")
            {
                return GetView255();
            }

            if (extentName == "cnxDeclara.USUARIO_CORREO")
            {
                return GetView256();
            }

            if (extentName == "cnxDeclara.USUARIO_DOMICILIO")
            {
                return GetView257();
            }

            if (extentName == "cnxDeclara.USUARIO_REC_PASS")
            {
                return GetView258();
            }

            if (extentName == "cnxDeclara.USUARIO_SESION")
            {
                return GetView259();
            }

            if (extentName == "ModelDeclaraStoreContainer.ALTA_ADEUDO_COPROPIETARIO")
            {
                return GetView260();
            }

            if (extentName == "cnxDeclara.ALTA_ADEUDO_COPROPIETARIO")
            {
                return GetView261();
            }

            if (extentName == "ModelDeclaraStoreContainer.CAT_ACTIVIDAD_LABORAL")
            {
                return GetView262();
            }

            if (extentName == "cnxDeclara.CAT_ACTIVIDAD_LABORAL")
            {
                return GetView263();
            }

            if (extentName == "ModelDeclaraStoreContainer.CAT_APARTADO")
            {
                return GetView264();
            }

            if (extentName == "cnxDeclara.CAT_APARTADO")
            {
                return GetView265();
            }

            if (extentName == "ModelDeclaraStoreContainer.CAT_BIEN_ENAJENADO")
            {
                return GetView266();
            }

            if (extentName == "cnxDeclara.CAT_BIEN_ENAJENADO")
            {
                return GetView267();
            }

            if (extentName == "ModelDeclaraStoreContainer.CAT_CONFLICTO_PREGUNTA")
            {
                return GetView268();
            }

            if (extentName == "ModelDeclaraStoreContainer.CAT_CONFLICTO_RUBRO")
            {
                return GetView269();
            }

            if (extentName == "ModelDeclaraStoreContainer.CAT_ESTADO_CONFLICTO")
            {
                return GetView270();
            }

            if (extentName == "ModelDeclaraStoreContainer.CONFLICTO")
            {
                return GetView271();
            }

            if (extentName == "ModelDeclaraStoreContainer.CONFLICTO_ENCABEZADO")
            {
                return GetView272();
            }

            if (extentName == "ModelDeclaraStoreContainer.CONFLICTO_RESPUESTA")
            {
                return GetView273();
            }

            if (extentName == "ModelDeclaraStoreContainer.CONFLICTO_RUBRO")
            {
                return GetView274();
            }

            if (extentName == "cnxDeclara.CAT_CONFLICTO_PREGUNTA")
            {
                return GetView275();
            }

            if (extentName == "cnxDeclara.CAT_CONFLICTO_RUBRO")
            {
                return GetView276();
            }

            if (extentName == "cnxDeclara.CAT_ESTADO_CONFLICTO")
            {
                return GetView277();
            }

            if (extentName == "cnxDeclara.CONFLICTO")
            {
                return GetView278();
            }

            if (extentName == "cnxDeclara.CONFLICTO_ENCABEZADO")
            {
                return GetView279();
            }

            if (extentName == "cnxDeclara.CONFLICTO_RESPUESTA")
            {
                return GetView280();
            }

            if (extentName == "cnxDeclara.CONFLICTO_RUBRO")
            {
                return GetView281();
            }

            if (extentName == "ModelDeclaraStoreContainer.CAT_DENOMINACION")
            {
                return GetView282();
            }

            if (extentName == "cnxDeclara.CAT_DENOMINACION")
            {
                return GetView283();
            }

            if (extentName == "ModelDeclaraStoreContainer.CAT_DIAS_FERIADOS")
            {
                return GetView284();
            }

            if (extentName == "cnxDeclara.CAT_DIAS_FERIADOS")
            {
                return GetView285();
            }

            if (extentName == "ModelDeclaraStoreContainer.CAT_EGRESOS")
            {
                return GetView286();
            }

            if (extentName == "cnxDeclara.CAT_EGRESOS")
            {
                return GetView287();
            }

            if (extentName == "ModelDeclaraStoreContainer.CAT_ESTADO_CIVIL")
            {
                return GetView288();
            }

            if (extentName == "cnxDeclara.CAT_ESTADO_CIVIL")
            {
                return GetView289();
            }

            if (extentName == "ModelDeclaraStoreContainer.CAT_GASTOS_DEFAULT")
            {
                return GetView290();
            }

            if (extentName == "cnxDeclara.CAT_GASTOS_DEFAULT")
            {
                return GetView291();
            }

            if (extentName == "ModelDeclaraStoreContainer.CAT_INGRESOS")
            {
                return GetView292();
            }

            if (extentName == "cnxDeclara.CAT_INGRESOS")
            {
                return GetView293();
            }

            if (extentName == "ModelDeclaraStoreContainer.CAT_INSTRUMENTO_RENDIMIENTO")
            {
                return GetView294();
            }

            if (extentName == "cnxDeclara.CAT_INSTRUMENTO_RENDIMIENTO")
            {
                return GetView295();
            }

            if (extentName == "ModelDeclaraStoreContainer.CAT_PRIMER_NIVEL")
            {
                return GetView296();
            }

            if (extentName == "cnxDeclara.CAT_PRIMER_NIVEL")
            {
                return GetView297();
            }

            if (extentName == "ModelDeclaraStoreContainer.CAT_RELACION_PAREJA")
            {
                return GetView298();
            }

            if (extentName == "cnxDeclara.CAT_RELACION_PAREJA")
            {
                return GetView299();
            }

            if (extentName == "ModelDeclaraStoreContainer.CAT_SECCION_INGRESO")
            {
                return GetView300();
            }

            if (extentName == "cnxDeclara.CAT_SECCION_INGRESO")
            {
                return GetView301();
            }

            if (extentName == "ModelDeclaraStoreContainer.CAT_TIPO_INVERSION")
            {
                return GetView302();
            }

            if (extentName == "cnxDeclara.CAT_TIPO_INVERSION")
            {
                return GetView303();
            }

            if (extentName == "ModelDeclaraStoreContainer.CAT_TIPS")
            {
                return GetView304();
            }

            if (extentName == "cnxDeclara.CAT_TIPS")
            {
                return GetView305();
            }

            if (extentName == "ModelDeclaraStoreContainer.CAT_TITULAR")
            {
                return GetView306();
            }

            if (extentName == "cnxDeclara.CAT_TITULAR")
            {
                return GetView307();
            }

            if (extentName == "ModelDeclaraStoreContainer.DECLARACION_EXCEPCION_INICIAL")
            {
                return GetView308();
            }

            if (extentName == "cnxDeclara.DECLARACION_EXCEPCION_INICIAL")
            {
                return GetView309();
            }

            if (extentName == "ModelDeclaraStoreContainer.DECLARACION_HISTORICO")
            {
                return GetView310();
            }

            if (extentName == "cnxDeclara.DECLARACION_HISTORICO")
            {
                return GetView311();
            }

            if (extentName == "ModelDeclaraStoreContainer.DECLARACION_PERSONALES")
            {
                return GetView312();
            }

            if (extentName == "cnxDeclara.DECLARACION_PERSONALES")
            {
                return GetView313();
            }

            if (extentName == "ModelDeclaraStoreContainer.H_HISTORICO")
            {
                return GetView314();
            }

            if (extentName == "cnxDeclara.H_HISTORICO")
            {
                return GetView315();
            }

            if (extentName == "ModelDeclaraStoreContainer.H_PATRIMONIO_FLUJO")
            {
                return GetView316();
            }

            if (extentName == "cnxDeclara.H_PATRIMONIO_FLUJO")
            {
                return GetView317();
            }

            if (extentName == "ModelDeclaraStoreContainer.H_PATRIMONIO_INMUEBLE_ADEUDO")
            {
                return GetView318();
            }

            if (extentName == "cnxDeclara.H_PATRIMONIO_INMUEBLE_ADEUDO")
            {
                return GetView319();
            }

            if (extentName == "ModelDeclaraStoreContainer.H_PATRIMONIO_TARJETA")
            {
                return GetView320();
            }

            if (extentName == "cnxDeclara.H_PATRIMONIO_TARJETA")
            {
                return GetView321();
            }

            if (extentName == "ModelDeclaraStoreContainer.H_PATRIMONIO_TITU")
            {
                return GetView322();
            }

            if (extentName == "cnxDeclara.H_PATRIMONIO_TITU")
            {
                return GetView323();
            }

            if (extentName == "ModelDeclaraStoreContainer.H_PATRIMONIO_VEHICULO_ADEUDO")
            {
                return GetView324();
            }

            if (extentName == "cnxDeclara.H_PATRIMONIO_VEHICULO_ADEUDO")
            {
                return GetView325();
            }

            if (extentName == "ModelDeclaraStoreContainer.PATRIMONIO_FLUJO")
            {
                return GetView326();
            }

            if (extentName == "cnxDeclara.PATRIMONIO_FLUJO")
            {
                return GetView327();
            }

            if (extentName == "ModelDeclaraStoreContainer.CAT_CONFORME_A")
            {
                return GetView328();
            }

            if (extentName == "cnxDeclara.CAT_CONFORME_A")
            {
                return GetView329();
            }

            if (extentName == "ModelDeclaraStoreContainer.CAT_MONEDA")
            {
                return GetView330();
            }

            if (extentName == "cnxDeclara.CAT_MONEDA")
            {
                return GetView331();
            }

            return null;
        }

        /// <summary>
        /// Gets the view for ModelDeclaraStoreContainer.ALTA.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView0()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing ALTA
        [ModelDeclara.Store.ALTA](T1.[ALTA.VID_NOMBRE], T1.[ALTA.VID_FECHA], T1.[ALTA.VID_HOMOCLAVE], T1.[ALTA.NID_DECLARACION])
    FROM (
        SELECT 
            T.VID_NOMBRE AS [ALTA.VID_NOMBRE], 
            T.VID_FECHA AS [ALTA.VID_FECHA], 
            T.VID_HOMOCLAVE AS [ALTA.VID_HOMOCLAVE], 
            T.NID_DECLARACION AS [ALTA.NID_DECLARACION], 
            True AS _from0
        FROM cnxDeclara.ALTA AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ModelDeclaraStoreContainer.ALTA_ADEUDO.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView1()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing ALTA_ADEUDO
        [ModelDeclara.Store.ALTA_ADEUDO](T1.[ALTA_ADEUDO.VID_NOMBRE], T1.[ALTA_ADEUDO.VID_FECHA], T1.[ALTA_ADEUDO.VID_HOMOCLAVE], T1.[ALTA_ADEUDO.NID_DECLARACION], T1.[ALTA_ADEUDO.NID_ADEUDO], T1.[ALTA_ADEUDO.NID_PAIS], T1.[ALTA_ADEUDO.CID_ENTIDAD_FEDERATIVA], T1.[ALTA_ADEUDO.V_LUGAR], T1.[ALTA_ADEUDO.NID_INSTITUCION], T1.[ALTA_ADEUDO.V_OTRA], T1.[ALTA_ADEUDO.NID_TIPO_ADEUDO], T1.[ALTA_ADEUDO.F_ADEUDO], T1.[ALTA_ADEUDO.M_ORIGINAL], T1.[ALTA_ADEUDO.M_SALDO], T1.[ALTA_ADEUDO.E_CUENTA], T1.[ALTA_ADEUDO.L_AUTOGENERADO], T1.[ALTA_ADEUDO.NID_PATRIMONIO], T1.[ALTA_ADEUDO.V_TIPO_MONEDA], T1.[ALTA_ADEUDO.CID_TIPO_PERSONA_OTORGANTE], T1.[ALTA_ADEUDO.E_RFC], T1.[ALTA_ADEUDO.E_OBSERVACIONES], T1.[ALTA_ADEUDO.E_OBSERVACIONES_MARCADO], T1.[ALTA_ADEUDO.V_OBSERVACIONES_TESTADO], T1.[ALTA_ADEUDO.NID_ESTADO_TESTADO], T1.[ALTA_ADEUDO.NID_TERCERO], T1.[ALTA_ADEUDO.E_NOMBRE_TERCERO], T1.[ALTA_ADEUDO.E_RFC_TERCERO])
    FROM (
        SELECT 
            T.VID_NOMBRE AS [ALTA_ADEUDO.VID_NOMBRE], 
            T.VID_FECHA AS [ALTA_ADEUDO.VID_FECHA], 
            T.VID_HOMOCLAVE AS [ALTA_ADEUDO.VID_HOMOCLAVE], 
            T.NID_DECLARACION AS [ALTA_ADEUDO.NID_DECLARACION], 
            T.NID_ADEUDO AS [ALTA_ADEUDO.NID_ADEUDO], 
            T.NID_PAIS AS [ALTA_ADEUDO.NID_PAIS], 
            T.CID_ENTIDAD_FEDERATIVA AS [ALTA_ADEUDO.CID_ENTIDAD_FEDERATIVA], 
            T.V_LUGAR AS [ALTA_ADEUDO.V_LUGAR], 
            T.NID_INSTITUCION AS [ALTA_ADEUDO.NID_INSTITUCION], 
            T.V_OTRA AS [ALTA_ADEUDO.V_OTRA], 
            T.NID_TIPO_ADEUDO AS [ALTA_ADEUDO.NID_TIPO_ADEUDO], 
            T.F_ADEUDO AS [ALTA_ADEUDO.F_ADEUDO], 
            T.M_ORIGINAL AS [ALTA_ADEUDO.M_ORIGINAL], 
            T.M_SALDO AS [ALTA_ADEUDO.M_SALDO], 
            T.E_CUENTA AS [ALTA_ADEUDO.E_CUENTA], 
            T.L_AUTOGENERADO AS [ALTA_ADEUDO.L_AUTOGENERADO], 
            T.NID_PATRIMONIO AS [ALTA_ADEUDO.NID_PATRIMONIO], 
            T.V_TIPO_MONEDA AS [ALTA_ADEUDO.V_TIPO_MONEDA], 
            T.CID_TIPO_PERSONA_OTORGANTE AS [ALTA_ADEUDO.CID_TIPO_PERSONA_OTORGANTE], 
            T.E_RFC AS [ALTA_ADEUDO.E_RFC], 
            T.E_OBSERVACIONES AS [ALTA_ADEUDO.E_OBSERVACIONES], 
            T.E_OBSERVACIONES_MARCADO AS [ALTA_ADEUDO.E_OBSERVACIONES_MARCADO], 
            T.V_OBSERVACIONES_TESTADO AS [ALTA_ADEUDO.V_OBSERVACIONES_TESTADO], 
            T.NID_ESTADO_TESTADO AS [ALTA_ADEUDO.NID_ESTADO_TESTADO], 
            T.NID_TERCERO AS [ALTA_ADEUDO.NID_TERCERO], 
            T.E_NOMBRE_TERCERO AS [ALTA_ADEUDO.E_NOMBRE_TERCERO], 
            T.E_RFC_TERCERO AS [ALTA_ADEUDO.E_RFC_TERCERO], 
            True AS _from0
        FROM cnxDeclara.ALTA_ADEUDO AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ModelDeclaraStoreContainer.ALTA_ADEUDO_PAGOS.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView2()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing ALTA_ADEUDO_PAGOS
        [ModelDeclara.Store.ALTA_ADEUDO_PAGOS](T1.[ALTA_ADEUDO_PAGOS.VID_NOMBRE], T1.[ALTA_ADEUDO_PAGOS.VID_FECHA], T1.[ALTA_ADEUDO_PAGOS.VID_HOMOCLAVE], T1.[ALTA_ADEUDO_PAGOS.NID_DECLARACION], T1.[ALTA_ADEUDO_PAGOS.NID_ADEUDO], T1.[ALTA_ADEUDO_PAGOS.M_PAGOS])
    FROM (
        SELECT 
            T.VID_NOMBRE AS [ALTA_ADEUDO_PAGOS.VID_NOMBRE], 
            T.VID_FECHA AS [ALTA_ADEUDO_PAGOS.VID_FECHA], 
            T.VID_HOMOCLAVE AS [ALTA_ADEUDO_PAGOS.VID_HOMOCLAVE], 
            T.NID_DECLARACION AS [ALTA_ADEUDO_PAGOS.NID_DECLARACION], 
            T.NID_ADEUDO AS [ALTA_ADEUDO_PAGOS.NID_ADEUDO], 
            T.M_PAGOS AS [ALTA_ADEUDO_PAGOS.M_PAGOS], 
            True AS _from0
        FROM cnxDeclara.ALTA_ADEUDO_PAGOS AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ModelDeclaraStoreContainer.ALTA_ADEUDO_TITULAR.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView3()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing ALTA_ADEUDO_TITULAR
        [ModelDeclara.Store.ALTA_ADEUDO_TITULAR](T1.[ALTA_ADEUDO_TITULAR.VID_NOMBRE], T1.[ALTA_ADEUDO_TITULAR.VID_FECHA], T1.[ALTA_ADEUDO_TITULAR.VID_HOMOCLAVE], T1.[ALTA_ADEUDO_TITULAR.NID_DECLARACION], T1.[ALTA_ADEUDO_TITULAR.NID_ADEUDO], T1.[ALTA_ADEUDO_TITULAR.NID_DEPENDIENTE], T1.[ALTA_ADEUDO_TITULAR.L_DIF])
    FROM (
        SELECT 
            T.VID_NOMBRE AS [ALTA_ADEUDO_TITULAR.VID_NOMBRE], 
            T.VID_FECHA AS [ALTA_ADEUDO_TITULAR.VID_FECHA], 
            T.VID_HOMOCLAVE AS [ALTA_ADEUDO_TITULAR.VID_HOMOCLAVE], 
            T.NID_DECLARACION AS [ALTA_ADEUDO_TITULAR.NID_DECLARACION], 
            T.NID_ADEUDO AS [ALTA_ADEUDO_TITULAR.NID_ADEUDO], 
            T.NID_DEPENDIENTE AS [ALTA_ADEUDO_TITULAR.NID_DEPENDIENTE], 
            T.L_DIF AS [ALTA_ADEUDO_TITULAR.L_DIF], 
            True AS _from0
        FROM cnxDeclara.ALTA_ADEUDO_TITULAR AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ModelDeclaraStoreContainer.ALTA_COMODATO.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView4()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing ALTA_COMODATO
        [ModelDeclara.Store.ALTA_COMODATO](T1.[ALTA_COMODATO.VID_NOMBRE], T1.[ALTA_COMODATO.VID_FECHA], T1.[ALTA_COMODATO.VID_HOMOCLAVE], T1.[ALTA_COMODATO.NID_DECLARACION], T1.[ALTA_COMODATO.NID_COMODATO], T1.[ALTA_COMODATO.CID_TIPO_PERSONA], T1.[ALTA_COMODATO.E_TITULAR], T1.[ALTA_COMODATO.E_RFC], T1.[ALTA_COMODATO.NID_TIPO_RELACION], T1.[ALTA_COMODATO.E_OBSERVACIONES], T1.[ALTA_COMODATO.E_OBSERVACIONES_MARCADO], T1.[ALTA_COMODATO.V_OBSERVACIONES_TESTADO], T1.[ALTA_COMODATO.NID_ESTADO_TESTADO])
    FROM (
        SELECT 
            T.VID_NOMBRE AS [ALTA_COMODATO.VID_NOMBRE], 
            T.VID_FECHA AS [ALTA_COMODATO.VID_FECHA], 
            T.VID_HOMOCLAVE AS [ALTA_COMODATO.VID_HOMOCLAVE], 
            T.NID_DECLARACION AS [ALTA_COMODATO.NID_DECLARACION], 
            T.NID_COMODATO AS [ALTA_COMODATO.NID_COMODATO], 
            T.CID_TIPO_PERSONA AS [ALTA_COMODATO.CID_TIPO_PERSONA], 
            T.E_TITULAR AS [ALTA_COMODATO.E_TITULAR], 
            T.E_RFC AS [ALTA_COMODATO.E_RFC], 
            T.NID_TIPO_RELACION AS [ALTA_COMODATO.NID_TIPO_RELACION], 
            T.E_OBSERVACIONES AS [ALTA_COMODATO.E_OBSERVACIONES], 
            T.E_OBSERVACIONES_MARCADO AS [ALTA_COMODATO.E_OBSERVACIONES_MARCADO], 
            T.V_OBSERVACIONES_TESTADO AS [ALTA_COMODATO.V_OBSERVACIONES_TESTADO], 
            T.NID_ESTADO_TESTADO AS [ALTA_COMODATO.NID_ESTADO_TESTADO], 
            True AS _from0
        FROM cnxDeclara.ALTA_COMODATO AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ModelDeclaraStoreContainer.ALTA_COMODATO_INMUEBLE.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView5()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing ALTA_COMODATO_INMUEBLE
        [ModelDeclara.Store.ALTA_COMODATO_INMUEBLE](T1.[ALTA_COMODATO_INMUEBLE.VID_NOMBRE], T1.[ALTA_COMODATO_INMUEBLE.VID_FECHA], T1.[ALTA_COMODATO_INMUEBLE.VID_HOMOCLAVE], T1.[ALTA_COMODATO_INMUEBLE.NID_DECLARACION], T1.[ALTA_COMODATO_INMUEBLE.NID_COMODATO], T1.[ALTA_COMODATO_INMUEBLE.NID_TIPO], T1.[ALTA_COMODATO_INMUEBLE.C_CODIGO_POSTAL], T1.[ALTA_COMODATO_INMUEBLE.NID_PAIS], T1.[ALTA_COMODATO_INMUEBLE.CID_ENTIDAD_FEDERATIVA], T1.[ALTA_COMODATO_INMUEBLE.CID_MUNICIPIO], T1.[ALTA_COMODATO_INMUEBLE.V_COLONIA], T1.[ALTA_COMODATO_INMUEBLE.V_DOMICILIO])
    FROM (
        SELECT 
            T.VID_NOMBRE AS [ALTA_COMODATO_INMUEBLE.VID_NOMBRE], 
            T.VID_FECHA AS [ALTA_COMODATO_INMUEBLE.VID_FECHA], 
            T.VID_HOMOCLAVE AS [ALTA_COMODATO_INMUEBLE.VID_HOMOCLAVE], 
            T.NID_DECLARACION AS [ALTA_COMODATO_INMUEBLE.NID_DECLARACION], 
            T.NID_COMODATO AS [ALTA_COMODATO_INMUEBLE.NID_COMODATO], 
            T.NID_TIPO AS [ALTA_COMODATO_INMUEBLE.NID_TIPO], 
            T.C_CODIGO_POSTAL AS [ALTA_COMODATO_INMUEBLE.C_CODIGO_POSTAL], 
            T.NID_PAIS AS [ALTA_COMODATO_INMUEBLE.NID_PAIS], 
            T.CID_ENTIDAD_FEDERATIVA AS [ALTA_COMODATO_INMUEBLE.CID_ENTIDAD_FEDERATIVA], 
            T.CID_MUNICIPIO AS [ALTA_COMODATO_INMUEBLE.CID_MUNICIPIO], 
            T.V_COLONIA AS [ALTA_COMODATO_INMUEBLE.V_COLONIA], 
            T.V_DOMICILIO AS [ALTA_COMODATO_INMUEBLE.V_DOMICILIO], 
            True AS _from0
        FROM cnxDeclara.ALTA_COMODATO_INMUEBLE AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ModelDeclaraStoreContainer.ALTA_COMODATO_VEHICULO.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView6()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing ALTA_COMODATO_VEHICULO
        [ModelDeclara.Store.ALTA_COMODATO_VEHICULO](T1.[ALTA_COMODATO_VEHICULO.VID_NOMBRE], T1.[ALTA_COMODATO_VEHICULO.VID_FECHA], T1.[ALTA_COMODATO_VEHICULO.VID_HOMOCLAVE], T1.[ALTA_COMODATO_VEHICULO.NID_DECLARACION], T1.[ALTA_COMODATO_VEHICULO.NID_COMODATO], T1.[ALTA_COMODATO_VEHICULO.NID_TIPO_VEHICULO], T1.[ALTA_COMODATO_VEHICULO.NID_MARCA], T1.[ALTA_COMODATO_VEHICULO.C_MODELO], T1.[ALTA_COMODATO_VEHICULO.V_DESCRIPCION], T1.[ALTA_COMODATO_VEHICULO.E_NUMERO_SERIE], T1.[ALTA_COMODATO_VEHICULO.NID_PAIS], T1.[ALTA_COMODATO_VEHICULO.CID_ENTIDAD_FEDERATIVA])
    FROM (
        SELECT 
            T.VID_NOMBRE AS [ALTA_COMODATO_VEHICULO.VID_NOMBRE], 
            T.VID_FECHA AS [ALTA_COMODATO_VEHICULO.VID_FECHA], 
            T.VID_HOMOCLAVE AS [ALTA_COMODATO_VEHICULO.VID_HOMOCLAVE], 
            T.NID_DECLARACION AS [ALTA_COMODATO_VEHICULO.NID_DECLARACION], 
            T.NID_COMODATO AS [ALTA_COMODATO_VEHICULO.NID_COMODATO], 
            T.NID_TIPO_VEHICULO AS [ALTA_COMODATO_VEHICULO.NID_TIPO_VEHICULO], 
            T.NID_MARCA AS [ALTA_COMODATO_VEHICULO.NID_MARCA], 
            T.C_MODELO AS [ALTA_COMODATO_VEHICULO.C_MODELO], 
            T.V_DESCRIPCION AS [ALTA_COMODATO_VEHICULO.V_DESCRIPCION], 
            T.E_NUMERO_SERIE AS [ALTA_COMODATO_VEHICULO.E_NUMERO_SERIE], 
            T.NID_PAIS AS [ALTA_COMODATO_VEHICULO.NID_PAIS], 
            T.CID_ENTIDAD_FEDERATIVA AS [ALTA_COMODATO_VEHICULO.CID_ENTIDAD_FEDERATIVA], 
            True AS _from0
        FROM cnxDeclara.ALTA_COMODATO_VEHICULO AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ModelDeclaraStoreContainer.ALTA_INMUEBLE.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView7()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing ALTA_INMUEBLE
        [ModelDeclara.Store.ALTA_INMUEBLE](T1.[ALTA_INMUEBLE.VID_NOMBRE], T1.[ALTA_INMUEBLE.VID_FECHA], T1.[ALTA_INMUEBLE.VID_HOMOCLAVE], T1.[ALTA_INMUEBLE.NID_DECLARACION], T1.[ALTA_INMUEBLE.NID_INMUEBLE], T1.[ALTA_INMUEBLE.NID_TIPO], T1.[ALTA_INMUEBLE.F_ADQUISICION], T1.[ALTA_INMUEBLE.NID_USO], T1.[ALTA_INMUEBLE.E_UBICACION], T1.[ALTA_INMUEBLE.N_TERRENO], T1.[ALTA_INMUEBLE.N_CONSTRUCCION], T1.[ALTA_INMUEBLE.M_VALOR_INMUEBLE], T1.[ALTA_INMUEBLE.NID_PATRIMONIO], T1.[ALTA_INMUEBLE.N_PORCENTAJE_DECLARANTE], T1.[ALTA_INMUEBLE.E_REGISTRO_PUBLICO_PROPIEDAD], T1.[ALTA_INMUEBLE.CID_TIPO_PERSONA_TRANSMISOR], T1.[ALTA_INMUEBLE.E_NOMBRE_TRANSMISOR], T1.[ALTA_INMUEBLE.E_RFC_TRANSMISOR], T1.[ALTA_INMUEBLE.NID_RELACION_TRANSMISOR], T1.[ALTA_INMUEBLE.V_TIPO_MONEDA], T1.[ALTA_INMUEBLE.NID_VALOR_ADQUISICION], T1.[ALTA_INMUEBLE.NID_FORMA_ADQUISICION], T1.[ALTA_INMUEBLE.NID_FORMA_PAGO], T1.[ALTA_INMUEBLE.E_OBSERVACIONES], T1.[ALTA_INMUEBLE.E_OBSERVACIONES_MARCADO], T1.[ALTA_INMUEBLE.V_OBSERVACIONES_TESTADO], T1.[ALTA_INMUEBLE.NID_ESTADO_TESTADO])
    FROM (
        SELECT 
            T.VID_NOMBRE AS [ALTA_INMUEBLE.VID_NOMBRE], 
            T.VID_FECHA AS [ALTA_INMUEBLE.VID_FECHA], 
            T.VID_HOMOCLAVE AS [ALTA_INMUEBLE.VID_HOMOCLAVE], 
            T.NID_DECLARACION AS [ALTA_INMUEBLE.NID_DECLARACION], 
            T.NID_INMUEBLE AS [ALTA_INMUEBLE.NID_INMUEBLE], 
            T.NID_TIPO AS [ALTA_INMUEBLE.NID_TIPO], 
            T.F_ADQUISICION AS [ALTA_INMUEBLE.F_ADQUISICION], 
            T.NID_USO AS [ALTA_INMUEBLE.NID_USO], 
            T.E_UBICACION AS [ALTA_INMUEBLE.E_UBICACION], 
            T.N_TERRENO AS [ALTA_INMUEBLE.N_TERRENO], 
            T.N_CONSTRUCCION AS [ALTA_INMUEBLE.N_CONSTRUCCION], 
            T.M_VALOR_INMUEBLE AS [ALTA_INMUEBLE.M_VALOR_INMUEBLE], 
            T.NID_PATRIMONIO AS [ALTA_INMUEBLE.NID_PATRIMONIO], 
            T.N_PORCENTAJE_DECLARANTE AS [ALTA_INMUEBLE.N_PORCENTAJE_DECLARANTE], 
            T.E_REGISTRO_PUBLICO_PROPIEDAD AS [ALTA_INMUEBLE.E_REGISTRO_PUBLICO_PROPIEDAD], 
            T.CID_TIPO_PERSONA_TRANSMISOR AS [ALTA_INMUEBLE.CID_TIPO_PERSONA_TRANSMISOR], 
            T.E_NOMBRE_TRANSMISOR AS [ALTA_INMUEBLE.E_NOMBRE_TRANSMISOR], 
            T.E_RFC_TRANSMISOR AS [ALTA_INMUEBLE.E_RFC_TRANSMISOR], 
            T.NID_RELACION_TRANSMISOR AS [ALTA_INMUEBLE.NID_RELACION_TRANSMISOR], 
            T.V_TIPO_MONEDA AS [ALTA_INMUEBLE.V_TIPO_MONEDA], 
            T.NID_VALOR_ADQUISICION AS [ALTA_INMUEBLE.NID_VALOR_ADQUISICION], 
            T.NID_FORMA_ADQUISICION AS [ALTA_INMUEBLE.NID_FORMA_ADQUISICION], 
            T.NID_FORMA_PAGO AS [ALTA_INMUEBLE.NID_FORMA_PAGO], 
            T.E_OBSERVACIONES AS [ALTA_INMUEBLE.E_OBSERVACIONES], 
            T.E_OBSERVACIONES_MARCADO AS [ALTA_INMUEBLE.E_OBSERVACIONES_MARCADO], 
            T.V_OBSERVACIONES_TESTADO AS [ALTA_INMUEBLE.V_OBSERVACIONES_TESTADO], 
            T.NID_ESTADO_TESTADO AS [ALTA_INMUEBLE.NID_ESTADO_TESTADO], 
            True AS _from0
        FROM cnxDeclara.ALTA_INMUEBLE AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ModelDeclaraStoreContainer.ALTA_INMUEBLE_ADEUDO.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView8()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing ALTA_INMUEBLE_ADEUDO
        [ModelDeclara.Store.ALTA_INMUEBLE_ADEUDO](T1.[ALTA_INMUEBLE_ADEUDO.VID_NOMBRE], T1.[ALTA_INMUEBLE_ADEUDO.VID_FECHA], T1.[ALTA_INMUEBLE_ADEUDO.VID_HOMOCLAVE], T1.[ALTA_INMUEBLE_ADEUDO.NID_DECLARACION], T1.[ALTA_INMUEBLE_ADEUDO.NID_INMUEBLE], T1.[ALTA_INMUEBLE_ADEUDO.NID_ADEUDO], T1.[ALTA_INMUEBLE_ADEUDO.L_DIF])
    FROM (
        SELECT 
            T.VID_NOMBRE AS [ALTA_INMUEBLE_ADEUDO.VID_NOMBRE], 
            T.VID_FECHA AS [ALTA_INMUEBLE_ADEUDO.VID_FECHA], 
            T.VID_HOMOCLAVE AS [ALTA_INMUEBLE_ADEUDO.VID_HOMOCLAVE], 
            T.NID_DECLARACION AS [ALTA_INMUEBLE_ADEUDO.NID_DECLARACION], 
            T.NID_INMUEBLE AS [ALTA_INMUEBLE_ADEUDO.NID_INMUEBLE], 
            T.NID_ADEUDO AS [ALTA_INMUEBLE_ADEUDO.NID_ADEUDO], 
            T.L_DIF AS [ALTA_INMUEBLE_ADEUDO.L_DIF], 
            True AS _from0
        FROM cnxDeclara.ALTA_INMUEBLE_ADEUDO AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ModelDeclaraStoreContainer.ALTA_INMUEBLE_COPROPIETARIO.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView9()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing ALTA_INMUEBLE_COPROPIETARIO
        [ModelDeclara.Store.ALTA_INMUEBLE_COPROPIETARIO](T1.[ALTA_INMUEBLE_COPROPIETARIO.VID_NOMBRE], T1.[ALTA_INMUEBLE_COPROPIETARIO.VID_FECHA], T1.[ALTA_INMUEBLE_COPROPIETARIO.VID_HOMOCLAVE], T1.[ALTA_INMUEBLE_COPROPIETARIO.NID_DECLARACION], T1.[ALTA_INMUEBLE_COPROPIETARIO.NID_INMUEBLE], T1.[ALTA_INMUEBLE_COPROPIETARIO.NID_COPROPIETARIO], T1.[ALTA_INMUEBLE_COPROPIETARIO.CID_TIPO_PERSONA], T1.[ALTA_INMUEBLE_COPROPIETARIO.V_NOMBRE], T1.[ALTA_INMUEBLE_COPROPIETARIO.V_RFC])
    FROM (
        SELECT 
            T.VID_NOMBRE AS [ALTA_INMUEBLE_COPROPIETARIO.VID_NOMBRE], 
            T.VID_FECHA AS [ALTA_INMUEBLE_COPROPIETARIO.VID_FECHA], 
            T.VID_HOMOCLAVE AS [ALTA_INMUEBLE_COPROPIETARIO.VID_HOMOCLAVE], 
            T.NID_DECLARACION AS [ALTA_INMUEBLE_COPROPIETARIO.NID_DECLARACION], 
            T.NID_INMUEBLE AS [ALTA_INMUEBLE_COPROPIETARIO.NID_INMUEBLE], 
            T.NID_COPROPIETARIO AS [ALTA_INMUEBLE_COPROPIETARIO.NID_COPROPIETARIO], 
            T.CID_TIPO_PERSONA AS [ALTA_INMUEBLE_COPROPIETARIO.CID_TIPO_PERSONA], 
            T.V_NOMBRE AS [ALTA_INMUEBLE_COPROPIETARIO.V_NOMBRE], 
            T.V_RFC AS [ALTA_INMUEBLE_COPROPIETARIO.V_RFC], 
            True AS _from0
        FROM cnxDeclara.ALTA_INMUEBLE_COPROPIETARIO AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ModelDeclaraStoreContainer.ALTA_INMUEBLE_FORMA_ADQUISICION.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView10()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing ALTA_INMUEBLE_FORMA_ADQUISICION
        [ModelDeclara.Store.ALTA_INMUEBLE_FORMA_ADQUISICION](T1.[ALTA_INMUEBLE_FORMA_ADQUISICION.VID_NOMBRE], T1.[ALTA_INMUEBLE_FORMA_ADQUISICION.VID_FECHA], T1.[ALTA_INMUEBLE_FORMA_ADQUISICION.VID_HOMOCLAVE], T1.[ALTA_INMUEBLE_FORMA_ADQUISICION.NID_DECLARACION], T1.[ALTA_INMUEBLE_FORMA_ADQUISICION.NID_INMUEBLE], T1.[ALTA_INMUEBLE_FORMA_ADQUISICION.NID_FORMA_ADQUISICION], T1.[ALTA_INMUEBLE_FORMA_ADQUISICION.M_DONACION])
    FROM (
        SELECT 
            T.VID_NOMBRE AS [ALTA_INMUEBLE_FORMA_ADQUISICION.VID_NOMBRE], 
            T.VID_FECHA AS [ALTA_INMUEBLE_FORMA_ADQUISICION.VID_FECHA], 
            T.VID_HOMOCLAVE AS [ALTA_INMUEBLE_FORMA_ADQUISICION.VID_HOMOCLAVE], 
            T.NID_DECLARACION AS [ALTA_INMUEBLE_FORMA_ADQUISICION.NID_DECLARACION], 
            T.NID_INMUEBLE AS [ALTA_INMUEBLE_FORMA_ADQUISICION.NID_INMUEBLE], 
            T.NID_FORMA_ADQUISICION AS [ALTA_INMUEBLE_FORMA_ADQUISICION.NID_FORMA_ADQUISICION], 
            T.M_DONACION AS [ALTA_INMUEBLE_FORMA_ADQUISICION.M_DONACION], 
            True AS _from0
        FROM cnxDeclara.ALTA_INMUEBLE_FORMA_ADQUISICION AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ModelDeclaraStoreContainer.ALTA_INMUEBLE_PAGO_INICIAL.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView11()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing ALTA_INMUEBLE_PAGO_INICIAL
        [ModelDeclara.Store.ALTA_INMUEBLE_PAGO_INICIAL](T1.[ALTA_INMUEBLE_PAGO_INICIAL.VID_NOMBRE], T1.[ALTA_INMUEBLE_PAGO_INICIAL.VID_FECHA], T1.[ALTA_INMUEBLE_PAGO_INICIAL.VID_HOMOCLAVE], T1.[ALTA_INMUEBLE_PAGO_INICIAL.NID_DECLARACION], T1.[ALTA_INMUEBLE_PAGO_INICIAL.NID_INMUEBLE], T1.[ALTA_INMUEBLE_PAGO_INICIAL.M_PAGO])
    FROM (
        SELECT 
            T.VID_NOMBRE AS [ALTA_INMUEBLE_PAGO_INICIAL.VID_NOMBRE], 
            T.VID_FECHA AS [ALTA_INMUEBLE_PAGO_INICIAL.VID_FECHA], 
            T.VID_HOMOCLAVE AS [ALTA_INMUEBLE_PAGO_INICIAL.VID_HOMOCLAVE], 
            T.NID_DECLARACION AS [ALTA_INMUEBLE_PAGO_INICIAL.NID_DECLARACION], 
            T.NID_INMUEBLE AS [ALTA_INMUEBLE_PAGO_INICIAL.NID_INMUEBLE], 
            T.M_PAGO AS [ALTA_INMUEBLE_PAGO_INICIAL.M_PAGO], 
            True AS _from0
        FROM cnxDeclara.ALTA_INMUEBLE_PAGO_INICIAL AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ModelDeclaraStoreContainer.ALTA_INMUEBLE_TITULAR.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView12()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing ALTA_INMUEBLE_TITULAR
        [ModelDeclara.Store.ALTA_INMUEBLE_TITULAR](T1.[ALTA_INMUEBLE_TITULAR.VID_NOMBRE], T1.[ALTA_INMUEBLE_TITULAR.VID_FECHA], T1.[ALTA_INMUEBLE_TITULAR.VID_HOMOCLAVE], T1.[ALTA_INMUEBLE_TITULAR.NID_DECLARACION], T1.[ALTA_INMUEBLE_TITULAR.NID_INMUEBLE], T1.[ALTA_INMUEBLE_TITULAR.NID_DEPENDIENTE], T1.[ALTA_INMUEBLE_TITULAR.L_DIF])
    FROM (
        SELECT 
            T.VID_NOMBRE AS [ALTA_INMUEBLE_TITULAR.VID_NOMBRE], 
            T.VID_FECHA AS [ALTA_INMUEBLE_TITULAR.VID_FECHA], 
            T.VID_HOMOCLAVE AS [ALTA_INMUEBLE_TITULAR.VID_HOMOCLAVE], 
            T.NID_DECLARACION AS [ALTA_INMUEBLE_TITULAR.NID_DECLARACION], 
            T.NID_INMUEBLE AS [ALTA_INMUEBLE_TITULAR.NID_INMUEBLE], 
            T.NID_DEPENDIENTE AS [ALTA_INMUEBLE_TITULAR.NID_DEPENDIENTE], 
            T.L_DIF AS [ALTA_INMUEBLE_TITULAR.L_DIF], 
            True AS _from0
        FROM cnxDeclara.ALTA_INMUEBLE_TITULAR AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ModelDeclaraStoreContainer.ALTA_INVERSION.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView13()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing ALTA_INVERSION
        [ModelDeclara.Store.ALTA_INVERSION](T1.[ALTA_INVERSION.VID_NOMBRE], T1.[ALTA_INVERSION.VID_FECHA], T1.[ALTA_INVERSION.VID_HOMOCLAVE], T1.[ALTA_INVERSION.NID_DECLARACION], T1.[ALTA_INVERSION.NID_INVERSION], T1.[ALTA_INVERSION.NID_TIPO_INVERSION], T1.[ALTA_INVERSION.NID_SUBTIPO_INVERSION], T1.[ALTA_INVERSION.NID_INSTITUCION], T1.[ALTA_INVERSION.E_CUENTA], T1.[ALTA_INVERSION.V_CUENTA_CORTO], T1.[ALTA_INVERSION.V_OTRO], T1.[ALTA_INVERSION.M_SALDO], T1.[ALTA_INVERSION.NID_PAIS], T1.[ALTA_INVERSION.CID_ENTIDAD_FEDERATIVA], T1.[ALTA_INVERSION.V_LUGAR], T1.[ALTA_INVERSION.F_APERTURA], T1.[ALTA_INVERSION.NID_PATRIMONIO], T1.[ALTA_INVERSION.V_RFC_INVERSION], T1.[ALTA_INVERSION.V_TIPO_MONEDA], T1.[ALTA_INVERSION.E_OBSERVACIONES], T1.[ALTA_INVERSION.E_OBSERVACIONES_MARCADO], T1.[ALTA_INVERSION.V_OBSERVACIONES_TESTADO], T1.[ALTA_INVERSION.NID_ESTADO_TESTADO])
    FROM (
        SELECT 
            T.VID_NOMBRE AS [ALTA_INVERSION.VID_NOMBRE], 
            T.VID_FECHA AS [ALTA_INVERSION.VID_FECHA], 
            T.VID_HOMOCLAVE AS [ALTA_INVERSION.VID_HOMOCLAVE], 
            T.NID_DECLARACION AS [ALTA_INVERSION.NID_DECLARACION], 
            T.NID_INVERSION AS [ALTA_INVERSION.NID_INVERSION], 
            T.NID_TIPO_INVERSION AS [ALTA_INVERSION.NID_TIPO_INVERSION], 
            T.NID_SUBTIPO_INVERSION AS [ALTA_INVERSION.NID_SUBTIPO_INVERSION], 
            T.NID_INSTITUCION AS [ALTA_INVERSION.NID_INSTITUCION], 
            T.E_CUENTA AS [ALTA_INVERSION.E_CUENTA], 
            T.V_CUENTA_CORTO AS [ALTA_INVERSION.V_CUENTA_CORTO], 
            T.V_OTRO AS [ALTA_INVERSION.V_OTRO], 
            T.M_SALDO AS [ALTA_INVERSION.M_SALDO], 
            T.NID_PAIS AS [ALTA_INVERSION.NID_PAIS], 
            T.CID_ENTIDAD_FEDERATIVA AS [ALTA_INVERSION.CID_ENTIDAD_FEDERATIVA], 
            T.V_LUGAR AS [ALTA_INVERSION.V_LUGAR], 
            T.F_APERTURA AS [ALTA_INVERSION.F_APERTURA], 
            T.NID_PATRIMONIO AS [ALTA_INVERSION.NID_PATRIMONIO], 
            T.V_RFC_INVERSION AS [ALTA_INVERSION.V_RFC_INVERSION], 
            T.V_TIPO_MONEDA AS [ALTA_INVERSION.V_TIPO_MONEDA], 
            T.E_OBSERVACIONES AS [ALTA_INVERSION.E_OBSERVACIONES], 
            T.E_OBSERVACIONES_MARCADO AS [ALTA_INVERSION.E_OBSERVACIONES_MARCADO], 
            T.V_OBSERVACIONES_TESTADO AS [ALTA_INVERSION.V_OBSERVACIONES_TESTADO], 
            T.NID_ESTADO_TESTADO AS [ALTA_INVERSION.NID_ESTADO_TESTADO], 
            True AS _from0
        FROM cnxDeclara.ALTA_INVERSION AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ModelDeclaraStoreContainer.ALTA_INVERSION_COPROPIETARIO.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView14()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing ALTA_INVERSION_COPROPIETARIO
        [ModelDeclara.Store.ALTA_INVERSION_COPROPIETARIO](T1.[ALTA_INVERSION_COPROPIETARIO.VID_NOMBRE], T1.[ALTA_INVERSION_COPROPIETARIO.VID_FECHA], T1.[ALTA_INVERSION_COPROPIETARIO.VID_HOMOCLAVE], T1.[ALTA_INVERSION_COPROPIETARIO.NID_DECLARACION], T1.[ALTA_INVERSION_COPROPIETARIO.NID_INVERSION], T1.[ALTA_INVERSION_COPROPIETARIO.NID_COPROPIETARIO], T1.[ALTA_INVERSION_COPROPIETARIO.CID_TIPO_PERSONA], T1.[ALTA_INVERSION_COPROPIETARIO.V_NOMBRE], T1.[ALTA_INVERSION_COPROPIETARIO.V_RFC])
    FROM (
        SELECT 
            T.VID_NOMBRE AS [ALTA_INVERSION_COPROPIETARIO.VID_NOMBRE], 
            T.VID_FECHA AS [ALTA_INVERSION_COPROPIETARIO.VID_FECHA], 
            T.VID_HOMOCLAVE AS [ALTA_INVERSION_COPROPIETARIO.VID_HOMOCLAVE], 
            T.NID_DECLARACION AS [ALTA_INVERSION_COPROPIETARIO.NID_DECLARACION], 
            T.NID_INVERSION AS [ALTA_INVERSION_COPROPIETARIO.NID_INVERSION], 
            T.NID_COPROPIETARIO AS [ALTA_INVERSION_COPROPIETARIO.NID_COPROPIETARIO], 
            T.CID_TIPO_PERSONA AS [ALTA_INVERSION_COPROPIETARIO.CID_TIPO_PERSONA], 
            T.V_NOMBRE AS [ALTA_INVERSION_COPROPIETARIO.V_NOMBRE], 
            T.V_RFC AS [ALTA_INVERSION_COPROPIETARIO.V_RFC], 
            True AS _from0
        FROM cnxDeclara.ALTA_INVERSION_COPROPIETARIO AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ModelDeclaraStoreContainer.ALTA_INVERSION_TITULAR.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView15()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing ALTA_INVERSION_TITULAR
        [ModelDeclara.Store.ALTA_INVERSION_TITULAR](T1.[ALTA_INVERSION_TITULAR.VID_NOMBRE], T1.[ALTA_INVERSION_TITULAR.VID_FECHA], T1.[ALTA_INVERSION_TITULAR.VID_HOMOCLAVE], T1.[ALTA_INVERSION_TITULAR.NID_DECLARACION], T1.[ALTA_INVERSION_TITULAR.NID_INVERSION], T1.[ALTA_INVERSION_TITULAR.NID_DEPENDIENTE], T1.[ALTA_INVERSION_TITULAR.L_DIF])
    FROM (
        SELECT 
            T.VID_NOMBRE AS [ALTA_INVERSION_TITULAR.VID_NOMBRE], 
            T.VID_FECHA AS [ALTA_INVERSION_TITULAR.VID_FECHA], 
            T.VID_HOMOCLAVE AS [ALTA_INVERSION_TITULAR.VID_HOMOCLAVE], 
            T.NID_DECLARACION AS [ALTA_INVERSION_TITULAR.NID_DECLARACION], 
            T.NID_INVERSION AS [ALTA_INVERSION_TITULAR.NID_INVERSION], 
            T.NID_DEPENDIENTE AS [ALTA_INVERSION_TITULAR.NID_DEPENDIENTE], 
            T.L_DIF AS [ALTA_INVERSION_TITULAR.L_DIF], 
            True AS _from0
        FROM cnxDeclara.ALTA_INVERSION_TITULAR AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ModelDeclaraStoreContainer.ALTA_MUEBLE.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView16()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing ALTA_MUEBLE
        [ModelDeclara.Store.ALTA_MUEBLE](T1.[ALTA_MUEBLE.VID_NOMBRE], T1.[ALTA_MUEBLE.VID_FECHA], T1.[ALTA_MUEBLE.VID_HOMOCLAVE], T1.[ALTA_MUEBLE.NID_DECLARACION], T1.[ALTA_MUEBLE.NID_MUEBLE], T1.[ALTA_MUEBLE.NID_TIPO], T1.[ALTA_MUEBLE.E_ESPECIFICACION], T1.[ALTA_MUEBLE.M_VALOR], T1.[ALTA_MUEBLE.NID_PATRIMONIO], T1.[ALTA_MUEBLE.L_CREDITO], T1.[ALTA_MUEBLE.F_ADQUISICION], T1.[ALTA_MUEBLE.CID_TIPO_PERSONA_TRANSMISOR], T1.[ALTA_MUEBLE.E_NOMBRE_TRANSMISOR], T1.[ALTA_MUEBLE.E_RFC_TRANSMISOR], T1.[ALTA_MUEBLE.NID_RELACION_TRANSMISOR], T1.[ALTA_MUEBLE.V_TIPO_MONEDA], T1.[ALTA_MUEBLE.NID_FORMA_ADQUISICION], T1.[ALTA_MUEBLE.NID_FORMA_PAGO], T1.[ALTA_MUEBLE.E_OBSERVACIONES], T1.[ALTA_MUEBLE.E_OBSERVACIONES_MARCADO], T1.[ALTA_MUEBLE.V_OBSERVACIONES_TESTADO], T1.[ALTA_MUEBLE.NID_ESTADO_TESTADO])
    FROM (
        SELECT 
            T.VID_NOMBRE AS [ALTA_MUEBLE.VID_NOMBRE], 
            T.VID_FECHA AS [ALTA_MUEBLE.VID_FECHA], 
            T.VID_HOMOCLAVE AS [ALTA_MUEBLE.VID_HOMOCLAVE], 
            T.NID_DECLARACION AS [ALTA_MUEBLE.NID_DECLARACION], 
            T.NID_MUEBLE AS [ALTA_MUEBLE.NID_MUEBLE], 
            T.NID_TIPO AS [ALTA_MUEBLE.NID_TIPO], 
            T.E_ESPECIFICACION AS [ALTA_MUEBLE.E_ESPECIFICACION], 
            T.M_VALOR AS [ALTA_MUEBLE.M_VALOR], 
            T.NID_PATRIMONIO AS [ALTA_MUEBLE.NID_PATRIMONIO], 
            T.L_CREDITO AS [ALTA_MUEBLE.L_CREDITO], 
            T.F_ADQUISICION AS [ALTA_MUEBLE.F_ADQUISICION], 
            T.CID_TIPO_PERSONA_TRANSMISOR AS [ALTA_MUEBLE.CID_TIPO_PERSONA_TRANSMISOR], 
            T.E_NOMBRE_TRANSMISOR AS [ALTA_MUEBLE.E_NOMBRE_TRANSMISOR], 
            T.E_RFC_TRANSMISOR AS [ALTA_MUEBLE.E_RFC_TRANSMISOR], 
            T.NID_RELACION_TRANSMISOR AS [ALTA_MUEBLE.NID_RELACION_TRANSMISOR], 
            T.V_TIPO_MONEDA AS [ALTA_MUEBLE.V_TIPO_MONEDA], 
            T.NID_FORMA_ADQUISICION AS [ALTA_MUEBLE.NID_FORMA_ADQUISICION], 
            T.NID_FORMA_PAGO AS [ALTA_MUEBLE.NID_FORMA_PAGO], 
            T.E_OBSERVACIONES AS [ALTA_MUEBLE.E_OBSERVACIONES], 
            T.E_OBSERVACIONES_MARCADO AS [ALTA_MUEBLE.E_OBSERVACIONES_MARCADO], 
            T.V_OBSERVACIONES_TESTADO AS [ALTA_MUEBLE.V_OBSERVACIONES_TESTADO], 
            T.NID_ESTADO_TESTADO AS [ALTA_MUEBLE.NID_ESTADO_TESTADO], 
            True AS _from0
        FROM cnxDeclara.ALTA_MUEBLE AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ModelDeclaraStoreContainer.ALTA_MUEBLE_COPROPIETARIO.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView17()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing ALTA_MUEBLE_COPROPIETARIO
        [ModelDeclara.Store.ALTA_MUEBLE_COPROPIETARIO](T1.[ALTA_MUEBLE_COPROPIETARIO.VID_NOMBRE], T1.[ALTA_MUEBLE_COPROPIETARIO.VID_FECHA], T1.[ALTA_MUEBLE_COPROPIETARIO.VID_HOMOCLAVE], T1.[ALTA_MUEBLE_COPROPIETARIO.NID_DECLARACION], T1.[ALTA_MUEBLE_COPROPIETARIO.NID_MUEBLE], T1.[ALTA_MUEBLE_COPROPIETARIO.NID_COPROPIETARIO], T1.[ALTA_MUEBLE_COPROPIETARIO.CID_TIPO_PERSONA], T1.[ALTA_MUEBLE_COPROPIETARIO.V_NOMBRE], T1.[ALTA_MUEBLE_COPROPIETARIO.V_RFC])
    FROM (
        SELECT 
            T.VID_NOMBRE AS [ALTA_MUEBLE_COPROPIETARIO.VID_NOMBRE], 
            T.VID_FECHA AS [ALTA_MUEBLE_COPROPIETARIO.VID_FECHA], 
            T.VID_HOMOCLAVE AS [ALTA_MUEBLE_COPROPIETARIO.VID_HOMOCLAVE], 
            T.NID_DECLARACION AS [ALTA_MUEBLE_COPROPIETARIO.NID_DECLARACION], 
            T.NID_MUEBLE AS [ALTA_MUEBLE_COPROPIETARIO.NID_MUEBLE], 
            T.NID_COPROPIETARIO AS [ALTA_MUEBLE_COPROPIETARIO.NID_COPROPIETARIO], 
            T.CID_TIPO_PERSONA AS [ALTA_MUEBLE_COPROPIETARIO.CID_TIPO_PERSONA], 
            T.V_NOMBRE AS [ALTA_MUEBLE_COPROPIETARIO.V_NOMBRE], 
            T.V_RFC AS [ALTA_MUEBLE_COPROPIETARIO.V_RFC], 
            True AS _from0
        FROM cnxDeclara.ALTA_MUEBLE_COPROPIETARIO AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ModelDeclaraStoreContainer.ALTA_MUEBLE_FORMA_ADQUISICION.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView18()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing ALTA_MUEBLE_FORMA_ADQUISICION
        [ModelDeclara.Store.ALTA_MUEBLE_FORMA_ADQUISICION](T1.[ALTA_MUEBLE_FORMA_ADQUISICION.VID_NOMBRE], T1.[ALTA_MUEBLE_FORMA_ADQUISICION.VID_FECHA], T1.[ALTA_MUEBLE_FORMA_ADQUISICION.VID_HOMOCLAVE], T1.[ALTA_MUEBLE_FORMA_ADQUISICION.NID_DECLARACION], T1.[ALTA_MUEBLE_FORMA_ADQUISICION.NID_MUEBLE], T1.[ALTA_MUEBLE_FORMA_ADQUISICION.NID_FORMA_ADQUISICION], T1.[ALTA_MUEBLE_FORMA_ADQUISICION.M_DONACION])
    FROM (
        SELECT 
            T.VID_NOMBRE AS [ALTA_MUEBLE_FORMA_ADQUISICION.VID_NOMBRE], 
            T.VID_FECHA AS [ALTA_MUEBLE_FORMA_ADQUISICION.VID_FECHA], 
            T.VID_HOMOCLAVE AS [ALTA_MUEBLE_FORMA_ADQUISICION.VID_HOMOCLAVE], 
            T.NID_DECLARACION AS [ALTA_MUEBLE_FORMA_ADQUISICION.NID_DECLARACION], 
            T.NID_MUEBLE AS [ALTA_MUEBLE_FORMA_ADQUISICION.NID_MUEBLE], 
            T.NID_FORMA_ADQUISICION AS [ALTA_MUEBLE_FORMA_ADQUISICION.NID_FORMA_ADQUISICION], 
            T.M_DONACION AS [ALTA_MUEBLE_FORMA_ADQUISICION.M_DONACION], 
            True AS _from0
        FROM cnxDeclara.ALTA_MUEBLE_FORMA_ADQUISICION AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ModelDeclaraStoreContainer.ALTA_MUEBLE_TITULAR.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView19()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing ALTA_MUEBLE_TITULAR
        [ModelDeclara.Store.ALTA_MUEBLE_TITULAR](T1.[ALTA_MUEBLE_TITULAR.VID_NOMBRE], T1.[ALTA_MUEBLE_TITULAR.VID_FECHA], T1.[ALTA_MUEBLE_TITULAR.VID_HOMOCLAVE], T1.[ALTA_MUEBLE_TITULAR.NID_DECLARACION], T1.[ALTA_MUEBLE_TITULAR.NID_MUEBLE], T1.[ALTA_MUEBLE_TITULAR.NID_DEPENDIENTE], T1.[ALTA_MUEBLE_TITULAR.L_DIF])
    FROM (
        SELECT 
            T.VID_NOMBRE AS [ALTA_MUEBLE_TITULAR.VID_NOMBRE], 
            T.VID_FECHA AS [ALTA_MUEBLE_TITULAR.VID_FECHA], 
            T.VID_HOMOCLAVE AS [ALTA_MUEBLE_TITULAR.VID_HOMOCLAVE], 
            T.NID_DECLARACION AS [ALTA_MUEBLE_TITULAR.NID_DECLARACION], 
            T.NID_MUEBLE AS [ALTA_MUEBLE_TITULAR.NID_MUEBLE], 
            T.NID_DEPENDIENTE AS [ALTA_MUEBLE_TITULAR.NID_DEPENDIENTE], 
            T.L_DIF AS [ALTA_MUEBLE_TITULAR.L_DIF], 
            True AS _from0
        FROM cnxDeclara.ALTA_MUEBLE_TITULAR AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ModelDeclaraStoreContainer.ALTA_TARJETA.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView20()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing ALTA_TARJETA
        [ModelDeclara.Store.ALTA_TARJETA](T1.[ALTA_TARJETA.VID_NOMBRE], T1.[ALTA_TARJETA.VID_FECHA], T1.[ALTA_TARJETA.VID_HOMOCLAVE], T1.[ALTA_TARJETA.NID_DECLARACION], T1.[ALTA_TARJETA.E_NUMERO], T1.[ALTA_TARJETA.V_NUMERO_CORTO], T1.[ALTA_TARJETA.M_SALDO], T1.[ALTA_TARJETA.NID_TITULAR])
    FROM (
        SELECT 
            T.VID_NOMBRE AS [ALTA_TARJETA.VID_NOMBRE], 
            T.VID_FECHA AS [ALTA_TARJETA.VID_FECHA], 
            T.VID_HOMOCLAVE AS [ALTA_TARJETA.VID_HOMOCLAVE], 
            T.NID_DECLARACION AS [ALTA_TARJETA.NID_DECLARACION], 
            T.E_NUMERO AS [ALTA_TARJETA.E_NUMERO], 
            T.V_NUMERO_CORTO AS [ALTA_TARJETA.V_NUMERO_CORTO], 
            T.M_SALDO AS [ALTA_TARJETA.M_SALDO], 
            T.NID_TITULAR AS [ALTA_TARJETA.NID_TITULAR], 
            True AS _from0
        FROM cnxDeclara.ALTA_TARJETA AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ModelDeclaraStoreContainer.ALTA_VEHICULO.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView21()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing ALTA_VEHICULO
        [ModelDeclara.Store.ALTA_VEHICULO](T1.[ALTA_VEHICULO.VID_NOMBRE], T1.[ALTA_VEHICULO.VID_FECHA], T1.[ALTA_VEHICULO.VID_HOMOCLAVE], T1.[ALTA_VEHICULO.NID_DECLARACION], T1.[ALTA_VEHICULO.NID_VEHICULO], T1.[ALTA_VEHICULO.NID_MARCA], T1.[ALTA_VEHICULO.C_MODELO], T1.[ALTA_VEHICULO.V_DESCRIPCION], T1.[ALTA_VEHICULO.F_ADQUISICION], T1.[ALTA_VEHICULO.NID_TIPO_VEHICULO], T1.[ALTA_VEHICULO.NID_USO], T1.[ALTA_VEHICULO.M_VALOR_VEHICULO], T1.[ALTA_VEHICULO.V_TIPO_MONEDA], T1.[ALTA_VEHICULO.E_NUMERO_SERIE], T1.[ALTA_VEHICULO.NID_PAIS], T1.[ALTA_VEHICULO.CID_ENTIDAD_FEDERATIVA], T1.[ALTA_VEHICULO.NID_PATRIMONIO], T1.[ALTA_VEHICULO.CID_TIPO_PERSONA_TRANSMISOR], T1.[ALTA_VEHICULO.E_NOMBRE_TRANSMISOR], T1.[ALTA_VEHICULO.E_RFC_TRANSMISOR], T1.[ALTA_VEHICULO.NID_RELACION_TRANSMISOR], T1.[ALTA_VEHICULO.NID_FORMA_ADQUISICION], T1.[ALTA_VEHICULO.NID_FORMA_PAGO], T1.[ALTA_VEHICULO.E_OBSERVACIONES], T1.[ALTA_VEHICULO.E_OBSERVACIONES_MARCADO], T1.[ALTA_VEHICULO.V_OBSERVACIONES_TESTADO], T1.[ALTA_VEHICULO.NID_ESTADO_TESTADO])
    FROM (
        SELECT 
            T.VID_NOMBRE AS [ALTA_VEHICULO.VID_NOMBRE], 
            T.VID_FECHA AS [ALTA_VEHICULO.VID_FECHA], 
            T.VID_HOMOCLAVE AS [ALTA_VEHICULO.VID_HOMOCLAVE], 
            T.NID_DECLARACION AS [ALTA_VEHICULO.NID_DECLARACION], 
            T.NID_VEHICULO AS [ALTA_VEHICULO.NID_VEHICULO], 
            T.NID_MARCA AS [ALTA_VEHICULO.NID_MARCA], 
            T.C_MODELO AS [ALTA_VEHICULO.C_MODELO], 
            T.V_DESCRIPCION AS [ALTA_VEHICULO.V_DESCRIPCION], 
            T.F_ADQUISICION AS [ALTA_VEHICULO.F_ADQUISICION], 
            T.NID_TIPO_VEHICULO AS [ALTA_VEHICULO.NID_TIPO_VEHICULO], 
            T.NID_USO AS [ALTA_VEHICULO.NID_USO], 
            T.M_VALOR_VEHICULO AS [ALTA_VEHICULO.M_VALOR_VEHICULO], 
            T.V_TIPO_MONEDA AS [ALTA_VEHICULO.V_TIPO_MONEDA], 
            T.E_NUMERO_SERIE AS [ALTA_VEHICULO.E_NUMERO_SERIE], 
            T.NID_PAIS AS [ALTA_VEHICULO.NID_PAIS], 
            T.CID_ENTIDAD_FEDERATIVA AS [ALTA_VEHICULO.CID_ENTIDAD_FEDERATIVA], 
            T.NID_PATRIMONIO AS [ALTA_VEHICULO.NID_PATRIMONIO], 
            T.CID_TIPO_PERSONA_TRANSMISOR AS [ALTA_VEHICULO.CID_TIPO_PERSONA_TRANSMISOR], 
            T.E_NOMBRE_TRANSMISOR AS [ALTA_VEHICULO.E_NOMBRE_TRANSMISOR], 
            T.E_RFC_TRANSMISOR AS [ALTA_VEHICULO.E_RFC_TRANSMISOR], 
            T.NID_RELACION_TRANSMISOR AS [ALTA_VEHICULO.NID_RELACION_TRANSMISOR], 
            T.NID_FORMA_ADQUISICION AS [ALTA_VEHICULO.NID_FORMA_ADQUISICION], 
            T.NID_FORMA_PAGO AS [ALTA_VEHICULO.NID_FORMA_PAGO], 
            T.E_OBSERVACIONES AS [ALTA_VEHICULO.E_OBSERVACIONES], 
            T.E_OBSERVACIONES_MARCADO AS [ALTA_VEHICULO.E_OBSERVACIONES_MARCADO], 
            T.V_OBSERVACIONES_TESTADO AS [ALTA_VEHICULO.V_OBSERVACIONES_TESTADO], 
            T.NID_ESTADO_TESTADO AS [ALTA_VEHICULO.NID_ESTADO_TESTADO], 
            True AS _from0
        FROM cnxDeclara.ALTA_VEHICULO AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ModelDeclaraStoreContainer.ALTA_VEHICULO_ADEUDO.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView22()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing ALTA_VEHICULO_ADEUDO
        [ModelDeclara.Store.ALTA_VEHICULO_ADEUDO](T1.[ALTA_VEHICULO_ADEUDO.VID_NOMBRE], T1.[ALTA_VEHICULO_ADEUDO.VID_FECHA], T1.[ALTA_VEHICULO_ADEUDO.VID_HOMOCLAVE], T1.[ALTA_VEHICULO_ADEUDO.NID_DECLARACION], T1.[ALTA_VEHICULO_ADEUDO.NID_VEHICULO], T1.[ALTA_VEHICULO_ADEUDO.NID_ADEUDO])
    FROM (
        SELECT 
            T.VID_NOMBRE AS [ALTA_VEHICULO_ADEUDO.VID_NOMBRE], 
            T.VID_FECHA AS [ALTA_VEHICULO_ADEUDO.VID_FECHA], 
            T.VID_HOMOCLAVE AS [ALTA_VEHICULO_ADEUDO.VID_HOMOCLAVE], 
            T.NID_DECLARACION AS [ALTA_VEHICULO_ADEUDO.NID_DECLARACION], 
            T.NID_VEHICULO AS [ALTA_VEHICULO_ADEUDO.NID_VEHICULO], 
            T.NID_ADEUDO AS [ALTA_VEHICULO_ADEUDO.NID_ADEUDO], 
            True AS _from0
        FROM cnxDeclara.ALTA_VEHICULO_ADEUDO AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ModelDeclaraStoreContainer.ALTA_VEHICULO_COPROPIETARIO.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView23()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing ALTA_VEHICULO_COPROPIETARIO
        [ModelDeclara.Store.ALTA_VEHICULO_COPROPIETARIO](T1.[ALTA_VEHICULO_COPROPIETARIO.VID_NOMBRE], T1.[ALTA_VEHICULO_COPROPIETARIO.VID_FECHA], T1.[ALTA_VEHICULO_COPROPIETARIO.VID_HOMOCLAVE], T1.[ALTA_VEHICULO_COPROPIETARIO.NID_DECLARACION], T1.[ALTA_VEHICULO_COPROPIETARIO.NID_VEHICULO], T1.[ALTA_VEHICULO_COPROPIETARIO.NID_COPROPIETARIO], T1.[ALTA_VEHICULO_COPROPIETARIO.CID_TIPO_PERSONA], T1.[ALTA_VEHICULO_COPROPIETARIO.V_NOMBRE], T1.[ALTA_VEHICULO_COPROPIETARIO.V_RFC])
    FROM (
        SELECT 
            T.VID_NOMBRE AS [ALTA_VEHICULO_COPROPIETARIO.VID_NOMBRE], 
            T.VID_FECHA AS [ALTA_VEHICULO_COPROPIETARIO.VID_FECHA], 
            T.VID_HOMOCLAVE AS [ALTA_VEHICULO_COPROPIETARIO.VID_HOMOCLAVE], 
            T.NID_DECLARACION AS [ALTA_VEHICULO_COPROPIETARIO.NID_DECLARACION], 
            T.NID_VEHICULO AS [ALTA_VEHICULO_COPROPIETARIO.NID_VEHICULO], 
            T.NID_COPROPIETARIO AS [ALTA_VEHICULO_COPROPIETARIO.NID_COPROPIETARIO], 
            T.CID_TIPO_PERSONA AS [ALTA_VEHICULO_COPROPIETARIO.CID_TIPO_PERSONA], 
            T.V_NOMBRE AS [ALTA_VEHICULO_COPROPIETARIO.V_NOMBRE], 
            T.V_RFC AS [ALTA_VEHICULO_COPROPIETARIO.V_RFC], 
            True AS _from0
        FROM cnxDeclara.ALTA_VEHICULO_COPROPIETARIO AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ModelDeclaraStoreContainer.ALTA_VEHICULO_FORMA_ADQUISICION.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView24()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing ALTA_VEHICULO_FORMA_ADQUISICION
        [ModelDeclara.Store.ALTA_VEHICULO_FORMA_ADQUISICION](T1.[ALTA_VEHICULO_FORMA_ADQUISICION.VID_NOMBRE], T1.[ALTA_VEHICULO_FORMA_ADQUISICION.VID_FECHA], T1.[ALTA_VEHICULO_FORMA_ADQUISICION.VID_HOMOCLAVE], T1.[ALTA_VEHICULO_FORMA_ADQUISICION.NID_DECLARACION], T1.[ALTA_VEHICULO_FORMA_ADQUISICION.NID_VEHICULO], T1.[ALTA_VEHICULO_FORMA_ADQUISICION.NID_FORMA_ADQUISICION], T1.[ALTA_VEHICULO_FORMA_ADQUISICION.M_DONACION])
    FROM (
        SELECT 
            T.VID_NOMBRE AS [ALTA_VEHICULO_FORMA_ADQUISICION.VID_NOMBRE], 
            T.VID_FECHA AS [ALTA_VEHICULO_FORMA_ADQUISICION.VID_FECHA], 
            T.VID_HOMOCLAVE AS [ALTA_VEHICULO_FORMA_ADQUISICION.VID_HOMOCLAVE], 
            T.NID_DECLARACION AS [ALTA_VEHICULO_FORMA_ADQUISICION.NID_DECLARACION], 
            T.NID_VEHICULO AS [ALTA_VEHICULO_FORMA_ADQUISICION.NID_VEHICULO], 
            T.NID_FORMA_ADQUISICION AS [ALTA_VEHICULO_FORMA_ADQUISICION.NID_FORMA_ADQUISICION], 
            T.M_DONACION AS [ALTA_VEHICULO_FORMA_ADQUISICION.M_DONACION], 
            True AS _from0
        FROM cnxDeclara.ALTA_VEHICULO_FORMA_ADQUISICION AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ModelDeclaraStoreContainer.ALTA_VEHICULO_PAGO_INICIAL.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView25()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing ALTA_VEHICULO_PAGO_INICIAL
        [ModelDeclara.Store.ALTA_VEHICULO_PAGO_INICIAL](T1.[ALTA_VEHICULO_PAGO_INICIAL.VID_NOMBRE], T1.[ALTA_VEHICULO_PAGO_INICIAL.VID_FECHA], T1.[ALTA_VEHICULO_PAGO_INICIAL.VID_HOMOCLAVE], T1.[ALTA_VEHICULO_PAGO_INICIAL.NID_DECLARACION], T1.[ALTA_VEHICULO_PAGO_INICIAL.NID_VEHICULO], T1.[ALTA_VEHICULO_PAGO_INICIAL.M_PAGO])
    FROM (
        SELECT 
            T.VID_NOMBRE AS [ALTA_VEHICULO_PAGO_INICIAL.VID_NOMBRE], 
            T.VID_FECHA AS [ALTA_VEHICULO_PAGO_INICIAL.VID_FECHA], 
            T.VID_HOMOCLAVE AS [ALTA_VEHICULO_PAGO_INICIAL.VID_HOMOCLAVE], 
            T.NID_DECLARACION AS [ALTA_VEHICULO_PAGO_INICIAL.NID_DECLARACION], 
            T.NID_VEHICULO AS [ALTA_VEHICULO_PAGO_INICIAL.NID_VEHICULO], 
            T.M_PAGO AS [ALTA_VEHICULO_PAGO_INICIAL.M_PAGO], 
            True AS _from0
        FROM cnxDeclara.ALTA_VEHICULO_PAGO_INICIAL AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ModelDeclaraStoreContainer.ALTA_VEHICULO_TITULAR.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView26()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing ALTA_VEHICULO_TITULAR
        [ModelDeclara.Store.ALTA_VEHICULO_TITULAR](T1.[ALTA_VEHICULO_TITULAR.VID_NOMBRE], T1.[ALTA_VEHICULO_TITULAR.VID_FECHA], T1.[ALTA_VEHICULO_TITULAR.VID_HOMOCLAVE], T1.[ALTA_VEHICULO_TITULAR.NID_DECLARACION], T1.[ALTA_VEHICULO_TITULAR.NID_VEHICULO], T1.[ALTA_VEHICULO_TITULAR.NID_DEPENDIENTE], T1.[ALTA_VEHICULO_TITULAR.L_DIF])
    FROM (
        SELECT 
            T.VID_NOMBRE AS [ALTA_VEHICULO_TITULAR.VID_NOMBRE], 
            T.VID_FECHA AS [ALTA_VEHICULO_TITULAR.VID_FECHA], 
            T.VID_HOMOCLAVE AS [ALTA_VEHICULO_TITULAR.VID_HOMOCLAVE], 
            T.NID_DECLARACION AS [ALTA_VEHICULO_TITULAR.NID_DECLARACION], 
            T.NID_VEHICULO AS [ALTA_VEHICULO_TITULAR.NID_VEHICULO], 
            T.NID_DEPENDIENTE AS [ALTA_VEHICULO_TITULAR.NID_DEPENDIENTE], 
            T.L_DIF AS [ALTA_VEHICULO_TITULAR.L_DIF], 
            True AS _from0
        FROM cnxDeclara.ALTA_VEHICULO_TITULAR AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ModelDeclaraStoreContainer.CAT_AMBITO_PUBLICO.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView27()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing CAT_AMBITO_PUBLICO
        [ModelDeclara.Store.CAT_AMBITO_PUBLICO](T1.[CAT_AMBITO_PUBLICO.NID_AMBITO_PUBLICO], T1.[CAT_AMBITO_PUBLICO.V_AMBITO_PUBLICO])
    FROM (
        SELECT 
            T.NID_AMBITO_PUBLICO AS [CAT_AMBITO_PUBLICO.NID_AMBITO_PUBLICO], 
            T.V_AMBITO_PUBLICO AS [CAT_AMBITO_PUBLICO.V_AMBITO_PUBLICO], 
            True AS _from0
        FROM cnxDeclara.CAT_AMBITO_PUBLICO AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ModelDeclaraStoreContainer.CAT_AMBITO_SECTOR.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView28()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing CAT_AMBITO_SECTOR
        [ModelDeclara.Store.CAT_AMBITO_SECTOR](T1.[CAT_AMBITO_SECTOR.NID_AMBITO_SECTOR], T1.[CAT_AMBITO_SECTOR.V_AMBITO_SECTOR])
    FROM (
        SELECT 
            T.NID_AMBITO_SECTOR AS [CAT_AMBITO_SECTOR.NID_AMBITO_SECTOR], 
            T.V_AMBITO_SECTOR AS [CAT_AMBITO_SECTOR.V_AMBITO_SECTOR], 
            True AS _from0
        FROM cnxDeclara.CAT_AMBITO_SECTOR AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ModelDeclaraStoreContainer.CAT_CODIGO_POSTAL.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView29()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing CAT_CODIGO_POSTAL
        [ModelDeclara.Store.CAT_CODIGO_POSTAL](T1.[CAT_CODIGO_POSTAL.NID_PAIS], T1.[CAT_CODIGO_POSTAL.CID_ENTIDAD_FEDERATIVA], T1.[CAT_CODIGO_POSTAL.CID_MUNICIPIO], T1.[CAT_CODIGO_POSTAL.CID_CODIGO_POSTAL], T1.[CAT_CODIGO_POSTAL.NID_COLONIA], T1.[CAT_CODIGO_POSTAL.V_COLONIA])
    FROM (
        SELECT 
            T.NID_PAIS AS [CAT_CODIGO_POSTAL.NID_PAIS], 
            T.CID_ENTIDAD_FEDERATIVA AS [CAT_CODIGO_POSTAL.CID_ENTIDAD_FEDERATIVA], 
            T.CID_MUNICIPIO AS [CAT_CODIGO_POSTAL.CID_MUNICIPIO], 
            T.CID_CODIGO_POSTAL AS [CAT_CODIGO_POSTAL.CID_CODIGO_POSTAL], 
            T.NID_COLONIA AS [CAT_CODIGO_POSTAL.NID_COLONIA], 
            T.V_COLONIA AS [CAT_CODIGO_POSTAL.V_COLONIA], 
            True AS _from0
        FROM cnxDeclara.CAT_CODIGO_POSTAL AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ModelDeclaraStoreContainer.CAT_DOCUMENTO_OBTENIDO.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView30()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing CAT_DOCUMENTO_OBTENIDO
        [ModelDeclara.Store.CAT_DOCUMENTO_OBTENIDO](T1.[CAT_DOCUMENTO_OBTENIDO.NID_DOCUMENTO_OBTENIDO], T1.[CAT_DOCUMENTO_OBTENIDO.V_DOCUMENTO_OBTENIDO])
    FROM (
        SELECT 
            T.NID_DOCUMENTO_OBTENIDO AS [CAT_DOCUMENTO_OBTENIDO.NID_DOCUMENTO_OBTENIDO], 
            T.V_DOCUMENTO_OBTENIDO AS [CAT_DOCUMENTO_OBTENIDO.V_DOCUMENTO_OBTENIDO], 
            True AS _from0
        FROM cnxDeclara.CAT_DOCUMENTO_OBTENIDO AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ModelDeclaraStoreContainer.CAT_ENTIDAD_FEDERATIVA.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView31()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing CAT_ENTIDAD_FEDERATIVA
        [ModelDeclara.Store.CAT_ENTIDAD_FEDERATIVA](T1.[CAT_ENTIDAD_FEDERATIVA.NID_PAIS], T1.[CAT_ENTIDAD_FEDERATIVA.CID_ENTIDAD_FEDERATIVA], T1.[CAT_ENTIDAD_FEDERATIVA.V_ENTIDAD_FEDERATIVA])
    FROM (
        SELECT 
            T.NID_PAIS AS [CAT_ENTIDAD_FEDERATIVA.NID_PAIS], 
            T.CID_ENTIDAD_FEDERATIVA AS [CAT_ENTIDAD_FEDERATIVA.CID_ENTIDAD_FEDERATIVA], 
            T.V_ENTIDAD_FEDERATIVA AS [CAT_ENTIDAD_FEDERATIVA.V_ENTIDAD_FEDERATIVA], 
            True AS _from0
        FROM cnxDeclara.CAT_ENTIDAD_FEDERATIVA AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ModelDeclaraStoreContainer.CAT_ESTADO_DECLARACION.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView32()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing CAT_ESTADO_DECLARACION
        [ModelDeclara.Store.CAT_ESTADO_DECLARACION](T1.[CAT_ESTADO_DECLARACION.NID_ESTADO], T1.[CAT_ESTADO_DECLARACION.V_ESTADO])
    FROM (
        SELECT 
            T.NID_ESTADO AS [CAT_ESTADO_DECLARACION.NID_ESTADO], 
            T.V_ESTADO AS [CAT_ESTADO_DECLARACION.V_ESTADO], 
            True AS _from0
        FROM cnxDeclara.CAT_ESTADO_DECLARACION AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ModelDeclaraStoreContainer.CAT_ESTADO_ESCOLARIDAD.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView33()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing CAT_ESTADO_ESCOLARIDAD
        [ModelDeclara.Store.CAT_ESTADO_ESCOLARIDAD](T1.[CAT_ESTADO_ESCOLARIDAD.NID_ESTADO_ESCOLARIDAD], T1.[CAT_ESTADO_ESCOLARIDAD.V_ESTADO_ESCOLARIDAD])
    FROM (
        SELECT 
            T.NID_ESTADO_ESCOLARIDAD AS [CAT_ESTADO_ESCOLARIDAD.NID_ESTADO_ESCOLARIDAD], 
            T.V_ESTADO_ESCOLARIDAD AS [CAT_ESTADO_ESCOLARIDAD.V_ESTADO_ESCOLARIDAD], 
            True AS _from0
        FROM cnxDeclara.CAT_ESTADO_ESCOLARIDAD AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ModelDeclaraStoreContainer.CAT_ESTADO_TESTADO.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView34()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing CAT_ESTADO_TESTADO
        [ModelDeclara.Store.CAT_ESTADO_TESTADO](T1.[CAT_ESTADO_TESTADO.NID_ESTADO_TESTADO], T1.[CAT_ESTADO_TESTADO.V_ESTADO_TESTADO])
    FROM (
        SELECT 
            T.NID_ESTADO_TESTADO AS [CAT_ESTADO_TESTADO.NID_ESTADO_TESTADO], 
            T.V_ESTADO_TESTADO AS [CAT_ESTADO_TESTADO.V_ESTADO_TESTADO], 
            True AS _from0
        FROM cnxDeclara.CAT_ESTADO_TESTADO AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ModelDeclaraStoreContainer.CAT_FORMA_ADQUISICION.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView35()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing CAT_FORMA_ADQUISICION
        [ModelDeclara.Store.CAT_FORMA_ADQUISICION](T1.[CAT_FORMA_ADQUISICION.NID_FORMA_ADQUISICION], T1.[CAT_FORMA_ADQUISICION.V_FORMA_ADQUISICION])
    FROM (
        SELECT 
            T.NID_FORMA_ADQUISICION AS [CAT_FORMA_ADQUISICION.NID_FORMA_ADQUISICION], 
            T.V_FORMA_ADQUISICION AS [CAT_FORMA_ADQUISICION.V_FORMA_ADQUISICION], 
            True AS _from0
        FROM cnxDeclara.CAT_FORMA_ADQUISICION AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ModelDeclaraStoreContainer.CAT_FORMA_PAGO.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView36()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing CAT_FORMA_PAGO
        [ModelDeclara.Store.CAT_FORMA_PAGO](T1.[CAT_FORMA_PAGO.NID_FORMA_PAGO], T1.[CAT_FORMA_PAGO.V_FORMA_PAGO])
    FROM (
        SELECT 
            T.NID_FORMA_PAGO AS [CAT_FORMA_PAGO.NID_FORMA_PAGO], 
            T.V_FORMA_PAGO AS [CAT_FORMA_PAGO.V_FORMA_PAGO], 
            True AS _from0
        FROM cnxDeclara.CAT_FORMA_PAGO AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ModelDeclaraStoreContainer.CAT_INST_FINANCIERA.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView37()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing CAT_INST_FINANCIERA
        [ModelDeclara.Store.CAT_INST_FINANCIERA](T1.[CAT_INST_FINANCIERA.NID_INSTITUCION], T1.[CAT_INST_FINANCIERA.V_INSTITUCION], T1.[CAT_INST_FINANCIERA.L_ACTIVO])
    FROM (
        SELECT 
            T.NID_INSTITUCION AS [CAT_INST_FINANCIERA.NID_INSTITUCION], 
            T.V_INSTITUCION AS [CAT_INST_FINANCIERA.V_INSTITUCION], 
            T.L_ACTIVO AS [CAT_INST_FINANCIERA.L_ACTIVO], 
            True AS _from0
        FROM cnxDeclara.CAT_INST_FINANCIERA AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ModelDeclaraStoreContainer.CAT_MARCA_VEHICULO.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView38()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing CAT_MARCA_VEHICULO
        [ModelDeclara.Store.CAT_MARCA_VEHICULO](T1.[CAT_MARCA_VEHICULO.NID_MARCA], T1.[CAT_MARCA_VEHICULO.V_MARCA])
    FROM (
        SELECT 
            T.NID_MARCA AS [CAT_MARCA_VEHICULO.NID_MARCA], 
            T.V_MARCA AS [CAT_MARCA_VEHICULO.V_MARCA], 
            True AS _from0
        FROM cnxDeclara.CAT_MARCA_VEHICULO AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ModelDeclaraStoreContainer.CAT_MUNICIPIO.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView39()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing CAT_MUNICIPIO
        [ModelDeclara.Store.CAT_MUNICIPIO](T1.[CAT_MUNICIPIO.NID_PAIS], T1.[CAT_MUNICIPIO.CID_ENTIDAD_FEDERATIVA], T1.[CAT_MUNICIPIO.CID_MUNICIPIO], T1.[CAT_MUNICIPIO.V_MUNICIPIO])
    FROM (
        SELECT 
            T.NID_PAIS AS [CAT_MUNICIPIO.NID_PAIS], 
            T.CID_ENTIDAD_FEDERATIVA AS [CAT_MUNICIPIO.CID_ENTIDAD_FEDERATIVA], 
            T.CID_MUNICIPIO AS [CAT_MUNICIPIO.CID_MUNICIPIO], 
            T.V_MUNICIPIO AS [CAT_MUNICIPIO.V_MUNICIPIO], 
            True AS _from0
        FROM cnxDeclara.CAT_MUNICIPIO AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ModelDeclaraStoreContainer.CAT_NIVEL_ESCOLARIDAD.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView40()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing CAT_NIVEL_ESCOLARIDAD
        [ModelDeclara.Store.CAT_NIVEL_ESCOLARIDAD](T1.[CAT_NIVEL_ESCOLARIDAD.NID_NIVEL_ESCOLARIDAD], T1.[CAT_NIVEL_ESCOLARIDAD.V_NIVEL_ESCOLARIDAD])
    FROM (
        SELECT 
            T.NID_NIVEL_ESCOLARIDAD AS [CAT_NIVEL_ESCOLARIDAD.NID_NIVEL_ESCOLARIDAD], 
            T.V_NIVEL_ESCOLARIDAD AS [CAT_NIVEL_ESCOLARIDAD.V_NIVEL_ESCOLARIDAD], 
            True AS _from0
        FROM cnxDeclara.CAT_NIVEL_ESCOLARIDAD AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ModelDeclaraStoreContainer.CAT_NIVEL_GOBIERNO.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView41()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing CAT_NIVEL_GOBIERNO
        [ModelDeclara.Store.CAT_NIVEL_GOBIERNO](T1.[CAT_NIVEL_GOBIERNO.NID_NIVEL_GOBIERNO], T1.[CAT_NIVEL_GOBIERNO.V_NIVEL_GOBIERNO])
    FROM (
        SELECT 
            T.NID_NIVEL_GOBIERNO AS [CAT_NIVEL_GOBIERNO.NID_NIVEL_GOBIERNO], 
            T.V_NIVEL_GOBIERNO AS [CAT_NIVEL_GOBIERNO.V_NIVEL_GOBIERNO], 
            True AS _from0
        FROM cnxDeclara.CAT_NIVEL_GOBIERNO AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ModelDeclaraStoreContainer.CAT_PAIS.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView42()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing CAT_PAIS
        [ModelDeclara.Store.CAT_PAIS](T1.[CAT_PAIS.NID_PAIS], T1.[CAT_PAIS.V_PAIS], T1.[CAT_PAIS.V_NACIONALIDAD_M], T1.[CAT_PAIS.V_NACIONALIDAD_F])
    FROM (
        SELECT 
            T.NID_PAIS AS [CAT_PAIS.NID_PAIS], 
            T.V_PAIS AS [CAT_PAIS.V_PAIS], 
            T.V_NACIONALIDAD_M AS [CAT_PAIS.V_NACIONALIDAD_M], 
            T.V_NACIONALIDAD_F AS [CAT_PAIS.V_NACIONALIDAD_F], 
            True AS _from0
        FROM cnxDeclara.CAT_PAIS AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ModelDeclaraStoreContainer.CAT_PUESTO.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView43()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing CAT_PUESTO
        [ModelDeclara.Store.CAT_PUESTO](T1.[CAT_PUESTO.NID_PUESTO], T1.[CAT_PUESTO.VID_PUESTO], T1.[CAT_PUESTO.VID_NIVEL], T1.[CAT_PUESTO.V_PUESTO], T1.[CAT_PUESTO.L_ACTIVO], T1.[CAT_PUESTO.L_OBLIGADO])
    FROM (
        SELECT 
            T.NID_PUESTO AS [CAT_PUESTO.NID_PUESTO], 
            T.VID_PUESTO AS [CAT_PUESTO.VID_PUESTO], 
            T.VID_NIVEL AS [CAT_PUESTO.VID_NIVEL], 
            T.V_PUESTO AS [CAT_PUESTO.V_PUESTO], 
            T.L_ACTIVO AS [CAT_PUESTO.L_ACTIVO], 
            T.L_OBLIGADO AS [CAT_PUESTO.L_OBLIGADO], 
            True AS _from0
        FROM cnxDeclara.CAT_PUESTO AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ModelDeclaraStoreContainer.CAT_REGIMEN_MATRIMONIAL.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView44()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing CAT_REGIMEN_MATRIMONIAL
        [ModelDeclara.Store.CAT_REGIMEN_MATRIMONIAL](T1.[CAT_REGIMEN_MATRIMONIAL.NID_REGIMEN_MATRIMONIAL], T1.[CAT_REGIMEN_MATRIMONIAL.V_REGIMEN_MATRIMONIAL])
    FROM (
        SELECT 
            T.NID_REGIMEN_MATRIMONIAL AS [CAT_REGIMEN_MATRIMONIAL.NID_REGIMEN_MATRIMONIAL], 
            T.V_REGIMEN_MATRIMONIAL AS [CAT_REGIMEN_MATRIMONIAL.V_REGIMEN_MATRIMONIAL], 
            True AS _from0
        FROM cnxDeclara.CAT_REGIMEN_MATRIMONIAL AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ModelDeclaraStoreContainer.CAT_RELACION_TRANSMISOR.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView45()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing CAT_RELACION_TRANSMISOR
        [ModelDeclara.Store.CAT_RELACION_TRANSMISOR](T1.[CAT_RELACION_TRANSMISOR.NID_RELACION_TRANSMISOR], T1.[CAT_RELACION_TRANSMISOR.V_RELACION_TRANSMISOR])
    FROM (
        SELECT 
            T.NID_RELACION_TRANSMISOR AS [CAT_RELACION_TRANSMISOR.NID_RELACION_TRANSMISOR], 
            T.V_RELACION_TRANSMISOR AS [CAT_RELACION_TRANSMISOR.V_RELACION_TRANSMISOR], 
            True AS _from0
        FROM cnxDeclara.CAT_RELACION_TRANSMISOR AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ModelDeclaraStoreContainer.CAT_RESTRICCIONES.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView46()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing CAT_RESTRICCIONES
        [ModelDeclara.Store.CAT_RESTRICCIONES](T1.[CAT_RESTRICCIONES.NID_RESTRICCION], T1.[CAT_RESTRICCIONES.V_RESTRICCION], T1.[CAT_RESTRICCIONES.L_VIGENTE])
    FROM (
        SELECT 
            T.NID_RESTRICCION AS [CAT_RESTRICCIONES.NID_RESTRICCION], 
            T.V_RESTRICCION AS [CAT_RESTRICCIONES.V_RESTRICCION], 
            T.L_VIGENTE AS [CAT_RESTRICCIONES.L_VIGENTE], 
            True AS _from0
        FROM cnxDeclara.CAT_RESTRICCIONES AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ModelDeclaraStoreContainer.CAT_SECTOR.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView47()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing CAT_SECTOR
        [ModelDeclara.Store.CAT_SECTOR](T1.[CAT_SECTOR.NID_SECTOR], T1.[CAT_SECTOR.V_SECTOR])
    FROM (
        SELECT 
            T.NID_SECTOR AS [CAT_SECTOR.NID_SECTOR], 
            T.V_SECTOR AS [CAT_SECTOR.V_SECTOR], 
            True AS _from0
        FROM cnxDeclara.CAT_SECTOR AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ModelDeclaraStoreContainer.CAT_SEGUNDO_NIVEL.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView48()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing CAT_SEGUNDO_NIVEL
        [ModelDeclara.Store.CAT_SEGUNDO_NIVEL](T1.[CAT_SEGUNDO_NIVEL.VID_PRIMER_NIVEL], T1.[CAT_SEGUNDO_NIVEL.VID_SEGUNDO_NIVEL], T1.[CAT_SEGUNDO_NIVEL.V_SEGUNDO_NIVEL], T1.[CAT_SEGUNDO_NIVEL.C_INICIO], T1.[CAT_SEGUNDO_NIVEL.C_FIN])
    FROM (
        SELECT 
            T.VID_PRIMER_NIVEL AS [CAT_SEGUNDO_NIVEL.VID_PRIMER_NIVEL], 
            T.VID_SEGUNDO_NIVEL AS [CAT_SEGUNDO_NIVEL.VID_SEGUNDO_NIVEL], 
            T.V_SEGUNDO_NIVEL AS [CAT_SEGUNDO_NIVEL.V_SEGUNDO_NIVEL], 
            T.C_INICIO AS [CAT_SEGUNDO_NIVEL.C_INICIO], 
            T.C_FIN AS [CAT_SEGUNDO_NIVEL.C_FIN], 
            True AS _from0
        FROM cnxDeclara.CAT_SEGUNDO_NIVEL AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ModelDeclaraStoreContainer.CAT_SUBTIPO_INVERSION.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView49()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing CAT_SUBTIPO_INVERSION
        [ModelDeclara.Store.CAT_SUBTIPO_INVERSION](T1.[CAT_SUBTIPO_INVERSION.NID_TIPO_INVERSION], T1.[CAT_SUBTIPO_INVERSION.NID_SUBTIPO_INVERSION], T1.[CAT_SUBTIPO_INVERSION.V_SUBTIPO_INVERSION], T1.[CAT_SUBTIPO_INVERSION.L_ACTIVO])
    FROM (
        SELECT 
            T.NID_TIPO_INVERSION AS [CAT_SUBTIPO_INVERSION.NID_TIPO_INVERSION], 
            T.NID_SUBTIPO_INVERSION AS [CAT_SUBTIPO_INVERSION.NID_SUBTIPO_INVERSION], 
            T.V_SUBTIPO_INVERSION AS [CAT_SUBTIPO_INVERSION.V_SUBTIPO_INVERSION], 
            T.L_ACTIVO AS [CAT_SUBTIPO_INVERSION.L_ACTIVO], 
            True AS _from0
        FROM cnxDeclara.CAT_SUBTIPO_INVERSION AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ModelDeclaraStoreContainer.CAT_TIPO_ADEUDO.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView50()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing CAT_TIPO_ADEUDO
        [ModelDeclara.Store.CAT_TIPO_ADEUDO](T1.[CAT_TIPO_ADEUDO.NID_TIPO_ADEUDO], T1.[CAT_TIPO_ADEUDO.V_TIPO_ADEUDO], T1.[CAT_TIPO_ADEUDO.L_ACTIVO])
    FROM (
        SELECT 
            T.NID_TIPO_ADEUDO AS [CAT_TIPO_ADEUDO.NID_TIPO_ADEUDO], 
            T.V_TIPO_ADEUDO AS [CAT_TIPO_ADEUDO.V_TIPO_ADEUDO], 
            T.L_ACTIVO AS [CAT_TIPO_ADEUDO.L_ACTIVO], 
            True AS _from0
        FROM cnxDeclara.CAT_TIPO_ADEUDO AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ModelDeclaraStoreContainer.CAT_TIPO_BAJA.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView51()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing CAT_TIPO_BAJA
        [ModelDeclara.Store.CAT_TIPO_BAJA](T1.[CAT_TIPO_BAJA.NID_TIPO_BAJA], T1.[CAT_TIPO_BAJA.V_TIPO_BAJA])
    FROM (
        SELECT 
            T.NID_TIPO_BAJA AS [CAT_TIPO_BAJA.NID_TIPO_BAJA], 
            T.V_TIPO_BAJA AS [CAT_TIPO_BAJA.V_TIPO_BAJA], 
            True AS _from0
        FROM cnxDeclara.CAT_TIPO_BAJA AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ModelDeclaraStoreContainer.CAT_TIPO_DECLARACION.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView52()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing CAT_TIPO_DECLARACION
        [ModelDeclara.Store.CAT_TIPO_DECLARACION](T1.[CAT_TIPO_DECLARACION.NID_TIPO_DECLARACION], T1.[CAT_TIPO_DECLARACION.V_TIPO_DECLARACION])
    FROM (
        SELECT 
            T.NID_TIPO_DECLARACION AS [CAT_TIPO_DECLARACION.NID_TIPO_DECLARACION], 
            T.V_TIPO_DECLARACION AS [CAT_TIPO_DECLARACION.V_TIPO_DECLARACION], 
            True AS _from0
        FROM cnxDeclara.CAT_TIPO_DECLARACION AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ModelDeclaraStoreContainer.CAT_TIPO_DEPENDIENTES.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView53()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing CAT_TIPO_DEPENDIENTES
        [ModelDeclara.Store.CAT_TIPO_DEPENDIENTES](T1.[CAT_TIPO_DEPENDIENTES.NID_TIPO_DEPENDIENTE], T1.[CAT_TIPO_DEPENDIENTES.V_TIPO_DEPENDIENTE], T1.[CAT_TIPO_DEPENDIENTES.L_PAREJA])
    FROM (
        SELECT 
            T.NID_TIPO_DEPENDIENTE AS [CAT_TIPO_DEPENDIENTES.NID_TIPO_DEPENDIENTE], 
            T.V_TIPO_DEPENDIENTE AS [CAT_TIPO_DEPENDIENTES.V_TIPO_DEPENDIENTE], 
            T.L_PAREJA AS [CAT_TIPO_DEPENDIENTES.L_PAREJA], 
            True AS _from0
        FROM cnxDeclara.CAT_TIPO_DEPENDIENTES AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ModelDeclaraStoreContainer.CAT_TIPO_DOMICILIO.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView54()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing CAT_TIPO_DOMICILIO
        [ModelDeclara.Store.CAT_TIPO_DOMICILIO](T1.[CAT_TIPO_DOMICILIO.NID_TIPO_DOMICILIO], T1.[CAT_TIPO_DOMICILIO.V_TIPO_DOMICILIO])
    FROM (
        SELECT 
            T.NID_TIPO_DOMICILIO AS [CAT_TIPO_DOMICILIO.NID_TIPO_DOMICILIO], 
            T.V_TIPO_DOMICILIO AS [CAT_TIPO_DOMICILIO.V_TIPO_DOMICILIO], 
            True AS _from0
        FROM cnxDeclara.CAT_TIPO_DOMICILIO AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ModelDeclaraStoreContainer.CAT_TIPO_GASTO.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView55()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing CAT_TIPO_GASTO
        [ModelDeclara.Store.CAT_TIPO_GASTO](T1.[CAT_TIPO_GASTO.NID_TIPO_GASTO], T1.[CAT_TIPO_GASTO.V_GASTO])
    FROM (
        SELECT 
            T.NID_TIPO_GASTO AS [CAT_TIPO_GASTO.NID_TIPO_GASTO], 
            T.V_GASTO AS [CAT_TIPO_GASTO.V_GASTO], 
            True AS _from0
        FROM cnxDeclara.CAT_TIPO_GASTO AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ModelDeclaraStoreContainer.CAT_TIPO_INMUEBLE.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView56()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing CAT_TIPO_INMUEBLE
        [ModelDeclara.Store.CAT_TIPO_INMUEBLE](T1.[CAT_TIPO_INMUEBLE.NID_TIPO], T1.[CAT_TIPO_INMUEBLE.V_TIPO], T1.[CAT_TIPO_INMUEBLE.L_ACTIVO])
    FROM (
        SELECT 
            T.NID_TIPO AS [CAT_TIPO_INMUEBLE.NID_TIPO], 
            T.V_TIPO AS [CAT_TIPO_INMUEBLE.V_TIPO], 
            T.L_ACTIVO AS [CAT_TIPO_INMUEBLE.L_ACTIVO], 
            True AS _from0
        FROM cnxDeclara.CAT_TIPO_INMUEBLE AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ModelDeclaraStoreContainer.CAT_TIPO_MUEBLE.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView57()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing CAT_TIPO_MUEBLE
        [ModelDeclara.Store.CAT_TIPO_MUEBLE](T1.[CAT_TIPO_MUEBLE.NID_TIPO], T1.[CAT_TIPO_MUEBLE.V_TIPO], T1.[CAT_TIPO_MUEBLE.L_ACTIVO])
    FROM (
        SELECT 
            T.NID_TIPO AS [CAT_TIPO_MUEBLE.NID_TIPO], 
            T.V_TIPO AS [CAT_TIPO_MUEBLE.V_TIPO], 
            T.L_ACTIVO AS [CAT_TIPO_MUEBLE.L_ACTIVO], 
            True AS _from0
        FROM cnxDeclara.CAT_TIPO_MUEBLE AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ModelDeclaraStoreContainer.CAT_TIPO_PATRIMONIO.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView58()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing CAT_TIPO_PATRIMONIO
        [ModelDeclara.Store.CAT_TIPO_PATRIMONIO](T1.[CAT_TIPO_PATRIMONIO.NID_TIPO], T1.[CAT_TIPO_PATRIMONIO.V_TIPO], T1.[CAT_TIPO_PATRIMONIO.C_NATURALEZA])
    FROM (
        SELECT 
            T.NID_TIPO AS [CAT_TIPO_PATRIMONIO.NID_TIPO], 
            T.V_TIPO AS [CAT_TIPO_PATRIMONIO.V_TIPO], 
            T.C_NATURALEZA AS [CAT_TIPO_PATRIMONIO.C_NATURALEZA], 
            True AS _from0
        FROM cnxDeclara.CAT_TIPO_PATRIMONIO AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ModelDeclaraStoreContainer.CAT_TIPO_VEHICULO.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView59()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing CAT_TIPO_VEHICULO
        [ModelDeclara.Store.CAT_TIPO_VEHICULO](T1.[CAT_TIPO_VEHICULO.NID_TIPO_VEHICULO], T1.[CAT_TIPO_VEHICULO.V_TIPO_VEHICULO])
    FROM (
        SELECT 
            T.NID_TIPO_VEHICULO AS [CAT_TIPO_VEHICULO.NID_TIPO_VEHICULO], 
            T.V_TIPO_VEHICULO AS [CAT_TIPO_VEHICULO.V_TIPO_VEHICULO], 
            True AS _from0
        FROM cnxDeclara.CAT_TIPO_VEHICULO AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ModelDeclaraStoreContainer.CAT_USO_INMUEBLE.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView60()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing CAT_USO_INMUEBLE
        [ModelDeclara.Store.CAT_USO_INMUEBLE](T1.[CAT_USO_INMUEBLE.NID_USO], T1.[CAT_USO_INMUEBLE.V_USO], T1.[CAT_USO_INMUEBLE.L_ACTIVO])
    FROM (
        SELECT 
            T.NID_USO AS [CAT_USO_INMUEBLE.NID_USO], 
            T.V_USO AS [CAT_USO_INMUEBLE.V_USO], 
            T.L_ACTIVO AS [CAT_USO_INMUEBLE.L_ACTIVO], 
            True AS _from0
        FROM cnxDeclara.CAT_USO_INMUEBLE AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ModelDeclaraStoreContainer.CAT_USO_VEHICULO.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView61()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing CAT_USO_VEHICULO
        [ModelDeclara.Store.CAT_USO_VEHICULO](T1.[CAT_USO_VEHICULO.NID_USO], T1.[CAT_USO_VEHICULO.V_USO], T1.[CAT_USO_VEHICULO.L_ACTIVO])
    FROM (
        SELECT 
            T.NID_USO AS [CAT_USO_VEHICULO.NID_USO], 
            T.V_USO AS [CAT_USO_VEHICULO.V_USO], 
            T.L_ACTIVO AS [CAT_USO_VEHICULO.L_ACTIVO], 
            True AS _from0
        FROM cnxDeclara.CAT_USO_VEHICULO AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ModelDeclaraStoreContainer.CAT_VALOR_ADQUISICION.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView62()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing CAT_VALOR_ADQUISICION
        [ModelDeclara.Store.CAT_VALOR_ADQUISICION](T1.[CAT_VALOR_ADQUISICION.NID_VALOR_ADQUISICION], T1.[CAT_VALOR_ADQUISICION.V_VALOR_ADQUISICION])
    FROM (
        SELECT 
            T.NID_VALOR_ADQUISICION AS [CAT_VALOR_ADQUISICION.NID_VALOR_ADQUISICION], 
            T.V_VALOR_ADQUISICION AS [CAT_VALOR_ADQUISICION.V_VALOR_ADQUISICION], 
            True AS _from0
        FROM cnxDeclara.CAT_VALOR_ADQUISICION AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ModelDeclaraStoreContainer.DECLARACION.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView63()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing DECLARACION
        [ModelDeclara.Store.DECLARACION](T1.[DECLARACION.VID_NOMBRE], T1.[DECLARACION.VID_FECHA], T1.[DECLARACION.VID_HOMOCLAVE], T1.[DECLARACION.NID_DECLARACION], T1.[DECLARACION.C_EJERCICIO], T1.[DECLARACION.NID_TIPO_DECLARACION], T1.[DECLARACION.NID_ESTADO], T1.[DECLARACION.E_OBSERVACIONES], T1.[DECLARACION.E_OBSERVACIONES_MARCADO], T1.[DECLARACION.V_OBSERVACIONES_TESTADO], T1.[DECLARACION.NID_ESTADO_TESTADO], T1.[DECLARACION.L_AUTORIZA_PUBLICAR], T1.[DECLARACION.F_REGISTRO], T1.[DECLARACION.F_ENVIO], T1.[DECLARACION.L_CONFLICTO], T1.[DECLARACION.V_HASH], T1.[DECLARACION.B_FILE_DECLARACION])
    FROM (
        SELECT 
            T.VID_NOMBRE AS [DECLARACION.VID_NOMBRE], 
            T.VID_FECHA AS [DECLARACION.VID_FECHA], 
            T.VID_HOMOCLAVE AS [DECLARACION.VID_HOMOCLAVE], 
            T.NID_DECLARACION AS [DECLARACION.NID_DECLARACION], 
            T.C_EJERCICIO AS [DECLARACION.C_EJERCICIO], 
            T.NID_TIPO_DECLARACION AS [DECLARACION.NID_TIPO_DECLARACION], 
            T.NID_ESTADO AS [DECLARACION.NID_ESTADO], 
            T.E_OBSERVACIONES AS [DECLARACION.E_OBSERVACIONES], 
            T.E_OBSERVACIONES_MARCADO AS [DECLARACION.E_OBSERVACIONES_MARCADO], 
            T.V_OBSERVACIONES_TESTADO AS [DECLARACION.V_OBSERVACIONES_TESTADO], 
            T.NID_ESTADO_TESTADO AS [DECLARACION.NID_ESTADO_TESTADO], 
            T.L_AUTORIZA_PUBLICAR AS [DECLARACION.L_AUTORIZA_PUBLICAR], 
            T.F_REGISTRO AS [DECLARACION.F_REGISTRO], 
            T.F_ENVIO AS [DECLARACION.F_ENVIO], 
            T.L_CONFLICTO AS [DECLARACION.L_CONFLICTO], 
            T.V_HASH AS [DECLARACION.V_HASH], 
            T.B_FILE_DECLARACION AS [DECLARACION.B_FILE_DECLARACION], 
            True AS _from0
        FROM cnxDeclara.DECLARACION AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ModelDeclaraStoreContainer.DECLARACION_APARTADO.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView64()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing DECLARACION_APARTADO
        [ModelDeclara.Store.DECLARACION_APARTADO](T1.[DECLARACION_APARTADO.VID_NOMBRE], T1.[DECLARACION_APARTADO.VID_FECHA], T1.[DECLARACION_APARTADO.VID_HOMOCLAVE], T1.[DECLARACION_APARTADO.NID_DECLARACION], T1.[DECLARACION_APARTADO.NID_APARTADO], T1.[DECLARACION_APARTADO.L_ESTADO])
    FROM (
        SELECT 
            T.VID_NOMBRE AS [DECLARACION_APARTADO.VID_NOMBRE], 
            T.VID_FECHA AS [DECLARACION_APARTADO.VID_FECHA], 
            T.VID_HOMOCLAVE AS [DECLARACION_APARTADO.VID_HOMOCLAVE], 
            T.NID_DECLARACION AS [DECLARACION_APARTADO.NID_DECLARACION], 
            T.NID_APARTADO AS [DECLARACION_APARTADO.NID_APARTADO], 
            T.L_ESTADO AS [DECLARACION_APARTADO.L_ESTADO], 
            True AS _from0
        FROM cnxDeclara.DECLARACION_APARTADO AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ModelDeclaraStoreContainer.DECLARACION_CARGO.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView65()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing DECLARACION_CARGO
        [ModelDeclara.Store.DECLARACION_CARGO](T1.[DECLARACION_CARGO.VID_NOMBRE], T1.[DECLARACION_CARGO.VID_FECHA], T1.[DECLARACION_CARGO.VID_HOMOCLAVE], T1.[DECLARACION_CARGO.NID_DECLARACION], T1.[DECLARACION_CARGO.NID_PUESTO], T1.[DECLARACION_CARGO.V_DENOMINACION], T1.[DECLARACION_CARGO.F_POSESION], T1.[DECLARACION_CARGO.F_INICIO], T1.[DECLARACION_CARGO.VID_PRIMER_NIVEL], T1.[DECLARACION_CARGO.VID_SEGUNDO_NIVEL], T1.[DECLARACION_CARGO.V_FUNCION_PRINCIPAL], T1.[DECLARACION_CARGO.E_OBSERVACIONES], T1.[DECLARACION_CARGO.E_OBSERVACIONES_MARCADO], T1.[DECLARACION_CARGO.V_OBSERVACIONES_TESTADO], T1.[DECLARACION_CARGO.NID_ESTADO_TESTADO])
    FROM (
        SELECT 
            T.VID_NOMBRE AS [DECLARACION_CARGO.VID_NOMBRE], 
            T.VID_FECHA AS [DECLARACION_CARGO.VID_FECHA], 
            T.VID_HOMOCLAVE AS [DECLARACION_CARGO.VID_HOMOCLAVE], 
            T.NID_DECLARACION AS [DECLARACION_CARGO.NID_DECLARACION], 
            T.NID_PUESTO AS [DECLARACION_CARGO.NID_PUESTO], 
            T.V_DENOMINACION AS [DECLARACION_CARGO.V_DENOMINACION], 
            T.F_POSESION AS [DECLARACION_CARGO.F_POSESION], 
            T.F_INICIO AS [DECLARACION_CARGO.F_INICIO], 
            T.VID_PRIMER_NIVEL AS [DECLARACION_CARGO.VID_PRIMER_NIVEL], 
            T.VID_SEGUNDO_NIVEL AS [DECLARACION_CARGO.VID_SEGUNDO_NIVEL], 
            T.V_FUNCION_PRINCIPAL AS [DECLARACION_CARGO.V_FUNCION_PRINCIPAL], 
            T.E_OBSERVACIONES AS [DECLARACION_CARGO.E_OBSERVACIONES], 
            T.E_OBSERVACIONES_MARCADO AS [DECLARACION_CARGO.E_OBSERVACIONES_MARCADO], 
            T.V_OBSERVACIONES_TESTADO AS [DECLARACION_CARGO.V_OBSERVACIONES_TESTADO], 
            T.NID_ESTADO_TESTADO AS [DECLARACION_CARGO.NID_ESTADO_TESTADO], 
            True AS _from0
        FROM cnxDeclara.DECLARACION_CARGO AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ModelDeclaraStoreContainer.DECLARACION_CARGO_OTRO.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView66()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing DECLARACION_CARGO_OTRO
        [ModelDeclara.Store.DECLARACION_CARGO_OTRO](T1.[DECLARACION_CARGO_OTRO.VID_NOMBRE], T1.[DECLARACION_CARGO_OTRO.VID_FECHA], T1.[DECLARACION_CARGO_OTRO.VID_HOMOCLAVE], T1.[DECLARACION_CARGO_OTRO.NID_DECLARACION], T1.[DECLARACION_CARGO_OTRO.NID_NIVEL_GOBIERNO], T1.[DECLARACION_CARGO_OTRO.NID_AMBITO_PUBLICO], T1.[DECLARACION_CARGO_OTRO.VID_NOMBRE_ENTE], T1.[DECLARACION_CARGO_OTRO.V_AREA_ADSCRIPCION], T1.[DECLARACION_CARGO_OTRO.V_CARGO], T1.[DECLARACION_CARGO_OTRO.L_HONORARIOS], T1.[DECLARACION_CARGO_OTRO.V_NIVEL_EMPLEO], T1.[DECLARACION_CARGO_OTRO.V_FUNCION_PRINCIPAL], T1.[DECLARACION_CARGO_OTRO.F_POSESION], T1.[DECLARACION_CARGO_OTRO.V_TEL_LABORAL], T1.[DECLARACION_CARGO_OTRO.C_CODIGO_POSTAL], T1.[DECLARACION_CARGO_OTRO.NID_PAIS], T1.[DECLARACION_CARGO_OTRO.CID_ENTIDAD_FEDERATIVA], T1.[DECLARACION_CARGO_OTRO.CID_MUNICIPIO], T1.[DECLARACION_CARGO_OTRO.V_COLONIA], T1.[DECLARACION_CARGO_OTRO.V_DOMICILIO], T1.[DECLARACION_CARGO_OTRO.V_OBSERVACIONES])
    FROM (
        SELECT 
            T.VID_NOMBRE AS [DECLARACION_CARGO_OTRO.VID_NOMBRE], 
            T.VID_FECHA AS [DECLARACION_CARGO_OTRO.VID_FECHA], 
            T.VID_HOMOCLAVE AS [DECLARACION_CARGO_OTRO.VID_HOMOCLAVE], 
            T.NID_DECLARACION AS [DECLARACION_CARGO_OTRO.NID_DECLARACION], 
            T.NID_NIVEL_GOBIERNO AS [DECLARACION_CARGO_OTRO.NID_NIVEL_GOBIERNO], 
            T.NID_AMBITO_PUBLICO AS [DECLARACION_CARGO_OTRO.NID_AMBITO_PUBLICO], 
            T.VID_NOMBRE_ENTE AS [DECLARACION_CARGO_OTRO.VID_NOMBRE_ENTE], 
            T.V_AREA_ADSCRIPCION AS [DECLARACION_CARGO_OTRO.V_AREA_ADSCRIPCION], 
            T.V_CARGO AS [DECLARACION_CARGO_OTRO.V_CARGO], 
            T.L_HONORARIOS AS [DECLARACION_CARGO_OTRO.L_HONORARIOS], 
            T.V_NIVEL_EMPLEO AS [DECLARACION_CARGO_OTRO.V_NIVEL_EMPLEO], 
            T.V_FUNCION_PRINCIPAL AS [DECLARACION_CARGO_OTRO.V_FUNCION_PRINCIPAL], 
            T.F_POSESION AS [DECLARACION_CARGO_OTRO.F_POSESION], 
            T.V_TEL_LABORAL AS [DECLARACION_CARGO_OTRO.V_TEL_LABORAL], 
            T.C_CODIGO_POSTAL AS [DECLARACION_CARGO_OTRO.C_CODIGO_POSTAL], 
            T.NID_PAIS AS [DECLARACION_CARGO_OTRO.NID_PAIS], 
            T.CID_ENTIDAD_FEDERATIVA AS [DECLARACION_CARGO_OTRO.CID_ENTIDAD_FEDERATIVA], 
            T.CID_MUNICIPIO AS [DECLARACION_CARGO_OTRO.CID_MUNICIPIO], 
            T.V_COLONIA AS [DECLARACION_CARGO_OTRO.V_COLONIA], 
            T.V_DOMICILIO AS [DECLARACION_CARGO_OTRO.V_DOMICILIO], 
            T.V_OBSERVACIONES AS [DECLARACION_CARGO_OTRO.V_OBSERVACIONES], 
            True AS _from0
        FROM cnxDeclara.DECLARACION_CARGO_OTRO AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ModelDeclaraStoreContainer.DECLARACION_DEPENDIENTES.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView67()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing DECLARACION_DEPENDIENTES
        [ModelDeclara.Store.DECLARACION_DEPENDIENTES](T1.[DECLARACION_DEPENDIENTES.VID_NOMBRE], T1.[DECLARACION_DEPENDIENTES.VID_FECHA], T1.[DECLARACION_DEPENDIENTES.VID_HOMOCLAVE], T1.[DECLARACION_DEPENDIENTES.NID_DECLARACION], T1.[DECLARACION_DEPENDIENTES.NID_DEPENDIENTE], T1.[DECLARACION_DEPENDIENTES.NID_TIPO_DEPENDIENTE], T1.[DECLARACION_DEPENDIENTES.E_NOMBRE], T1.[DECLARACION_DEPENDIENTES.E_PRIMER_A], T1.[DECLARACION_DEPENDIENTES.E_SEGUNDO_A], T1.[DECLARACION_DEPENDIENTES.F_NACIMIENTO], T1.[DECLARACION_DEPENDIENTES.E_RFC], T1.[DECLARACION_DEPENDIENTES.L_DEPENDE_ECO], T1.[DECLARACION_DEPENDIENTES.E_DOMICILIO], T1.[DECLARACION_DEPENDIENTES.L_ACTIVO], T1.[DECLARACION_DEPENDIENTES.L_CIUDADANO_EXTRANJERO], T1.[DECLARACION_DEPENDIENTES.E_CURP], T1.[DECLARACION_DEPENDIENTES.NID_ACTIVIDAD_LABORAL], T1.[DECLARACION_DEPENDIENTES.E_OBSERVACIONES], T1.[DECLARACION_DEPENDIENTES.E_OBSERVACIONES_MARCADO], T1.[DECLARACION_DEPENDIENTES.V_OBSERVACIONES_TESTADO], T1.[DECLARACION_DEPENDIENTES.NID_ESTADO_TESTADO], T1.[DECLARACION_DEPENDIENTES.L_MISMO_DOMICILIO_DECLARANTE], T1.[DECLARACION_DEPENDIENTES.L_PAREJA])
    FROM (
        SELECT 
            T.VID_NOMBRE AS [DECLARACION_DEPENDIENTES.VID_NOMBRE], 
            T.VID_FECHA AS [DECLARACION_DEPENDIENTES.VID_FECHA], 
            T.VID_HOMOCLAVE AS [DECLARACION_DEPENDIENTES.VID_HOMOCLAVE], 
            T.NID_DECLARACION AS [DECLARACION_DEPENDIENTES.NID_DECLARACION], 
            T.NID_DEPENDIENTE AS [DECLARACION_DEPENDIENTES.NID_DEPENDIENTE], 
            T.NID_TIPO_DEPENDIENTE AS [DECLARACION_DEPENDIENTES.NID_TIPO_DEPENDIENTE], 
            T.E_NOMBRE AS [DECLARACION_DEPENDIENTES.E_NOMBRE], 
            T.E_PRIMER_A AS [DECLARACION_DEPENDIENTES.E_PRIMER_A], 
            T.E_SEGUNDO_A AS [DECLARACION_DEPENDIENTES.E_SEGUNDO_A], 
            T.F_NACIMIENTO AS [DECLARACION_DEPENDIENTES.F_NACIMIENTO], 
            T.E_RFC AS [DECLARACION_DEPENDIENTES.E_RFC], 
            T.L_DEPENDE_ECO AS [DECLARACION_DEPENDIENTES.L_DEPENDE_ECO], 
            T.E_DOMICILIO AS [DECLARACION_DEPENDIENTES.E_DOMICILIO], 
            T.L_ACTIVO AS [DECLARACION_DEPENDIENTES.L_ACTIVO], 
            T.L_CIUDADANO_EXTRANJERO AS [DECLARACION_DEPENDIENTES.L_CIUDADANO_EXTRANJERO], 
            T.E_CURP AS [DECLARACION_DEPENDIENTES.E_CURP], 
            T.NID_ACTIVIDAD_LABORAL AS [DECLARACION_DEPENDIENTES.NID_ACTIVIDAD_LABORAL], 
            T.E_OBSERVACIONES AS [DECLARACION_DEPENDIENTES.E_OBSERVACIONES], 
            T.E_OBSERVACIONES_MARCADO AS [DECLARACION_DEPENDIENTES.E_OBSERVACIONES_MARCADO], 
            T.V_OBSERVACIONES_TESTADO AS [DECLARACION_DEPENDIENTES.V_OBSERVACIONES_TESTADO], 
            T.NID_ESTADO_TESTADO AS [DECLARACION_DEPENDIENTES.NID_ESTADO_TESTADO], 
            T.L_MISMO_DOMICILIO_DECLARANTE AS [DECLARACION_DEPENDIENTES.L_MISMO_DOMICILIO_DECLARANTE], 
            T.L_PAREJA AS [DECLARACION_DEPENDIENTES.L_PAREJA], 
            True AS _from0
        FROM cnxDeclara.DECLARACION_DEPENDIENTES AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ModelDeclaraStoreContainer.DECLARACION_DEPENDIENTES_DOMICILIO.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView68()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing DECLARACION_DEPENDIENTES_DOMICILIO
        [ModelDeclara.Store.DECLARACION_DEPENDIENTES_DOMICILIO](T1.[DECLARACION_DEPENDIENTES_DOMICILIO.VID_NOMBRE], T1.[DECLARACION_DEPENDIENTES_DOMICILIO.VID_FECHA], T1.[DECLARACION_DEPENDIENTES_DOMICILIO.VID_HOMOCLAVE], T1.[DECLARACION_DEPENDIENTES_DOMICILIO.NID_DECLARACION], T1.[DECLARACION_DEPENDIENTES_DOMICILIO.NID_DEPENDIENTE], T1.[DECLARACION_DEPENDIENTES_DOMICILIO.C_CODIGO_POSTAL], T1.[DECLARACION_DEPENDIENTES_DOMICILIO.NID_PAIS], T1.[DECLARACION_DEPENDIENTES_DOMICILIO.CID_ENTIDAD_FEDERATIVA], T1.[DECLARACION_DEPENDIENTES_DOMICILIO.CID_MUNICIPIO], T1.[DECLARACION_DEPENDIENTES_DOMICILIO.V_COLONIA], T1.[DECLARACION_DEPENDIENTES_DOMICILIO.V_DOMICILIO])
    FROM (
        SELECT 
            T.VID_NOMBRE AS [DECLARACION_DEPENDIENTES_DOMICILIO.VID_NOMBRE], 
            T.VID_FECHA AS [DECLARACION_DEPENDIENTES_DOMICILIO.VID_FECHA], 
            T.VID_HOMOCLAVE AS [DECLARACION_DEPENDIENTES_DOMICILIO.VID_HOMOCLAVE], 
            T.NID_DECLARACION AS [DECLARACION_DEPENDIENTES_DOMICILIO.NID_DECLARACION], 
            T.NID_DEPENDIENTE AS [DECLARACION_DEPENDIENTES_DOMICILIO.NID_DEPENDIENTE], 
            T.C_CODIGO_POSTAL AS [DECLARACION_DEPENDIENTES_DOMICILIO.C_CODIGO_POSTAL], 
            T.NID_PAIS AS [DECLARACION_DEPENDIENTES_DOMICILIO.NID_PAIS], 
            T.CID_ENTIDAD_FEDERATIVA AS [DECLARACION_DEPENDIENTES_DOMICILIO.CID_ENTIDAD_FEDERATIVA], 
            T.CID_MUNICIPIO AS [DECLARACION_DEPENDIENTES_DOMICILIO.CID_MUNICIPIO], 
            T.V_COLONIA AS [DECLARACION_DEPENDIENTES_DOMICILIO.V_COLONIA], 
            T.V_DOMICILIO AS [DECLARACION_DEPENDIENTES_DOMICILIO.V_DOMICILIO], 
            True AS _from0
        FROM cnxDeclara.DECLARACION_DEPENDIENTES_DOMICILIO AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ModelDeclaraStoreContainer.DECLARACION_DEPENDIENTES_PRIVADO.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView69()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing DECLARACION_DEPENDIENTES_PRIVADO
        [ModelDeclara.Store.DECLARACION_DEPENDIENTES_PRIVADO](T1.[DECLARACION_DEPENDIENTES_PRIVADO.VID_NOMBRE], T1.[DECLARACION_DEPENDIENTES_PRIVADO.VID_FECHA], T1.[DECLARACION_DEPENDIENTES_PRIVADO.VID_HOMOCLAVE], T1.[DECLARACION_DEPENDIENTES_PRIVADO.NID_DECLARACION], T1.[DECLARACION_DEPENDIENTES_PRIVADO.NID_DEPENDIENTE], T1.[DECLARACION_DEPENDIENTES_PRIVADO.V_NOMBRE], T1.[DECLARACION_DEPENDIENTES_PRIVADO.V_CARGO], T1.[DECLARACION_DEPENDIENTES_PRIVADO.V_RFC], T1.[DECLARACION_DEPENDIENTES_PRIVADO.F_INGRESO], T1.[DECLARACION_DEPENDIENTES_PRIVADO.NID_SECTOR], T1.[DECLARACION_DEPENDIENTES_PRIVADO.M_SALARIO_MENSUAL], T1.[DECLARACION_DEPENDIENTES_PRIVADO.L_PROVEEDOR])
    FROM (
        SELECT 
            T.VID_NOMBRE AS [DECLARACION_DEPENDIENTES_PRIVADO.VID_NOMBRE], 
            T.VID_FECHA AS [DECLARACION_DEPENDIENTES_PRIVADO.VID_FECHA], 
            T.VID_HOMOCLAVE AS [DECLARACION_DEPENDIENTES_PRIVADO.VID_HOMOCLAVE], 
            T.NID_DECLARACION AS [DECLARACION_DEPENDIENTES_PRIVADO.NID_DECLARACION], 
            T.NID_DEPENDIENTE AS [DECLARACION_DEPENDIENTES_PRIVADO.NID_DEPENDIENTE], 
            T.V_NOMBRE AS [DECLARACION_DEPENDIENTES_PRIVADO.V_NOMBRE], 
            T.V_CARGO AS [DECLARACION_DEPENDIENTES_PRIVADO.V_CARGO], 
            T.V_RFC AS [DECLARACION_DEPENDIENTES_PRIVADO.V_RFC], 
            T.F_INGRESO AS [DECLARACION_DEPENDIENTES_PRIVADO.F_INGRESO], 
            T.NID_SECTOR AS [DECLARACION_DEPENDIENTES_PRIVADO.NID_SECTOR], 
            T.M_SALARIO_MENSUAL AS [DECLARACION_DEPENDIENTES_PRIVADO.M_SALARIO_MENSUAL], 
            T.L_PROVEEDOR AS [DECLARACION_DEPENDIENTES_PRIVADO.L_PROVEEDOR], 
            True AS _from0
        FROM cnxDeclara.DECLARACION_DEPENDIENTES_PRIVADO AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ModelDeclaraStoreContainer.DECLARACION_DEPENDIENTES_PUBLICO.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView70()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing DECLARACION_DEPENDIENTES_PUBLICO
        [ModelDeclara.Store.DECLARACION_DEPENDIENTES_PUBLICO](T1.[DECLARACION_DEPENDIENTES_PUBLICO.VID_NOMBRE], T1.[DECLARACION_DEPENDIENTES_PUBLICO.VID_FECHA], T1.[DECLARACION_DEPENDIENTES_PUBLICO.VID_HOMOCLAVE], T1.[DECLARACION_DEPENDIENTES_PUBLICO.NID_DECLARACION], T1.[DECLARACION_DEPENDIENTES_PUBLICO.NID_DEPENDIENTE], T1.[DECLARACION_DEPENDIENTES_PUBLICO.NID_AMBITO_SECTOR], T1.[DECLARACION_DEPENDIENTES_PUBLICO.NID_NIVEL_GOBIERNO], T1.[DECLARACION_DEPENDIENTES_PUBLICO.NID_AMBITO_PUBLICO], T1.[DECLARACION_DEPENDIENTES_PUBLICO.V_NOMBRE_ENTE], T1.[DECLARACION_DEPENDIENTES_PUBLICO.V_AREA_ADSCRIPCION], T1.[DECLARACION_DEPENDIENTES_PUBLICO.V_CARGO], T1.[DECLARACION_DEPENDIENTES_PUBLICO.V_FUNCION_PRINCIPAL], T1.[DECLARACION_DEPENDIENTES_PUBLICO.M_SALARIO_MENSUAL], T1.[DECLARACION_DEPENDIENTES_PUBLICO.F_INGRESO])
    FROM (
        SELECT 
            T.VID_NOMBRE AS [DECLARACION_DEPENDIENTES_PUBLICO.VID_NOMBRE], 
            T.VID_FECHA AS [DECLARACION_DEPENDIENTES_PUBLICO.VID_FECHA], 
            T.VID_HOMOCLAVE AS [DECLARACION_DEPENDIENTES_PUBLICO.VID_HOMOCLAVE], 
            T.NID_DECLARACION AS [DECLARACION_DEPENDIENTES_PUBLICO.NID_DECLARACION], 
            T.NID_DEPENDIENTE AS [DECLARACION_DEPENDIENTES_PUBLICO.NID_DEPENDIENTE], 
            T.NID_AMBITO_SECTOR AS [DECLARACION_DEPENDIENTES_PUBLICO.NID_AMBITO_SECTOR], 
            T.NID_NIVEL_GOBIERNO AS [DECLARACION_DEPENDIENTES_PUBLICO.NID_NIVEL_GOBIERNO], 
            T.NID_AMBITO_PUBLICO AS [DECLARACION_DEPENDIENTES_PUBLICO.NID_AMBITO_PUBLICO], 
            T.V_NOMBRE_ENTE AS [DECLARACION_DEPENDIENTES_PUBLICO.V_NOMBRE_ENTE], 
            T.V_AREA_ADSCRIPCION AS [DECLARACION_DEPENDIENTES_PUBLICO.V_AREA_ADSCRIPCION], 
            T.V_CARGO AS [DECLARACION_DEPENDIENTES_PUBLICO.V_CARGO], 
            T.V_FUNCION_PRINCIPAL AS [DECLARACION_DEPENDIENTES_PUBLICO.V_FUNCION_PRINCIPAL], 
            T.M_SALARIO_MENSUAL AS [DECLARACION_DEPENDIENTES_PUBLICO.M_SALARIO_MENSUAL], 
            T.F_INGRESO AS [DECLARACION_DEPENDIENTES_PUBLICO.F_INGRESO], 
            True AS _from0
        FROM cnxDeclara.DECLARACION_DEPENDIENTES_PUBLICO AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ModelDeclaraStoreContainer.DECLARACION_DOM_LABORAL.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView71()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing DECLARACION_DOM_LABORAL
        [ModelDeclara.Store.DECLARACION_DOM_LABORAL](T1.[DECLARACION_DOM_LABORAL.VID_NOMBRE], T1.[DECLARACION_DOM_LABORAL.VID_FECHA], T1.[DECLARACION_DOM_LABORAL.VID_HOMOCLAVE], T1.[DECLARACION_DOM_LABORAL.NID_DECLARACION], T1.[DECLARACION_DOM_LABORAL.C_CODIGO_POSTAL], T1.[DECLARACION_DOM_LABORAL.NID_PAIS], T1.[DECLARACION_DOM_LABORAL.CID_ENTIDAD_FEDERATIVA], T1.[DECLARACION_DOM_LABORAL.CID_MUNICIPIO], T1.[DECLARACION_DOM_LABORAL.V_COLONIA], T1.[DECLARACION_DOM_LABORAL.V_DOMICILIO], T1.[DECLARACION_DOM_LABORAL.V_CORREO_LABORAL], T1.[DECLARACION_DOM_LABORAL.V_TEL_LABORAL])
    FROM (
        SELECT 
            T.VID_NOMBRE AS [DECLARACION_DOM_LABORAL.VID_NOMBRE], 
            T.VID_FECHA AS [DECLARACION_DOM_LABORAL.VID_FECHA], 
            T.VID_HOMOCLAVE AS [DECLARACION_DOM_LABORAL.VID_HOMOCLAVE], 
            T.NID_DECLARACION AS [DECLARACION_DOM_LABORAL.NID_DECLARACION], 
            T.C_CODIGO_POSTAL AS [DECLARACION_DOM_LABORAL.C_CODIGO_POSTAL], 
            T.NID_PAIS AS [DECLARACION_DOM_LABORAL.NID_PAIS], 
            T.CID_ENTIDAD_FEDERATIVA AS [DECLARACION_DOM_LABORAL.CID_ENTIDAD_FEDERATIVA], 
            T.CID_MUNICIPIO AS [DECLARACION_DOM_LABORAL.CID_MUNICIPIO], 
            T.V_COLONIA AS [DECLARACION_DOM_LABORAL.V_COLONIA], 
            T.V_DOMICILIO AS [DECLARACION_DOM_LABORAL.V_DOMICILIO], 
            T.V_CORREO_LABORAL AS [DECLARACION_DOM_LABORAL.V_CORREO_LABORAL], 
            T.V_TEL_LABORAL AS [DECLARACION_DOM_LABORAL.V_TEL_LABORAL], 
            True AS _from0
        FROM cnxDeclara.DECLARACION_DOM_LABORAL AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ModelDeclaraStoreContainer.DECLARACION_DOM_PARTICULAR.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView72()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing DECLARACION_DOM_PARTICULAR
        [ModelDeclara.Store.DECLARACION_DOM_PARTICULAR](T1.[DECLARACION_DOM_PARTICULAR.VID_NOMBRE], T1.[DECLARACION_DOM_PARTICULAR.VID_FECHA], T1.[DECLARACION_DOM_PARTICULAR.VID_HOMOCLAVE], T1.[DECLARACION_DOM_PARTICULAR.NID_DECLARACION], T1.[DECLARACION_DOM_PARTICULAR.C_CODIGO_POSTAL], T1.[DECLARACION_DOM_PARTICULAR.NID_PAIS], T1.[DECLARACION_DOM_PARTICULAR.CID_ENTIDAD_FEDERATIVA], T1.[DECLARACION_DOM_PARTICULAR.CID_MUNICIPIO], T1.[DECLARACION_DOM_PARTICULAR.V_COLONIA], T1.[DECLARACION_DOM_PARTICULAR.V_DOMICILIO], T1.[DECLARACION_DOM_PARTICULAR.V_CORREO], T1.[DECLARACION_DOM_PARTICULAR.V_TEL_PARTICULAR], T1.[DECLARACION_DOM_PARTICULAR.V_TEL_CELULAR], T1.[DECLARACION_DOM_PARTICULAR.E_OBSERVACIONES], T1.[DECLARACION_DOM_PARTICULAR.E_OBSERVACIONES_MARCADO], T1.[DECLARACION_DOM_PARTICULAR.V_OBSERVACIONES_TESTADO], T1.[DECLARACION_DOM_PARTICULAR.NID_ESTADO_TESTADO], T1.[DECLARACION_DOM_PARTICULAR.V_ENTIDAD_FEDERATIVA], T1.[DECLARACION_DOM_PARTICULAR.V_MUNICIPIO])
    FROM (
        SELECT 
            T.VID_NOMBRE AS [DECLARACION_DOM_PARTICULAR.VID_NOMBRE], 
            T.VID_FECHA AS [DECLARACION_DOM_PARTICULAR.VID_FECHA], 
            T.VID_HOMOCLAVE AS [DECLARACION_DOM_PARTICULAR.VID_HOMOCLAVE], 
            T.NID_DECLARACION AS [DECLARACION_DOM_PARTICULAR.NID_DECLARACION], 
            T.C_CODIGO_POSTAL AS [DECLARACION_DOM_PARTICULAR.C_CODIGO_POSTAL], 
            T.NID_PAIS AS [DECLARACION_DOM_PARTICULAR.NID_PAIS], 
            T.CID_ENTIDAD_FEDERATIVA AS [DECLARACION_DOM_PARTICULAR.CID_ENTIDAD_FEDERATIVA], 
            T.CID_MUNICIPIO AS [DECLARACION_DOM_PARTICULAR.CID_MUNICIPIO], 
            T.V_COLONIA AS [DECLARACION_DOM_PARTICULAR.V_COLONIA], 
            T.V_DOMICILIO AS [DECLARACION_DOM_PARTICULAR.V_DOMICILIO], 
            T.V_CORREO AS [DECLARACION_DOM_PARTICULAR.V_CORREO], 
            T.V_TEL_PARTICULAR AS [DECLARACION_DOM_PARTICULAR.V_TEL_PARTICULAR], 
            T.V_TEL_CELULAR AS [DECLARACION_DOM_PARTICULAR.V_TEL_CELULAR], 
            T.E_OBSERVACIONES AS [DECLARACION_DOM_PARTICULAR.E_OBSERVACIONES], 
            T.E_OBSERVACIONES_MARCADO AS [DECLARACION_DOM_PARTICULAR.E_OBSERVACIONES_MARCADO], 
            T.V_OBSERVACIONES_TESTADO AS [DECLARACION_DOM_PARTICULAR.V_OBSERVACIONES_TESTADO], 
            T.NID_ESTADO_TESTADO AS [DECLARACION_DOM_PARTICULAR.NID_ESTADO_TESTADO], 
            T.V_ENTIDAD_FEDERATIVA AS [DECLARACION_DOM_PARTICULAR.V_ENTIDAD_FEDERATIVA], 
            T.V_MUNICIPIO AS [DECLARACION_DOM_PARTICULAR.V_MUNICIPIO], 
            True AS _from0
        FROM cnxDeclara.DECLARACION_DOM_PARTICULAR AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ModelDeclaraStoreContainer.DECLARACION_EGRESOS.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView73()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing DECLARACION_EGRESOS
        [ModelDeclara.Store.DECLARACION_EGRESOS](T1.[DECLARACION_EGRESOS.VID_NOMBRE], T1.[DECLARACION_EGRESOS.VID_FECHA], T1.[DECLARACION_EGRESOS.VID_HOMOCLAVE], T1.[DECLARACION_EGRESOS.NID_DECLARACION], T1.[DECLARACION_EGRESOS.NID_EGRESO], T1.[DECLARACION_EGRESOS.V_CONCEPTO], T1.[DECLARACION_EGRESOS.M_DECLARANTE], T1.[DECLARACION_EGRESOS.M_DEPENDIENTE], T1.[DECLARACION_EGRESOS.M_SUMA], T1.[DECLARACION_EGRESOS.N_NIVEL])
    FROM (
        SELECT 
            T.VID_NOMBRE AS [DECLARACION_EGRESOS.VID_NOMBRE], 
            T.VID_FECHA AS [DECLARACION_EGRESOS.VID_FECHA], 
            T.VID_HOMOCLAVE AS [DECLARACION_EGRESOS.VID_HOMOCLAVE], 
            T.NID_DECLARACION AS [DECLARACION_EGRESOS.NID_DECLARACION], 
            T.NID_EGRESO AS [DECLARACION_EGRESOS.NID_EGRESO], 
            T.V_CONCEPTO AS [DECLARACION_EGRESOS.V_CONCEPTO], 
            T.M_DECLARANTE AS [DECLARACION_EGRESOS.M_DECLARANTE], 
            T.M_DEPENDIENTE AS [DECLARACION_EGRESOS.M_DEPENDIENTE], 
            T.M_SUMA AS [DECLARACION_EGRESOS.M_SUMA], 
            T.N_NIVEL AS [DECLARACION_EGRESOS.N_NIVEL], 
            True AS _from0
        FROM cnxDeclara.DECLARACION_EGRESOS AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ModelDeclaraStoreContainer.DECLARACION_ESCOLARIDAD.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView74()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing DECLARACION_ESCOLARIDAD
        [ModelDeclara.Store.DECLARACION_ESCOLARIDAD](T1.[DECLARACION_ESCOLARIDAD.VID_NOMBRE], T1.[DECLARACION_ESCOLARIDAD.VID_FECHA], T1.[DECLARACION_ESCOLARIDAD.VID_HOMOCLAVE], T1.[DECLARACION_ESCOLARIDAD.NID_DECLARACION], T1.[DECLARACION_ESCOLARIDAD.NID_ESCOLARIDAD], T1.[DECLARACION_ESCOLARIDAD.NID_NIVEL_ESCOLARIDAD], T1.[DECLARACION_ESCOLARIDAD.V_INSTITUCION_EDUCATIVA], T1.[DECLARACION_ESCOLARIDAD.V_CARRERA], T1.[DECLARACION_ESCOLARIDAD.NID_ESTADO_ESCOLARIDAD], T1.[DECLARACION_ESCOLARIDAD.NID_DOCUMENTO_OBTENIDO], T1.[DECLARACION_ESCOLARIDAD.F_OBTENCION], T1.[DECLARACION_ESCOLARIDAD.NID_PAIS], T1.[DECLARACION_ESCOLARIDAD.E_OBSERVACIONES], T1.[DECLARACION_ESCOLARIDAD.E_OBSERVACIONES_MARCADO], T1.[DECLARACION_ESCOLARIDAD.V_OBSERVACIONES_TESTADO], T1.[DECLARACION_ESCOLARIDAD.NID_ESTADO_TESTADO])
    FROM (
        SELECT 
            T.VID_NOMBRE AS [DECLARACION_ESCOLARIDAD.VID_NOMBRE], 
            T.VID_FECHA AS [DECLARACION_ESCOLARIDAD.VID_FECHA], 
            T.VID_HOMOCLAVE AS [DECLARACION_ESCOLARIDAD.VID_HOMOCLAVE], 
            T.NID_DECLARACION AS [DECLARACION_ESCOLARIDAD.NID_DECLARACION], 
            T.NID_ESCOLARIDAD AS [DECLARACION_ESCOLARIDAD.NID_ESCOLARIDAD], 
            T.NID_NIVEL_ESCOLARIDAD AS [DECLARACION_ESCOLARIDAD.NID_NIVEL_ESCOLARIDAD], 
            T.V_INSTITUCION_EDUCATIVA AS [DECLARACION_ESCOLARIDAD.V_INSTITUCION_EDUCATIVA], 
            T.V_CARRERA AS [DECLARACION_ESCOLARIDAD.V_CARRERA], 
            T.NID_ESTADO_ESCOLARIDAD AS [DECLARACION_ESCOLARIDAD.NID_ESTADO_ESCOLARIDAD], 
            T.NID_DOCUMENTO_OBTENIDO AS [DECLARACION_ESCOLARIDAD.NID_DOCUMENTO_OBTENIDO], 
            T.F_OBTENCION AS [DECLARACION_ESCOLARIDAD.F_OBTENCION], 
            T.NID_PAIS AS [DECLARACION_ESCOLARIDAD.NID_PAIS], 
            T.E_OBSERVACIONES AS [DECLARACION_ESCOLARIDAD.E_OBSERVACIONES], 
            T.E_OBSERVACIONES_MARCADO AS [DECLARACION_ESCOLARIDAD.E_OBSERVACIONES_MARCADO], 
            T.V_OBSERVACIONES_TESTADO AS [DECLARACION_ESCOLARIDAD.V_OBSERVACIONES_TESTADO], 
            T.NID_ESTADO_TESTADO AS [DECLARACION_ESCOLARIDAD.NID_ESTADO_TESTADO], 
            True AS _from0
        FROM cnxDeclara.DECLARACION_ESCOLARIDAD AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ModelDeclaraStoreContainer.DECLARACION_EXPERIENCIA_LABORAL.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView75()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing DECLARACION_EXPERIENCIA_LABORAL
        [ModelDeclara.Store.DECLARACION_EXPERIENCIA_LABORAL](T1.[DECLARACION_EXPERIENCIA_LABORAL.VID_NOMBRE], T1.[DECLARACION_EXPERIENCIA_LABORAL.VID_FECHA], T1.[DECLARACION_EXPERIENCIA_LABORAL.VID_HOMOCLAVE], T1.[DECLARACION_EXPERIENCIA_LABORAL.NID_DECLARACION], T1.[DECLARACION_EXPERIENCIA_LABORAL.NID_EXPERIENCIA_LABORAL], T1.[DECLARACION_EXPERIENCIA_LABORAL.NID_AMBITO_SECTOR], T1.[DECLARACION_EXPERIENCIA_LABORAL.NID_NIVEL_GOBIERNO], T1.[DECLARACION_EXPERIENCIA_LABORAL.NID_AMBITO_PUBLICO], T1.[DECLARACION_EXPERIENCIA_LABORAL.V_NOMBRE], T1.[DECLARACION_EXPERIENCIA_LABORAL.V_RFC], T1.[DECLARACION_EXPERIENCIA_LABORAL.V_AREA_ADSCRIPCION], T1.[DECLARACION_EXPERIENCIA_LABORAL.V_PUESTO], T1.[DECLARACION_EXPERIENCIA_LABORAL.V_FUNCION_PRINCIPAL], T1.[DECLARACION_EXPERIENCIA_LABORAL.NID_SECTOR], T1.[DECLARACION_EXPERIENCIA_LABORAL.V_SECTOR], T1.[DECLARACION_EXPERIENCIA_LABORAL.F_INGRESO], T1.[DECLARACION_EXPERIENCIA_LABORAL.F_EGRESO], T1.[DECLARACION_EXPERIENCIA_LABORAL.NID_PAIS], T1.[DECLARACION_EXPERIENCIA_LABORAL.E_OBSERVACIONES], T1.[DECLARACION_EXPERIENCIA_LABORAL.E_OBSERVACIONES_MARCADO], T1.[DECLARACION_EXPERIENCIA_LABORAL.V_OBSERVACIONES_TESTADO], T1.[DECLARACION_EXPERIENCIA_LABORAL.NID_ESTADO_TESTADO])
    FROM (
        SELECT 
            T.VID_NOMBRE AS [DECLARACION_EXPERIENCIA_LABORAL.VID_NOMBRE], 
            T.VID_FECHA AS [DECLARACION_EXPERIENCIA_LABORAL.VID_FECHA], 
            T.VID_HOMOCLAVE AS [DECLARACION_EXPERIENCIA_LABORAL.VID_HOMOCLAVE], 
            T.NID_DECLARACION AS [DECLARACION_EXPERIENCIA_LABORAL.NID_DECLARACION], 
            T.NID_EXPERIENCIA_LABORAL AS [DECLARACION_EXPERIENCIA_LABORAL.NID_EXPERIENCIA_LABORAL], 
            T.NID_AMBITO_SECTOR AS [DECLARACION_EXPERIENCIA_LABORAL.NID_AMBITO_SECTOR], 
            T.NID_NIVEL_GOBIERNO AS [DECLARACION_EXPERIENCIA_LABORAL.NID_NIVEL_GOBIERNO], 
            T.NID_AMBITO_PUBLICO AS [DECLARACION_EXPERIENCIA_LABORAL.NID_AMBITO_PUBLICO], 
            T.V_NOMBRE AS [DECLARACION_EXPERIENCIA_LABORAL.V_NOMBRE], 
            T.V_RFC AS [DECLARACION_EXPERIENCIA_LABORAL.V_RFC], 
            T.V_AREA_ADSCRIPCION AS [DECLARACION_EXPERIENCIA_LABORAL.V_AREA_ADSCRIPCION], 
            T.V_PUESTO AS [DECLARACION_EXPERIENCIA_LABORAL.V_PUESTO], 
            T.V_FUNCION_PRINCIPAL AS [DECLARACION_EXPERIENCIA_LABORAL.V_FUNCION_PRINCIPAL], 
            T.NID_SECTOR AS [DECLARACION_EXPERIENCIA_LABORAL.NID_SECTOR], 
            T.V_SECTOR AS [DECLARACION_EXPERIENCIA_LABORAL.V_SECTOR], 
            T.F_INGRESO AS [DECLARACION_EXPERIENCIA_LABORAL.F_INGRESO], 
            T.F_EGRESO AS [DECLARACION_EXPERIENCIA_LABORAL.F_EGRESO], 
            T.NID_PAIS AS [DECLARACION_EXPERIENCIA_LABORAL.NID_PAIS], 
            T.E_OBSERVACIONES AS [DECLARACION_EXPERIENCIA_LABORAL.E_OBSERVACIONES], 
            T.E_OBSERVACIONES_MARCADO AS [DECLARACION_EXPERIENCIA_LABORAL.E_OBSERVACIONES_MARCADO], 
            T.V_OBSERVACIONES_TESTADO AS [DECLARACION_EXPERIENCIA_LABORAL.V_OBSERVACIONES_TESTADO], 
            T.NID_ESTADO_TESTADO AS [DECLARACION_EXPERIENCIA_LABORAL.NID_ESTADO_TESTADO], 
            True AS _from0
        FROM cnxDeclara.DECLARACION_EXPERIENCIA_LABORAL AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ModelDeclaraStoreContainer.DECLARACION_INGRESOS.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView76()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing DECLARACION_INGRESOS
        [ModelDeclara.Store.DECLARACION_INGRESOS](T1.[DECLARACION_INGRESOS.VID_NOMBRE], T1.[DECLARACION_INGRESOS.VID_FECHA], T1.[DECLARACION_INGRESOS.VID_HOMOCLAVE], T1.[DECLARACION_INGRESOS.NID_DECLARACION], T1.[DECLARACION_INGRESOS.NID_INGRESO], T1.[DECLARACION_INGRESOS.V_CONCEPTO], T1.[DECLARACION_INGRESOS.M_DECLARANTE], T1.[DECLARACION_INGRESOS.M_DEPENDIENTE], T1.[DECLARACION_INGRESOS.M_SUMA], T1.[DECLARACION_INGRESOS.N_NIVEL])
    FROM (
        SELECT 
            T.VID_NOMBRE AS [DECLARACION_INGRESOS.VID_NOMBRE], 
            T.VID_FECHA AS [DECLARACION_INGRESOS.VID_FECHA], 
            T.VID_HOMOCLAVE AS [DECLARACION_INGRESOS.VID_HOMOCLAVE], 
            T.NID_DECLARACION AS [DECLARACION_INGRESOS.NID_DECLARACION], 
            T.NID_INGRESO AS [DECLARACION_INGRESOS.NID_INGRESO], 
            T.V_CONCEPTO AS [DECLARACION_INGRESOS.V_CONCEPTO], 
            T.M_DECLARANTE AS [DECLARACION_INGRESOS.M_DECLARANTE], 
            T.M_DEPENDIENTE AS [DECLARACION_INGRESOS.M_DEPENDIENTE], 
            T.M_SUMA AS [DECLARACION_INGRESOS.M_SUMA], 
            T.N_NIVEL AS [DECLARACION_INGRESOS.N_NIVEL], 
            True AS _from0
        FROM cnxDeclara.DECLARACION_INGRESOS AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ModelDeclaraStoreContainer.DECLARACION_REGIMEN_MATRIMONIAL.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView77()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing DECLARACION_REGIMEN_MATRIMONIAL
        [ModelDeclara.Store.DECLARACION_REGIMEN_MATRIMONIAL](T1.[DECLARACION_REGIMEN_MATRIMONIAL.VID_NOMBRE], T1.[DECLARACION_REGIMEN_MATRIMONIAL.VID_FECHA], T1.[DECLARACION_REGIMEN_MATRIMONIAL.VID_HOMOCLAVE], T1.[DECLARACION_REGIMEN_MATRIMONIAL.NID_DECLARACION], T1.[DECLARACION_REGIMEN_MATRIMONIAL.NID_REGIMEN], T1.[DECLARACION_REGIMEN_MATRIMONIAL.NID_REGIMEN_MATRIMONIAL])
    FROM (
        SELECT 
            T.VID_NOMBRE AS [DECLARACION_REGIMEN_MATRIMONIAL.VID_NOMBRE], 
            T.VID_FECHA AS [DECLARACION_REGIMEN_MATRIMONIAL.VID_FECHA], 
            T.VID_HOMOCLAVE AS [DECLARACION_REGIMEN_MATRIMONIAL.VID_HOMOCLAVE], 
            T.NID_DECLARACION AS [DECLARACION_REGIMEN_MATRIMONIAL.NID_DECLARACION], 
            T.NID_REGIMEN AS [DECLARACION_REGIMEN_MATRIMONIAL.NID_REGIMEN], 
            T.NID_REGIMEN_MATRIMONIAL AS [DECLARACION_REGIMEN_MATRIMONIAL.NID_REGIMEN_MATRIMONIAL], 
            True AS _from0
        FROM cnxDeclara.DECLARACION_REGIMEN_MATRIMONIAL AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ModelDeclaraStoreContainer.DECLARACION_RESTRICCIONES.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView78()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing DECLARACION_RESTRICCIONES
        [ModelDeclara.Store.DECLARACION_RESTRICCIONES](T1.[DECLARACION_RESTRICCIONES.VID_NOMBRE], T1.[DECLARACION_RESTRICCIONES.VID_FECHA], T1.[DECLARACION_RESTRICCIONES.VID_HOMOCLAVE], T1.[DECLARACION_RESTRICCIONES.NID_DECLARACION], T1.[DECLARACION_RESTRICCIONES.NID_RESTRICCION], T1.[DECLARACION_RESTRICCIONES.L_RESPUESTA], T1.[DECLARACION_RESTRICCIONES.L_AUTO])
    FROM (
        SELECT 
            T.VID_NOMBRE AS [DECLARACION_RESTRICCIONES.VID_NOMBRE], 
            T.VID_FECHA AS [DECLARACION_RESTRICCIONES.VID_FECHA], 
            T.VID_HOMOCLAVE AS [DECLARACION_RESTRICCIONES.VID_HOMOCLAVE], 
            T.NID_DECLARACION AS [DECLARACION_RESTRICCIONES.NID_DECLARACION], 
            T.NID_RESTRICCION AS [DECLARACION_RESTRICCIONES.NID_RESTRICCION], 
            T.L_RESPUESTA AS [DECLARACION_RESTRICCIONES.L_RESPUESTA], 
            T.L_AUTO AS [DECLARACION_RESTRICCIONES.L_AUTO], 
            True AS _from0
        FROM cnxDeclara.DECLARACION_RESTRICCIONES AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ModelDeclaraStoreContainer.H_PATRIMONIO.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView79()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing H_PATRIMONIO
        [ModelDeclara.Store.H_PATRIMONIO](T1.[H_PATRIMONIO.VID_NOMBRE], T1.[H_PATRIMONIO.VID_FECHA], T1.[H_PATRIMONIO.VID_HOMOCLAVE], T1.[H_PATRIMONIO.NID_PATRIMONIO], T1.[H_PATRIMONIO.NID_HISTORICO], T1.[H_PATRIMONIO.NID_TIPO], T1.[H_PATRIMONIO.M_VALOR], T1.[H_PATRIMONIO.NID_DEC_INCOR], T1.[H_PATRIMONIO.F_INCORPORACION], T1.[H_PATRIMONIO.NID_DEC_ULT_MOD], T1.[H_PATRIMONIO.F_MODIFICACION], T1.[H_PATRIMONIO.L_ACTIVO], T1.[H_PATRIMONIO.F_REGISTRO])
    FROM (
        SELECT 
            T.VID_NOMBRE AS [H_PATRIMONIO.VID_NOMBRE], 
            T.VID_FECHA AS [H_PATRIMONIO.VID_FECHA], 
            T.VID_HOMOCLAVE AS [H_PATRIMONIO.VID_HOMOCLAVE], 
            T.NID_PATRIMONIO AS [H_PATRIMONIO.NID_PATRIMONIO], 
            T.NID_HISTORICO AS [H_PATRIMONIO.NID_HISTORICO], 
            T.NID_TIPO AS [H_PATRIMONIO.NID_TIPO], 
            T.M_VALOR AS [H_PATRIMONIO.M_VALOR], 
            T.NID_DEC_INCOR AS [H_PATRIMONIO.NID_DEC_INCOR], 
            T.F_INCORPORACION AS [H_PATRIMONIO.F_INCORPORACION], 
            T.NID_DEC_ULT_MOD AS [H_PATRIMONIO.NID_DEC_ULT_MOD], 
            T.F_MODIFICACION AS [H_PATRIMONIO.F_MODIFICACION], 
            T.L_ACTIVO AS [H_PATRIMONIO.L_ACTIVO], 
            T.F_REGISTRO AS [H_PATRIMONIO.F_REGISTRO], 
            True AS _from0
        FROM cnxDeclara.H_PATRIMONIO AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ModelDeclaraStoreContainer.H_PATRIMONIO_ADEUDO.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView80()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing H_PATRIMONIO_ADEUDO
        [ModelDeclara.Store.H_PATRIMONIO_ADEUDO](T1.[H_PATRIMONIO_ADEUDO.VID_NOMBRE], T1.[H_PATRIMONIO_ADEUDO.VID_FECHA], T1.[H_PATRIMONIO_ADEUDO.VID_HOMOCLAVE], T1.[H_PATRIMONIO_ADEUDO.NID_PATRIMONIO], T1.[H_PATRIMONIO_ADEUDO.NID_HISTORICO], T1.[H_PATRIMONIO_ADEUDO.NID_PAIS], T1.[H_PATRIMONIO_ADEUDO.CID_ENTIDAD_FEDERATIVA], T1.[H_PATRIMONIO_ADEUDO.NID_INSTITUCION], T1.[H_PATRIMONIO_ADEUDO.NID_TIPO_ADEUDO], T1.[H_PATRIMONIO_ADEUDO.M_ORIGINAL], T1.[H_PATRIMONIO_ADEUDO.M_SALDO], T1.[H_PATRIMONIO_ADEUDO.E_CUENTA])
    FROM (
        SELECT 
            T.VID_NOMBRE AS [H_PATRIMONIO_ADEUDO.VID_NOMBRE], 
            T.VID_FECHA AS [H_PATRIMONIO_ADEUDO.VID_FECHA], 
            T.VID_HOMOCLAVE AS [H_PATRIMONIO_ADEUDO.VID_HOMOCLAVE], 
            T.NID_PATRIMONIO AS [H_PATRIMONIO_ADEUDO.NID_PATRIMONIO], 
            T.NID_HISTORICO AS [H_PATRIMONIO_ADEUDO.NID_HISTORICO], 
            T.NID_PAIS AS [H_PATRIMONIO_ADEUDO.NID_PAIS], 
            T.CID_ENTIDAD_FEDERATIVA AS [H_PATRIMONIO_ADEUDO.CID_ENTIDAD_FEDERATIVA], 
            T.NID_INSTITUCION AS [H_PATRIMONIO_ADEUDO.NID_INSTITUCION], 
            T.NID_TIPO_ADEUDO AS [H_PATRIMONIO_ADEUDO.NID_TIPO_ADEUDO], 
            T.M_ORIGINAL AS [H_PATRIMONIO_ADEUDO.M_ORIGINAL], 
            T.M_SALDO AS [H_PATRIMONIO_ADEUDO.M_SALDO], 
            T.E_CUENTA AS [H_PATRIMONIO_ADEUDO.E_CUENTA], 
            True AS _from0
        FROM cnxDeclara.H_PATRIMONIO_ADEUDO AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ModelDeclaraStoreContainer.H_PATRIMONIO_COPROPIETARIO.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView81()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing H_PATRIMONIO_COPROPIETARIO
        [ModelDeclara.Store.H_PATRIMONIO_COPROPIETARIO](T1.[H_PATRIMONIO_COPROPIETARIO.VID_NOMBRE], T1.[H_PATRIMONIO_COPROPIETARIO.VID_FECHA], T1.[H_PATRIMONIO_COPROPIETARIO.VID_HOMOCLAVE], T1.[H_PATRIMONIO_COPROPIETARIO.NID_PATRIMONIO], T1.[H_PATRIMONIO_COPROPIETARIO.NID_HISTORICO], T1.[H_PATRIMONIO_COPROPIETARIO.NID_COPROPIETARIO], T1.[H_PATRIMONIO_COPROPIETARIO.CID_TIPO_PERSONA], T1.[H_PATRIMONIO_COPROPIETARIO.V_NOMBRE], T1.[H_PATRIMONIO_COPROPIETARIO.V_RFC])
    FROM (
        SELECT 
            T.VID_NOMBRE AS [H_PATRIMONIO_COPROPIETARIO.VID_NOMBRE], 
            T.VID_FECHA AS [H_PATRIMONIO_COPROPIETARIO.VID_FECHA], 
            T.VID_HOMOCLAVE AS [H_PATRIMONIO_COPROPIETARIO.VID_HOMOCLAVE], 
            T.NID_PATRIMONIO AS [H_PATRIMONIO_COPROPIETARIO.NID_PATRIMONIO], 
            T.NID_HISTORICO AS [H_PATRIMONIO_COPROPIETARIO.NID_HISTORICO], 
            T.NID_COPROPIETARIO AS [H_PATRIMONIO_COPROPIETARIO.NID_COPROPIETARIO], 
            T.CID_TIPO_PERSONA AS [H_PATRIMONIO_COPROPIETARIO.CID_TIPO_PERSONA], 
            T.V_NOMBRE AS [H_PATRIMONIO_COPROPIETARIO.V_NOMBRE], 
            T.V_RFC AS [H_PATRIMONIO_COPROPIETARIO.V_RFC], 
            True AS _from0
        FROM cnxDeclara.H_PATRIMONIO_COPROPIETARIO AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ModelDeclaraStoreContainer.H_PATRIMONIO_DEPENDIENTES.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView82()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing H_PATRIMONIO_DEPENDIENTES
        [ModelDeclara.Store.H_PATRIMONIO_DEPENDIENTES](T1.[H_PATRIMONIO_DEPENDIENTES.VID_NOMBRE], T1.[H_PATRIMONIO_DEPENDIENTES.VID_FECHA], T1.[H_PATRIMONIO_DEPENDIENTES.VID_HOMOCLAVE], T1.[H_PATRIMONIO_DEPENDIENTES.NID_DEPENDIENTE], T1.[H_PATRIMONIO_DEPENDIENTES.NID_HISTORICO], T1.[H_PATRIMONIO_DEPENDIENTES.NID_TIPO_DEPENDIENTE], T1.[H_PATRIMONIO_DEPENDIENTES.E_NOMBRE], T1.[H_PATRIMONIO_DEPENDIENTES.E_PRIMER_A], T1.[H_PATRIMONIO_DEPENDIENTES.E_SEGUNDO_A], T1.[H_PATRIMONIO_DEPENDIENTES.F_NACIMIENTO], T1.[H_PATRIMONIO_DEPENDIENTES.E_RFC], T1.[H_PATRIMONIO_DEPENDIENTES.L_DEPENDE_ECO], T1.[H_PATRIMONIO_DEPENDIENTES.V_DOMICILIO], T1.[H_PATRIMONIO_DEPENDIENTES.L_ACTIVO])
    FROM (
        SELECT 
            T.VID_NOMBRE AS [H_PATRIMONIO_DEPENDIENTES.VID_NOMBRE], 
            T.VID_FECHA AS [H_PATRIMONIO_DEPENDIENTES.VID_FECHA], 
            T.VID_HOMOCLAVE AS [H_PATRIMONIO_DEPENDIENTES.VID_HOMOCLAVE], 
            T.NID_DEPENDIENTE AS [H_PATRIMONIO_DEPENDIENTES.NID_DEPENDIENTE], 
            T.NID_HISTORICO AS [H_PATRIMONIO_DEPENDIENTES.NID_HISTORICO], 
            T.NID_TIPO_DEPENDIENTE AS [H_PATRIMONIO_DEPENDIENTES.NID_TIPO_DEPENDIENTE], 
            T.E_NOMBRE AS [H_PATRIMONIO_DEPENDIENTES.E_NOMBRE], 
            T.E_PRIMER_A AS [H_PATRIMONIO_DEPENDIENTES.E_PRIMER_A], 
            T.E_SEGUNDO_A AS [H_PATRIMONIO_DEPENDIENTES.E_SEGUNDO_A], 
            T.F_NACIMIENTO AS [H_PATRIMONIO_DEPENDIENTES.F_NACIMIENTO], 
            T.E_RFC AS [H_PATRIMONIO_DEPENDIENTES.E_RFC], 
            T.L_DEPENDE_ECO AS [H_PATRIMONIO_DEPENDIENTES.L_DEPENDE_ECO], 
            T.V_DOMICILIO AS [H_PATRIMONIO_DEPENDIENTES.V_DOMICILIO], 
            T.L_ACTIVO AS [H_PATRIMONIO_DEPENDIENTES.L_ACTIVO], 
            True AS _from0
        FROM cnxDeclara.H_PATRIMONIO_DEPENDIENTES AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ModelDeclaraStoreContainer.H_PATRIMONIO_FORMA_ADQUISICION.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView83()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing H_PATRIMONIO_FORMA_ADQUISICION
        [ModelDeclara.Store.H_PATRIMONIO_FORMA_ADQUISICION](T1.[H_PATRIMONIO_FORMA_ADQUISICION.VID_NOMBRE], T1.[H_PATRIMONIO_FORMA_ADQUISICION.VID_FECHA], T1.[H_PATRIMONIO_FORMA_ADQUISICION.VID_HOMOCLAVE], T1.[H_PATRIMONIO_FORMA_ADQUISICION.NID_PATRIMONIO], T1.[H_PATRIMONIO_FORMA_ADQUISICION.NID_HISTORICO], T1.[H_PATRIMONIO_FORMA_ADQUISICION.NID_FORMA_ADQUISICION], T1.[H_PATRIMONIO_FORMA_ADQUISICION.M_DONACION])
    FROM (
        SELECT 
            T.VID_NOMBRE AS [H_PATRIMONIO_FORMA_ADQUISICION.VID_NOMBRE], 
            T.VID_FECHA AS [H_PATRIMONIO_FORMA_ADQUISICION.VID_FECHA], 
            T.VID_HOMOCLAVE AS [H_PATRIMONIO_FORMA_ADQUISICION.VID_HOMOCLAVE], 
            T.NID_PATRIMONIO AS [H_PATRIMONIO_FORMA_ADQUISICION.NID_PATRIMONIO], 
            T.NID_HISTORICO AS [H_PATRIMONIO_FORMA_ADQUISICION.NID_HISTORICO], 
            T.NID_FORMA_ADQUISICION AS [H_PATRIMONIO_FORMA_ADQUISICION.NID_FORMA_ADQUISICION], 
            T.M_DONACION AS [H_PATRIMONIO_FORMA_ADQUISICION.M_DONACION], 
            True AS _from0
        FROM cnxDeclara.H_PATRIMONIO_FORMA_ADQUISICION AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ModelDeclaraStoreContainer.H_PATRIMONIO_INMUEBLE.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView84()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing H_PATRIMONIO_INMUEBLE
        [ModelDeclara.Store.H_PATRIMONIO_INMUEBLE](T1.[H_PATRIMONIO_INMUEBLE.VID_NOMBRE], T1.[H_PATRIMONIO_INMUEBLE.VID_FECHA], T1.[H_PATRIMONIO_INMUEBLE.VID_HOMOCLAVE], T1.[H_PATRIMONIO_INMUEBLE.NID_PATRIMONIO], T1.[H_PATRIMONIO_INMUEBLE.NID_HISTORICO], T1.[H_PATRIMONIO_INMUEBLE.NID_TIPO], T1.[H_PATRIMONIO_INMUEBLE.F_ADQUISICION], T1.[H_PATRIMONIO_INMUEBLE.NID_USO], T1.[H_PATRIMONIO_INMUEBLE.E_UBICACION], T1.[H_PATRIMONIO_INMUEBLE.N_TERRENO], T1.[H_PATRIMONIO_INMUEBLE.N_CONSTRUCCION], T1.[H_PATRIMONIO_INMUEBLE.M_VALOR_INMUEBLE])
    FROM (
        SELECT 
            T.VID_NOMBRE AS [H_PATRIMONIO_INMUEBLE.VID_NOMBRE], 
            T.VID_FECHA AS [H_PATRIMONIO_INMUEBLE.VID_FECHA], 
            T.VID_HOMOCLAVE AS [H_PATRIMONIO_INMUEBLE.VID_HOMOCLAVE], 
            T.NID_PATRIMONIO AS [H_PATRIMONIO_INMUEBLE.NID_PATRIMONIO], 
            T.NID_HISTORICO AS [H_PATRIMONIO_INMUEBLE.NID_HISTORICO], 
            T.NID_TIPO AS [H_PATRIMONIO_INMUEBLE.NID_TIPO], 
            T.F_ADQUISICION AS [H_PATRIMONIO_INMUEBLE.F_ADQUISICION], 
            T.NID_USO AS [H_PATRIMONIO_INMUEBLE.NID_USO], 
            T.E_UBICACION AS [H_PATRIMONIO_INMUEBLE.E_UBICACION], 
            T.N_TERRENO AS [H_PATRIMONIO_INMUEBLE.N_TERRENO], 
            T.N_CONSTRUCCION AS [H_PATRIMONIO_INMUEBLE.N_CONSTRUCCION], 
            T.M_VALOR_INMUEBLE AS [H_PATRIMONIO_INMUEBLE.M_VALOR_INMUEBLE], 
            True AS _from0
        FROM cnxDeclara.H_PATRIMONIO_INMUEBLE AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ModelDeclaraStoreContainer.H_PATRIMONIO_INVERSION.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView85()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing H_PATRIMONIO_INVERSION
        [ModelDeclara.Store.H_PATRIMONIO_INVERSION](T1.[H_PATRIMONIO_INVERSION.VID_NOMBRE], T1.[H_PATRIMONIO_INVERSION.VID_FECHA], T1.[H_PATRIMONIO_INVERSION.VID_HOMOCLAVE], T1.[H_PATRIMONIO_INVERSION.NID_PATRIMONIO], T1.[H_PATRIMONIO_INVERSION.NID_HISTORICO], T1.[H_PATRIMONIO_INVERSION.NID_TIPO_INVERSION], T1.[H_PATRIMONIO_INVERSION.NID_SUBTIPO_INVERSION], T1.[H_PATRIMONIO_INVERSION.NID_INSTITUCION], T1.[H_PATRIMONIO_INVERSION.E_CUENTA], T1.[H_PATRIMONIO_INVERSION.V_CUENTA_CORTO], T1.[H_PATRIMONIO_INVERSION.V_OTRO], T1.[H_PATRIMONIO_INVERSION.M_SALDO], T1.[H_PATRIMONIO_INVERSION.NID_PAIS], T1.[H_PATRIMONIO_INVERSION.CID_ENTIDAD_FEDERATIVA], T1.[H_PATRIMONIO_INVERSION.V_LUGAR])
    FROM (
        SELECT 
            T.VID_NOMBRE AS [H_PATRIMONIO_INVERSION.VID_NOMBRE], 
            T.VID_FECHA AS [H_PATRIMONIO_INVERSION.VID_FECHA], 
            T.VID_HOMOCLAVE AS [H_PATRIMONIO_INVERSION.VID_HOMOCLAVE], 
            T.NID_PATRIMONIO AS [H_PATRIMONIO_INVERSION.NID_PATRIMONIO], 
            T.NID_HISTORICO AS [H_PATRIMONIO_INVERSION.NID_HISTORICO], 
            T.NID_TIPO_INVERSION AS [H_PATRIMONIO_INVERSION.NID_TIPO_INVERSION], 
            T.NID_SUBTIPO_INVERSION AS [H_PATRIMONIO_INVERSION.NID_SUBTIPO_INVERSION], 
            T.NID_INSTITUCION AS [H_PATRIMONIO_INVERSION.NID_INSTITUCION], 
            T.E_CUENTA AS [H_PATRIMONIO_INVERSION.E_CUENTA], 
            T.V_CUENTA_CORTO AS [H_PATRIMONIO_INVERSION.V_CUENTA_CORTO], 
            T.V_OTRO AS [H_PATRIMONIO_INVERSION.V_OTRO], 
            T.M_SALDO AS [H_PATRIMONIO_INVERSION.M_SALDO], 
            T.NID_PAIS AS [H_PATRIMONIO_INVERSION.NID_PAIS], 
            T.CID_ENTIDAD_FEDERATIVA AS [H_PATRIMONIO_INVERSION.CID_ENTIDAD_FEDERATIVA], 
            T.V_LUGAR AS [H_PATRIMONIO_INVERSION.V_LUGAR], 
            True AS _from0
        FROM cnxDeclara.H_PATRIMONIO_INVERSION AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ModelDeclaraStoreContainer.H_PATRIMONIO_MUEBLE.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView86()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing H_PATRIMONIO_MUEBLE
        [ModelDeclara.Store.H_PATRIMONIO_MUEBLE](T1.[H_PATRIMONIO_MUEBLE.VID_NOMBRE], T1.[H_PATRIMONIO_MUEBLE.VID_FECHA], T1.[H_PATRIMONIO_MUEBLE.VID_HOMOCLAVE], T1.[H_PATRIMONIO_MUEBLE.NID_PATRIMONIO], T1.[H_PATRIMONIO_MUEBLE.NID_HISTORICO], T1.[H_PATRIMONIO_MUEBLE.NID_TIPO], T1.[H_PATRIMONIO_MUEBLE.E_ESPECIFICACION], T1.[H_PATRIMONIO_MUEBLE.M_VALOR], T1.[H_PATRIMONIO_MUEBLE.F_ADQUISICION])
    FROM (
        SELECT 
            T.VID_NOMBRE AS [H_PATRIMONIO_MUEBLE.VID_NOMBRE], 
            T.VID_FECHA AS [H_PATRIMONIO_MUEBLE.VID_FECHA], 
            T.VID_HOMOCLAVE AS [H_PATRIMONIO_MUEBLE.VID_HOMOCLAVE], 
            T.NID_PATRIMONIO AS [H_PATRIMONIO_MUEBLE.NID_PATRIMONIO], 
            T.NID_HISTORICO AS [H_PATRIMONIO_MUEBLE.NID_HISTORICO], 
            T.NID_TIPO AS [H_PATRIMONIO_MUEBLE.NID_TIPO], 
            T.E_ESPECIFICACION AS [H_PATRIMONIO_MUEBLE.E_ESPECIFICACION], 
            T.M_VALOR AS [H_PATRIMONIO_MUEBLE.M_VALOR], 
            T.F_ADQUISICION AS [H_PATRIMONIO_MUEBLE.F_ADQUISICION], 
            True AS _from0
        FROM cnxDeclara.H_PATRIMONIO_MUEBLE AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ModelDeclaraStoreContainer.H_PATRIMONIO_TITULAR.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView87()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing H_PATRIMONIO_TITULAR
        [ModelDeclara.Store.H_PATRIMONIO_TITULAR](T1.[H_PATRIMONIO_TITULAR.VID_NOMBRE], T1.[H_PATRIMONIO_TITULAR.VID_FECHA], T1.[H_PATRIMONIO_TITULAR.VID_HOMOCLAVE], T1.[H_PATRIMONIO_TITULAR.NID_PATRIMONIO], T1.[H_PATRIMONIO_TITULAR.NID_DEPENDIENTE], T1.[H_PATRIMONIO_TITULAR.NID_HISTORICO], T1.[H_PATRIMONIO_TITULAR.L_DIF])
    FROM (
        SELECT 
            T.VID_NOMBRE AS [H_PATRIMONIO_TITULAR.VID_NOMBRE], 
            T.VID_FECHA AS [H_PATRIMONIO_TITULAR.VID_FECHA], 
            T.VID_HOMOCLAVE AS [H_PATRIMONIO_TITULAR.VID_HOMOCLAVE], 
            T.NID_PATRIMONIO AS [H_PATRIMONIO_TITULAR.NID_PATRIMONIO], 
            T.NID_DEPENDIENTE AS [H_PATRIMONIO_TITULAR.NID_DEPENDIENTE], 
            T.NID_HISTORICO AS [H_PATRIMONIO_TITULAR.NID_HISTORICO], 
            T.L_DIF AS [H_PATRIMONIO_TITULAR.L_DIF], 
            True AS _from0
        FROM cnxDeclara.H_PATRIMONIO_TITULAR AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ModelDeclaraStoreContainer.H_PATRIMONIO_VEHICULO.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView88()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing H_PATRIMONIO_VEHICULO
        [ModelDeclara.Store.H_PATRIMONIO_VEHICULO](T1.[H_PATRIMONIO_VEHICULO.VID_NOMBRE], T1.[H_PATRIMONIO_VEHICULO.VID_FECHA], T1.[H_PATRIMONIO_VEHICULO.VID_HOMOCLAVE], T1.[H_PATRIMONIO_VEHICULO.NID_PATRIMONIO], T1.[H_PATRIMONIO_VEHICULO.NID_HISTORICO], T1.[H_PATRIMONIO_VEHICULO.NID_MARCA], T1.[H_PATRIMONIO_VEHICULO.C_MODELO], T1.[H_PATRIMONIO_VEHICULO.V_DESCRIPCION], T1.[H_PATRIMONIO_VEHICULO.F_ADQUISICION], T1.[H_PATRIMONIO_VEHICULO.NID_USO], T1.[H_PATRIMONIO_VEHICULO.M_VALOR_VEHICULO], T1.[H_PATRIMONIO_VEHICULO.NID_TIPO_VEHICULO])
    FROM (
        SELECT 
            T.VID_NOMBRE AS [H_PATRIMONIO_VEHICULO.VID_NOMBRE], 
            T.VID_FECHA AS [H_PATRIMONIO_VEHICULO.VID_FECHA], 
            T.VID_HOMOCLAVE AS [H_PATRIMONIO_VEHICULO.VID_HOMOCLAVE], 
            T.NID_PATRIMONIO AS [H_PATRIMONIO_VEHICULO.NID_PATRIMONIO], 
            T.NID_HISTORICO AS [H_PATRIMONIO_VEHICULO.NID_HISTORICO], 
            T.NID_MARCA AS [H_PATRIMONIO_VEHICULO.NID_MARCA], 
            T.C_MODELO AS [H_PATRIMONIO_VEHICULO.C_MODELO], 
            T.V_DESCRIPCION AS [H_PATRIMONIO_VEHICULO.V_DESCRIPCION], 
            T.F_ADQUISICION AS [H_PATRIMONIO_VEHICULO.F_ADQUISICION], 
            T.NID_USO AS [H_PATRIMONIO_VEHICULO.NID_USO], 
            T.M_VALOR_VEHICULO AS [H_PATRIMONIO_VEHICULO.M_VALOR_VEHICULO], 
            T.NID_TIPO_VEHICULO AS [H_PATRIMONIO_VEHICULO.NID_TIPO_VEHICULO], 
            True AS _from0
        FROM cnxDeclara.H_PATRIMONIO_VEHICULO AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ModelDeclaraStoreContainer.MODIFICACION.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView89()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing MODIFICACION
        [ModelDeclara.Store.MODIFICACION](T1.[MODIFICACION.VID_NOMBRE], T1.[MODIFICACION.VID_FECHA], T1.[MODIFICACION.VID_HOMOCLAVE], T1.[MODIFICACION.NID_DECLARACION], T1.[MODIFICACION.L_PRESENTO_DEC], T1.[MODIFICACION.F_INICIO], T1.[MODIFICACION.F_FIN])
    FROM (
        SELECT 
            T.VID_NOMBRE AS [MODIFICACION.VID_NOMBRE], 
            T.VID_FECHA AS [MODIFICACION.VID_FECHA], 
            T.VID_HOMOCLAVE AS [MODIFICACION.VID_HOMOCLAVE], 
            T.NID_DECLARACION AS [MODIFICACION.NID_DECLARACION], 
            T.L_PRESENTO_DEC AS [MODIFICACION.L_PRESENTO_DEC], 
            T.F_INICIO AS [MODIFICACION.F_INICIO], 
            T.F_FIN AS [MODIFICACION.F_FIN], 
            True AS _from0
        FROM cnxDeclara.MODIFICACION AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ModelDeclaraStoreContainer.MODIFICACION_ADEUDO.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView90()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing MODIFICACION_ADEUDO
        [ModelDeclara.Store.MODIFICACION_ADEUDO](T1.[MODIFICACION_ADEUDO.VID_NOMBRE], T1.[MODIFICACION_ADEUDO.VID_FECHA], T1.[MODIFICACION_ADEUDO.VID_HOMOCLAVE], T1.[MODIFICACION_ADEUDO.NID_DECLARACION], T1.[MODIFICACION_ADEUDO.NID_PATRIMONIO], T1.[MODIFICACION_ADEUDO.M_PAGOS], T1.[MODIFICACION_ADEUDO.M_SALDOS], T1.[MODIFICACION_ADEUDO.L_CANCELADO], T1.[MODIFICACION_ADEUDO.L_MODIFICADO])
    FROM (
        SELECT 
            T.VID_NOMBRE AS [MODIFICACION_ADEUDO.VID_NOMBRE], 
            T.VID_FECHA AS [MODIFICACION_ADEUDO.VID_FECHA], 
            T.VID_HOMOCLAVE AS [MODIFICACION_ADEUDO.VID_HOMOCLAVE], 
            T.NID_DECLARACION AS [MODIFICACION_ADEUDO.NID_DECLARACION], 
            T.NID_PATRIMONIO AS [MODIFICACION_ADEUDO.NID_PATRIMONIO], 
            T.M_PAGOS AS [MODIFICACION_ADEUDO.M_PAGOS], 
            T.M_SALDOS AS [MODIFICACION_ADEUDO.M_SALDOS], 
            T.L_CANCELADO AS [MODIFICACION_ADEUDO.L_CANCELADO], 
            T.L_MODIFICADO AS [MODIFICACION_ADEUDO.L_MODIFICADO], 
            True AS _from0
        FROM cnxDeclara.MODIFICACION_ADEUDO AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ModelDeclaraStoreContainer.MODIFICACION_ADEUDO_TITULAR.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView91()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing MODIFICACION_ADEUDO_TITULAR
        [ModelDeclara.Store.MODIFICACION_ADEUDO_TITULAR](T1.[MODIFICACION_ADEUDO_TITULAR.VID_NOMBRE], T1.[MODIFICACION_ADEUDO_TITULAR.VID_FECHA], T1.[MODIFICACION_ADEUDO_TITULAR.VID_HOMOCLAVE], T1.[MODIFICACION_ADEUDO_TITULAR.NID_DECLARACION], T1.[MODIFICACION_ADEUDO_TITULAR.NID_PATRIMONIO], T1.[MODIFICACION_ADEUDO_TITULAR.NID_DEPENDIENTE], T1.[MODIFICACION_ADEUDO_TITULAR.L_DIF])
    FROM (
        SELECT 
            T.VID_NOMBRE AS [MODIFICACION_ADEUDO_TITULAR.VID_NOMBRE], 
            T.VID_FECHA AS [MODIFICACION_ADEUDO_TITULAR.VID_FECHA], 
            T.VID_HOMOCLAVE AS [MODIFICACION_ADEUDO_TITULAR.VID_HOMOCLAVE], 
            T.NID_DECLARACION AS [MODIFICACION_ADEUDO_TITULAR.NID_DECLARACION], 
            T.NID_PATRIMONIO AS [MODIFICACION_ADEUDO_TITULAR.NID_PATRIMONIO], 
            T.NID_DEPENDIENTE AS [MODIFICACION_ADEUDO_TITULAR.NID_DEPENDIENTE], 
            T.L_DIF AS [MODIFICACION_ADEUDO_TITULAR.L_DIF], 
            True AS _from0
        FROM cnxDeclara.MODIFICACION_ADEUDO_TITULAR AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ModelDeclaraStoreContainer.MODIFICACION_BAJA.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView92()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing MODIFICACION_BAJA
        [ModelDeclara.Store.MODIFICACION_BAJA](T1.[MODIFICACION_BAJA.VID_NOMBRE], T1.[MODIFICACION_BAJA.VID_FECHA], T1.[MODIFICACION_BAJA.VID_HOMOCLAVE], T1.[MODIFICACION_BAJA.NID_DECLARACION], T1.[MODIFICACION_BAJA.NID_PATRIMONIO], T1.[MODIFICACION_BAJA.NID_TIPO_BAJA], T1.[MODIFICACION_BAJA.F_BAJA])
    FROM (
        SELECT 
            T.VID_NOMBRE AS [MODIFICACION_BAJA.VID_NOMBRE], 
            T.VID_FECHA AS [MODIFICACION_BAJA.VID_FECHA], 
            T.VID_HOMOCLAVE AS [MODIFICACION_BAJA.VID_HOMOCLAVE], 
            T.NID_DECLARACION AS [MODIFICACION_BAJA.NID_DECLARACION], 
            T.NID_PATRIMONIO AS [MODIFICACION_BAJA.NID_PATRIMONIO], 
            T.NID_TIPO_BAJA AS [MODIFICACION_BAJA.NID_TIPO_BAJA], 
            T.F_BAJA AS [MODIFICACION_BAJA.F_BAJA], 
            True AS _from0
        FROM cnxDeclara.MODIFICACION_BAJA AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ModelDeclaraStoreContainer.MODIFICACION_BAJA_SINIESTRO.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView93()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing MODIFICACION_BAJA_SINIESTRO
        [ModelDeclara.Store.MODIFICACION_BAJA_SINIESTRO](T1.[MODIFICACION_BAJA_SINIESTRO.VID_NOMBRE], T1.[MODIFICACION_BAJA_SINIESTRO.VID_FECHA], T1.[MODIFICACION_BAJA_SINIESTRO.VID_HOMOCLAVE], T1.[MODIFICACION_BAJA_SINIESTRO.NID_DECLARACION], T1.[MODIFICACION_BAJA_SINIESTRO.NID_PATRIMONIO], T1.[MODIFICACION_BAJA_SINIESTRO.L_POLIZA], T1.[MODIFICACION_BAJA_SINIESTRO.M_RECUPERADO])
    FROM (
        SELECT 
            T.VID_NOMBRE AS [MODIFICACION_BAJA_SINIESTRO.VID_NOMBRE], 
            T.VID_FECHA AS [MODIFICACION_BAJA_SINIESTRO.VID_FECHA], 
            T.VID_HOMOCLAVE AS [MODIFICACION_BAJA_SINIESTRO.VID_HOMOCLAVE], 
            T.NID_DECLARACION AS [MODIFICACION_BAJA_SINIESTRO.NID_DECLARACION], 
            T.NID_PATRIMONIO AS [MODIFICACION_BAJA_SINIESTRO.NID_PATRIMONIO], 
            T.L_POLIZA AS [MODIFICACION_BAJA_SINIESTRO.L_POLIZA], 
            T.M_RECUPERADO AS [MODIFICACION_BAJA_SINIESTRO.M_RECUPERADO], 
            True AS _from0
        FROM cnxDeclara.MODIFICACION_BAJA_SINIESTRO AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ModelDeclaraStoreContainer.MODIFICACION_BAJA_VENTA.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView94()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing MODIFICACION_BAJA_VENTA
        [ModelDeclara.Store.MODIFICACION_BAJA_VENTA](T1.[MODIFICACION_BAJA_VENTA.VID_NOMBRE], T1.[MODIFICACION_BAJA_VENTA.VID_FECHA], T1.[MODIFICACION_BAJA_VENTA.VID_HOMOCLAVE], T1.[MODIFICACION_BAJA_VENTA.NID_DECLARACION], T1.[MODIFICACION_BAJA_VENTA.NID_PATRIMONIO], T1.[MODIFICACION_BAJA_VENTA.NID_TIPO_VENTA], T1.[MODIFICACION_BAJA_VENTA.M_IMPORTE_VENTA], T1.[MODIFICACION_BAJA_VENTA.E_BENIFICIARIO])
    FROM (
        SELECT 
            T.VID_NOMBRE AS [MODIFICACION_BAJA_VENTA.VID_NOMBRE], 
            T.VID_FECHA AS [MODIFICACION_BAJA_VENTA.VID_FECHA], 
            T.VID_HOMOCLAVE AS [MODIFICACION_BAJA_VENTA.VID_HOMOCLAVE], 
            T.NID_DECLARACION AS [MODIFICACION_BAJA_VENTA.NID_DECLARACION], 
            T.NID_PATRIMONIO AS [MODIFICACION_BAJA_VENTA.NID_PATRIMONIO], 
            T.NID_TIPO_VENTA AS [MODIFICACION_BAJA_VENTA.NID_TIPO_VENTA], 
            T.M_IMPORTE_VENTA AS [MODIFICACION_BAJA_VENTA.M_IMPORTE_VENTA], 
            T.E_BENIFICIARIO AS [MODIFICACION_BAJA_VENTA.E_BENIFICIARIO], 
            True AS _from0
        FROM cnxDeclara.MODIFICACION_BAJA_VENTA AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ModelDeclaraStoreContainer.MODIFICACION_DONACION.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView95()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing MODIFICACION_DONACION
        [ModelDeclara.Store.MODIFICACION_DONACION](T1.[MODIFICACION_DONACION.VID_NOMBRE], T1.[MODIFICACION_DONACION.VID_FECHA], T1.[MODIFICACION_DONACION.VID_HOMOCLAVE], T1.[MODIFICACION_DONACION.NID_DECLARACION], T1.[MODIFICACION_DONACION.NID_PATRIMONIO], T1.[MODIFICACION_DONACION.E_ESPECIFICA], T1.[MODIFICACION_DONACION.E_BENIFICIARIO])
    FROM (
        SELECT 
            T.VID_NOMBRE AS [MODIFICACION_DONACION.VID_NOMBRE], 
            T.VID_FECHA AS [MODIFICACION_DONACION.VID_FECHA], 
            T.VID_HOMOCLAVE AS [MODIFICACION_DONACION.VID_HOMOCLAVE], 
            T.NID_DECLARACION AS [MODIFICACION_DONACION.NID_DECLARACION], 
            T.NID_PATRIMONIO AS [MODIFICACION_DONACION.NID_PATRIMONIO], 
            T.E_ESPECIFICA AS [MODIFICACION_DONACION.E_ESPECIFICA], 
            T.E_BENIFICIARIO AS [MODIFICACION_DONACION.E_BENIFICIARIO], 
            True AS _from0
        FROM cnxDeclara.MODIFICACION_DONACION AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ModelDeclaraStoreContainer.MODIFICACION_GASTO.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView96()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing MODIFICACION_GASTO
        [ModelDeclara.Store.MODIFICACION_GASTO](T1.[MODIFICACION_GASTO.VID_NOMBRE], T1.[MODIFICACION_GASTO.VID_FECHA], T1.[MODIFICACION_GASTO.VID_HOMOCLAVE], T1.[MODIFICACION_GASTO.NID_DECLARACION], T1.[MODIFICACION_GASTO.NID_GASTO], T1.[MODIFICACION_GASTO.NID_TIPO_GASTO], T1.[MODIFICACION_GASTO.V_GASTO], T1.[MODIFICACION_GASTO.M_GASTO], T1.[MODIFICACION_GASTO.L_AUTOGENERADO], T1.[MODIFICACION_GASTO.NID_PATRIMONIO_ASC])
    FROM (
        SELECT 
            T.VID_NOMBRE AS [MODIFICACION_GASTO.VID_NOMBRE], 
            T.VID_FECHA AS [MODIFICACION_GASTO.VID_FECHA], 
            T.VID_HOMOCLAVE AS [MODIFICACION_GASTO.VID_HOMOCLAVE], 
            T.NID_DECLARACION AS [MODIFICACION_GASTO.NID_DECLARACION], 
            T.NID_GASTO AS [MODIFICACION_GASTO.NID_GASTO], 
            T.NID_TIPO_GASTO AS [MODIFICACION_GASTO.NID_TIPO_GASTO], 
            T.V_GASTO AS [MODIFICACION_GASTO.V_GASTO], 
            T.M_GASTO AS [MODIFICACION_GASTO.M_GASTO], 
            T.L_AUTOGENERADO AS [MODIFICACION_GASTO.L_AUTOGENERADO], 
            T.NID_PATRIMONIO_ASC AS [MODIFICACION_GASTO.NID_PATRIMONIO_ASC], 
            True AS _from0
        FROM cnxDeclara.MODIFICACION_GASTO AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ModelDeclaraStoreContainer.MODIFICACION_INGRESOS.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView97()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing MODIFICACION_INGRESOS
        [ModelDeclara.Store.MODIFICACION_INGRESOS](T1.[MODIFICACION_INGRESOS.VID_NOMBRE], T1.[MODIFICACION_INGRESOS.VID_FECHA], T1.[MODIFICACION_INGRESOS.VID_HOMOCLAVE], T1.[MODIFICACION_INGRESOS.NID_DECLARACION], T1.[MODIFICACION_INGRESOS.NID_INGRESO], T1.[MODIFICACION_INGRESOS.E_ESPECIFICAR], T1.[MODIFICACION_INGRESOS.E_ESPECIFICAR_COMPLEMENTO], T1.[MODIFICACION_INGRESOS.M_INGRESO], T1.[MODIFICACION_INGRESOS.C_TITULAR])
    FROM (
        SELECT 
            T.VID_NOMBRE AS [MODIFICACION_INGRESOS.VID_NOMBRE], 
            T.VID_FECHA AS [MODIFICACION_INGRESOS.VID_FECHA], 
            T.VID_HOMOCLAVE AS [MODIFICACION_INGRESOS.VID_HOMOCLAVE], 
            T.NID_DECLARACION AS [MODIFICACION_INGRESOS.NID_DECLARACION], 
            T.NID_INGRESO AS [MODIFICACION_INGRESOS.NID_INGRESO], 
            T.E_ESPECIFICAR AS [MODIFICACION_INGRESOS.E_ESPECIFICAR], 
            T.E_ESPECIFICAR_COMPLEMENTO AS [MODIFICACION_INGRESOS.E_ESPECIFICAR_COMPLEMENTO], 
            T.M_INGRESO AS [MODIFICACION_INGRESOS.M_INGRESO], 
            T.C_TITULAR AS [MODIFICACION_INGRESOS.C_TITULAR], 
            True AS _from0
        FROM cnxDeclara.MODIFICACION_INGRESOS AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ModelDeclaraStoreContainer.MODIFICACION_INMUEBLE.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView98()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing MODIFICACION_INMUEBLE
        [ModelDeclara.Store.MODIFICACION_INMUEBLE](T1.[MODIFICACION_INMUEBLE.VID_NOMBRE], T1.[MODIFICACION_INMUEBLE.VID_FECHA], T1.[MODIFICACION_INMUEBLE.VID_HOMOCLAVE], T1.[MODIFICACION_INMUEBLE.NID_DECLARACION], T1.[MODIFICACION_INMUEBLE.NID_PATRIMONIO], T1.[MODIFICACION_INMUEBLE.NID_TIPO], T1.[MODIFICACION_INMUEBLE.F_ADQUISICION], T1.[MODIFICACION_INMUEBLE.NID_USO], T1.[MODIFICACION_INMUEBLE.E_UBICACION], T1.[MODIFICACION_INMUEBLE.N_TERRENO], T1.[MODIFICACION_INMUEBLE.N_CONSTRUCCION], T1.[MODIFICACION_INMUEBLE.M_VALOR_INMUEBLE], T1.[MODIFICACION_INMUEBLE.L_MODIFICADO])
    FROM (
        SELECT 
            T.VID_NOMBRE AS [MODIFICACION_INMUEBLE.VID_NOMBRE], 
            T.VID_FECHA AS [MODIFICACION_INMUEBLE.VID_FECHA], 
            T.VID_HOMOCLAVE AS [MODIFICACION_INMUEBLE.VID_HOMOCLAVE], 
            T.NID_DECLARACION AS [MODIFICACION_INMUEBLE.NID_DECLARACION], 
            T.NID_PATRIMONIO AS [MODIFICACION_INMUEBLE.NID_PATRIMONIO], 
            T.NID_TIPO AS [MODIFICACION_INMUEBLE.NID_TIPO], 
            T.F_ADQUISICION AS [MODIFICACION_INMUEBLE.F_ADQUISICION], 
            T.NID_USO AS [MODIFICACION_INMUEBLE.NID_USO], 
            T.E_UBICACION AS [MODIFICACION_INMUEBLE.E_UBICACION], 
            T.N_TERRENO AS [MODIFICACION_INMUEBLE.N_TERRENO], 
            T.N_CONSTRUCCION AS [MODIFICACION_INMUEBLE.N_CONSTRUCCION], 
            T.M_VALOR_INMUEBLE AS [MODIFICACION_INMUEBLE.M_VALOR_INMUEBLE], 
            T.L_MODIFICADO AS [MODIFICACION_INMUEBLE.L_MODIFICADO], 
            True AS _from0
        FROM cnxDeclara.MODIFICACION_INMUEBLE AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ModelDeclaraStoreContainer.MODIFICACION_INMUEBLE_ADEUDO.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView99()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing MODIFICACION_INMUEBLE_ADEUDO
        [ModelDeclara.Store.MODIFICACION_INMUEBLE_ADEUDO](T1.[MODIFICACION_INMUEBLE_ADEUDO.VID_NOMBRE], T1.[MODIFICACION_INMUEBLE_ADEUDO.VID_FECHA], T1.[MODIFICACION_INMUEBLE_ADEUDO.VID_HOMOCLAVE], T1.[MODIFICACION_INMUEBLE_ADEUDO.NID_DECLARACION], T1.[MODIFICACION_INMUEBLE_ADEUDO.NID_PATRIMONIO], T1.[MODIFICACION_INMUEBLE_ADEUDO.NID_PATRIMONIO_ADEUDO], T1.[MODIFICACION_INMUEBLE_ADEUDO.L_DIF])
    FROM (
        SELECT 
            T.VID_NOMBRE AS [MODIFICACION_INMUEBLE_ADEUDO.VID_NOMBRE], 
            T.VID_FECHA AS [MODIFICACION_INMUEBLE_ADEUDO.VID_FECHA], 
            T.VID_HOMOCLAVE AS [MODIFICACION_INMUEBLE_ADEUDO.VID_HOMOCLAVE], 
            T.NID_DECLARACION AS [MODIFICACION_INMUEBLE_ADEUDO.NID_DECLARACION], 
            T.NID_PATRIMONIO AS [MODIFICACION_INMUEBLE_ADEUDO.NID_PATRIMONIO], 
            T.NID_PATRIMONIO_ADEUDO AS [MODIFICACION_INMUEBLE_ADEUDO.NID_PATRIMONIO_ADEUDO], 
            T.L_DIF AS [MODIFICACION_INMUEBLE_ADEUDO.L_DIF], 
            True AS _from0
        FROM cnxDeclara.MODIFICACION_INMUEBLE_ADEUDO AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ModelDeclaraStoreContainer.MODIFICACION_INMUEBLE_AMPLIACION.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView100()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing MODIFICACION_INMUEBLE_AMPLIACION
        [ModelDeclara.Store.MODIFICACION_INMUEBLE_AMPLIACION](T1.[MODIFICACION_INMUEBLE_AMPLIACION.VID_NOMBRE], T1.[MODIFICACION_INMUEBLE_AMPLIACION.VID_FECHA], T1.[MODIFICACION_INMUEBLE_AMPLIACION.VID_HOMOCLAVE], T1.[MODIFICACION_INMUEBLE_AMPLIACION.NID_DECLARACION], T1.[MODIFICACION_INMUEBLE_AMPLIACION.NID_PATRIMONIO], T1.[MODIFICACION_INMUEBLE_AMPLIACION.NID_AMPLIACION], T1.[MODIFICACION_INMUEBLE_AMPLIACION.F_AMPLIACION], T1.[MODIFICACION_INMUEBLE_AMPLIACION.M_AMPLIACION], T1.[MODIFICACION_INMUEBLE_AMPLIACION.N_AMPLIACION])
    FROM (
        SELECT 
            T.VID_NOMBRE AS [MODIFICACION_INMUEBLE_AMPLIACION.VID_NOMBRE], 
            T.VID_FECHA AS [MODIFICACION_INMUEBLE_AMPLIACION.VID_FECHA], 
            T.VID_HOMOCLAVE AS [MODIFICACION_INMUEBLE_AMPLIACION.VID_HOMOCLAVE], 
            T.NID_DECLARACION AS [MODIFICACION_INMUEBLE_AMPLIACION.NID_DECLARACION], 
            T.NID_PATRIMONIO AS [MODIFICACION_INMUEBLE_AMPLIACION.NID_PATRIMONIO], 
            T.NID_AMPLIACION AS [MODIFICACION_INMUEBLE_AMPLIACION.NID_AMPLIACION], 
            T.F_AMPLIACION AS [MODIFICACION_INMUEBLE_AMPLIACION.F_AMPLIACION], 
            T.M_AMPLIACION AS [MODIFICACION_INMUEBLE_AMPLIACION.M_AMPLIACION], 
            T.N_AMPLIACION AS [MODIFICACION_INMUEBLE_AMPLIACION.N_AMPLIACION], 
            True AS _from0
        FROM cnxDeclara.MODIFICACION_INMUEBLE_AMPLIACION AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ModelDeclaraStoreContainer.MODIFICACION_INMUEBLE_CONSTRUCCION.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView101()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing MODIFICACION_INMUEBLE_CONSTRUCCION
        [ModelDeclara.Store.MODIFICACION_INMUEBLE_CONSTRUCCION](T1.[MODIFICACION_INMUEBLE_CONSTRUCCION.VID_NOMBRE], T1.[MODIFICACION_INMUEBLE_CONSTRUCCION.VID_FECHA], T1.[MODIFICACION_INMUEBLE_CONSTRUCCION.VID_HOMOCLAVE], T1.[MODIFICACION_INMUEBLE_CONSTRUCCION.NID_DECLARACION], T1.[MODIFICACION_INMUEBLE_CONSTRUCCION.NID_PATRIMONIO], T1.[MODIFICACION_INMUEBLE_CONSTRUCCION.NID_CONSTRUCCION], T1.[MODIFICACION_INMUEBLE_CONSTRUCCION.NID_TIPO], T1.[MODIFICACION_INMUEBLE_CONSTRUCCION.F_CONSTRUCCION], T1.[MODIFICACION_INMUEBLE_CONSTRUCCION.M_CONSTRUCCION], T1.[MODIFICACION_INMUEBLE_CONSTRUCCION.M_VALOR_FINAL], T1.[MODIFICACION_INMUEBLE_CONSTRUCCION.NID_USO], T1.[MODIFICACION_INMUEBLE_CONSTRUCCION.E_UBICACION], T1.[MODIFICACION_INMUEBLE_CONSTRUCCION.N_CONSTRUCCION], T1.[MODIFICACION_INMUEBLE_CONSTRUCCION.N_TERRENO], T1.[MODIFICACION_INMUEBLE_CONSTRUCCION.NID_PATRIMONIO_NUEVO])
    FROM (
        SELECT 
            T.VID_NOMBRE AS [MODIFICACION_INMUEBLE_CONSTRUCCION.VID_NOMBRE], 
            T.VID_FECHA AS [MODIFICACION_INMUEBLE_CONSTRUCCION.VID_FECHA], 
            T.VID_HOMOCLAVE AS [MODIFICACION_INMUEBLE_CONSTRUCCION.VID_HOMOCLAVE], 
            T.NID_DECLARACION AS [MODIFICACION_INMUEBLE_CONSTRUCCION.NID_DECLARACION], 
            T.NID_PATRIMONIO AS [MODIFICACION_INMUEBLE_CONSTRUCCION.NID_PATRIMONIO], 
            T.NID_CONSTRUCCION AS [MODIFICACION_INMUEBLE_CONSTRUCCION.NID_CONSTRUCCION], 
            T.NID_TIPO AS [MODIFICACION_INMUEBLE_CONSTRUCCION.NID_TIPO], 
            T.F_CONSTRUCCION AS [MODIFICACION_INMUEBLE_CONSTRUCCION.F_CONSTRUCCION], 
            T.M_CONSTRUCCION AS [MODIFICACION_INMUEBLE_CONSTRUCCION.M_CONSTRUCCION], 
            T.M_VALOR_FINAL AS [MODIFICACION_INMUEBLE_CONSTRUCCION.M_VALOR_FINAL], 
            T.NID_USO AS [MODIFICACION_INMUEBLE_CONSTRUCCION.NID_USO], 
            T.E_UBICACION AS [MODIFICACION_INMUEBLE_CONSTRUCCION.E_UBICACION], 
            T.N_CONSTRUCCION AS [MODIFICACION_INMUEBLE_CONSTRUCCION.N_CONSTRUCCION], 
            T.N_TERRENO AS [MODIFICACION_INMUEBLE_CONSTRUCCION.N_TERRENO], 
            T.NID_PATRIMONIO_NUEVO AS [MODIFICACION_INMUEBLE_CONSTRUCCION.NID_PATRIMONIO_NUEVO], 
            True AS _from0
        FROM cnxDeclara.MODIFICACION_INMUEBLE_CONSTRUCCION AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ModelDeclaraStoreContainer.MODIFICACION_INMUEBLE_TITULA.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView102()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing MODIFICACION_INMUEBLE_TITULA
        [ModelDeclara.Store.MODIFICACION_INMUEBLE_TITULA](T1.[MODIFICACION_INMUEBLE_TITULA.VID_NOMBRE], T1.[MODIFICACION_INMUEBLE_TITULA.VID_FECHA], T1.[MODIFICACION_INMUEBLE_TITULA.VID_HOMOCLAVE], T1.[MODIFICACION_INMUEBLE_TITULA.NID_DECLARACION], T1.[MODIFICACION_INMUEBLE_TITULA.NID_PATRIMONIO], T1.[MODIFICACION_INMUEBLE_TITULA.NID_DEPENDIENTE], T1.[MODIFICACION_INMUEBLE_TITULA.L_DIF])
    FROM (
        SELECT 
            T.VID_NOMBRE AS [MODIFICACION_INMUEBLE_TITULA.VID_NOMBRE], 
            T.VID_FECHA AS [MODIFICACION_INMUEBLE_TITULA.VID_FECHA], 
            T.VID_HOMOCLAVE AS [MODIFICACION_INMUEBLE_TITULA.VID_HOMOCLAVE], 
            T.NID_DECLARACION AS [MODIFICACION_INMUEBLE_TITULA.NID_DECLARACION], 
            T.NID_PATRIMONIO AS [MODIFICACION_INMUEBLE_TITULA.NID_PATRIMONIO], 
            T.NID_DEPENDIENTE AS [MODIFICACION_INMUEBLE_TITULA.NID_DEPENDIENTE], 
            T.L_DIF AS [MODIFICACION_INMUEBLE_TITULA.L_DIF], 
            True AS _from0
        FROM cnxDeclara.MODIFICACION_INMUEBLE_TITULA AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ModelDeclaraStoreContainer.MODIFICACION_INVERSION.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView103()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing MODIFICACION_INVERSION
        [ModelDeclara.Store.MODIFICACION_INVERSION](T1.[MODIFICACION_INVERSION.VID_NOMBRE], T1.[MODIFICACION_INVERSION.VID_FECHA], T1.[MODIFICACION_INVERSION.VID_HOMOCLAVE], T1.[MODIFICACION_INVERSION.NID_DECLARACION], T1.[MODIFICACION_INVERSION.NID_PATRIMONIO], T1.[MODIFICACION_INVERSION.M_SALDO_ANTERIOR], T1.[MODIFICACION_INVERSION.M_SALDO_ACTUAL], T1.[MODIFICACION_INVERSION.L_CANCELADA], T1.[MODIFICACION_INVERSION.L_MODIFICADA])
    FROM (
        SELECT 
            T.VID_NOMBRE AS [MODIFICACION_INVERSION.VID_NOMBRE], 
            T.VID_FECHA AS [MODIFICACION_INVERSION.VID_FECHA], 
            T.VID_HOMOCLAVE AS [MODIFICACION_INVERSION.VID_HOMOCLAVE], 
            T.NID_DECLARACION AS [MODIFICACION_INVERSION.NID_DECLARACION], 
            T.NID_PATRIMONIO AS [MODIFICACION_INVERSION.NID_PATRIMONIO], 
            T.M_SALDO_ANTERIOR AS [MODIFICACION_INVERSION.M_SALDO_ANTERIOR], 
            T.M_SALDO_ACTUAL AS [MODIFICACION_INVERSION.M_SALDO_ACTUAL], 
            T.L_CANCELADA AS [MODIFICACION_INVERSION.L_CANCELADA], 
            T.L_MODIFICADA AS [MODIFICACION_INVERSION.L_MODIFICADA], 
            True AS _from0
        FROM cnxDeclara.MODIFICACION_INVERSION AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ModelDeclaraStoreContainer.MODIFICACION_INVERSION_TITU.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView104()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing MODIFICACION_INVERSION_TITU
        [ModelDeclara.Store.MODIFICACION_INVERSION_TITU](T1.[MODIFICACION_INVERSION_TITU.VID_NOMBRE], T1.[MODIFICACION_INVERSION_TITU.VID_FECHA], T1.[MODIFICACION_INVERSION_TITU.VID_HOMOCLAVE], T1.[MODIFICACION_INVERSION_TITU.NID_DECLARACION], T1.[MODIFICACION_INVERSION_TITU.NID_PATRIMONIO], T1.[MODIFICACION_INVERSION_TITU.NID_DEPENDIENTE], T1.[MODIFICACION_INVERSION_TITU.L_DIF])
    FROM (
        SELECT 
            T.VID_NOMBRE AS [MODIFICACION_INVERSION_TITU.VID_NOMBRE], 
            T.VID_FECHA AS [MODIFICACION_INVERSION_TITU.VID_FECHA], 
            T.VID_HOMOCLAVE AS [MODIFICACION_INVERSION_TITU.VID_HOMOCLAVE], 
            T.NID_DECLARACION AS [MODIFICACION_INVERSION_TITU.NID_DECLARACION], 
            T.NID_PATRIMONIO AS [MODIFICACION_INVERSION_TITU.NID_PATRIMONIO], 
            T.NID_DEPENDIENTE AS [MODIFICACION_INVERSION_TITU.NID_DEPENDIENTE], 
            T.L_DIF AS [MODIFICACION_INVERSION_TITU.L_DIF], 
            True AS _from0
        FROM cnxDeclara.MODIFICACION_INVERSION_TITU AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ModelDeclaraStoreContainer.MODIFICACION_MUEBLE.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView105()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing MODIFICACION_MUEBLE
        [ModelDeclara.Store.MODIFICACION_MUEBLE](T1.[MODIFICACION_MUEBLE.VID_NOMBRE], T1.[MODIFICACION_MUEBLE.VID_FECHA], T1.[MODIFICACION_MUEBLE.VID_HOMOCLAVE], T1.[MODIFICACION_MUEBLE.NID_DECLARACION], T1.[MODIFICACION_MUEBLE.NID_PATRIMONIO], T1.[MODIFICACION_MUEBLE.NID_TIPO], T1.[MODIFICACION_MUEBLE.E_ESPECIFICACION], T1.[MODIFICACION_MUEBLE.M_VALOR], T1.[MODIFICACION_MUEBLE.L_MODIFICADO], T1.[MODIFICACION_MUEBLE.F_ADQUISICION])
    FROM (
        SELECT 
            T.VID_NOMBRE AS [MODIFICACION_MUEBLE.VID_NOMBRE], 
            T.VID_FECHA AS [MODIFICACION_MUEBLE.VID_FECHA], 
            T.VID_HOMOCLAVE AS [MODIFICACION_MUEBLE.VID_HOMOCLAVE], 
            T.NID_DECLARACION AS [MODIFICACION_MUEBLE.NID_DECLARACION], 
            T.NID_PATRIMONIO AS [MODIFICACION_MUEBLE.NID_PATRIMONIO], 
            T.NID_TIPO AS [MODIFICACION_MUEBLE.NID_TIPO], 
            T.E_ESPECIFICACION AS [MODIFICACION_MUEBLE.E_ESPECIFICACION], 
            T.M_VALOR AS [MODIFICACION_MUEBLE.M_VALOR], 
            T.L_MODIFICADO AS [MODIFICACION_MUEBLE.L_MODIFICADO], 
            T.F_ADQUISICION AS [MODIFICACION_MUEBLE.F_ADQUISICION], 
            True AS _from0
        FROM cnxDeclara.MODIFICACION_MUEBLE AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ModelDeclaraStoreContainer.MODIFICACION_MUEBLE_TITULAR.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView106()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing MODIFICACION_MUEBLE_TITULAR
        [ModelDeclara.Store.MODIFICACION_MUEBLE_TITULAR](T1.[MODIFICACION_MUEBLE_TITULAR.VID_NOMBRE], T1.[MODIFICACION_MUEBLE_TITULAR.VID_FECHA], T1.[MODIFICACION_MUEBLE_TITULAR.VID_HOMOCLAVE], T1.[MODIFICACION_MUEBLE_TITULAR.NID_DECLARACION], T1.[MODIFICACION_MUEBLE_TITULAR.NID_PATRIMONIO], T1.[MODIFICACION_MUEBLE_TITULAR.NID_DEPENDIENTE], T1.[MODIFICACION_MUEBLE_TITULAR.L_DIF])
    FROM (
        SELECT 
            T.VID_NOMBRE AS [MODIFICACION_MUEBLE_TITULAR.VID_NOMBRE], 
            T.VID_FECHA AS [MODIFICACION_MUEBLE_TITULAR.VID_FECHA], 
            T.VID_HOMOCLAVE AS [MODIFICACION_MUEBLE_TITULAR.VID_HOMOCLAVE], 
            T.NID_DECLARACION AS [MODIFICACION_MUEBLE_TITULAR.NID_DECLARACION], 
            T.NID_PATRIMONIO AS [MODIFICACION_MUEBLE_TITULAR.NID_PATRIMONIO], 
            T.NID_DEPENDIENTE AS [MODIFICACION_MUEBLE_TITULAR.NID_DEPENDIENTE], 
            T.L_DIF AS [MODIFICACION_MUEBLE_TITULAR.L_DIF], 
            True AS _from0
        FROM cnxDeclara.MODIFICACION_MUEBLE_TITULAR AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ModelDeclaraStoreContainer.MODIFICACION_TARJETA.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView107()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing MODIFICACION_TARJETA
        [ModelDeclara.Store.MODIFICACION_TARJETA](T1.[MODIFICACION_TARJETA.VID_NOMBRE], T1.[MODIFICACION_TARJETA.VID_FECHA], T1.[MODIFICACION_TARJETA.VID_HOMOCLAVE], T1.[MODIFICACION_TARJETA.NID_DECLARACION], T1.[MODIFICACION_TARJETA.E_NUMERO], T1.[MODIFICACION_TARJETA.NID_INSTITUCION], T1.[MODIFICACION_TARJETA.V_NUMERO_CORTO], T1.[MODIFICACION_TARJETA.M_PAGOS], T1.[MODIFICACION_TARJETA.M_SALDO], T1.[MODIFICACION_TARJETA.E_NUMERO_ASOCIACION], T1.[MODIFICACION_TARJETA.L_ACTIVA])
    FROM (
        SELECT 
            T.VID_NOMBRE AS [MODIFICACION_TARJETA.VID_NOMBRE], 
            T.VID_FECHA AS [MODIFICACION_TARJETA.VID_FECHA], 
            T.VID_HOMOCLAVE AS [MODIFICACION_TARJETA.VID_HOMOCLAVE], 
            T.NID_DECLARACION AS [MODIFICACION_TARJETA.NID_DECLARACION], 
            T.E_NUMERO AS [MODIFICACION_TARJETA.E_NUMERO], 
            T.NID_INSTITUCION AS [MODIFICACION_TARJETA.NID_INSTITUCION], 
            T.V_NUMERO_CORTO AS [MODIFICACION_TARJETA.V_NUMERO_CORTO], 
            T.M_PAGOS AS [MODIFICACION_TARJETA.M_PAGOS], 
            T.M_SALDO AS [MODIFICACION_TARJETA.M_SALDO], 
            T.E_NUMERO_ASOCIACION AS [MODIFICACION_TARJETA.E_NUMERO_ASOCIACION], 
            T.L_ACTIVA AS [MODIFICACION_TARJETA.L_ACTIVA], 
            True AS _from0
        FROM cnxDeclara.MODIFICACION_TARJETA AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ModelDeclaraStoreContainer.MODIFICACION_TARJETA_TITU.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView108()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing MODIFICACION_TARJETA_TITU
        [ModelDeclara.Store.MODIFICACION_TARJETA_TITU](T1.[MODIFICACION_TARJETA_TITU.VID_NOMBRE], T1.[MODIFICACION_TARJETA_TITU.VID_FECHA], T1.[MODIFICACION_TARJETA_TITU.VID_HOMOCLAVE], T1.[MODIFICACION_TARJETA_TITU.NID_DECLARACION], T1.[MODIFICACION_TARJETA_TITU.E_NUMERO], T1.[MODIFICACION_TARJETA_TITU.NID_DEPENDIENTE], T1.[MODIFICACION_TARJETA_TITU.L_DIF])
    FROM (
        SELECT 
            T.VID_NOMBRE AS [MODIFICACION_TARJETA_TITU.VID_NOMBRE], 
            T.VID_FECHA AS [MODIFICACION_TARJETA_TITU.VID_FECHA], 
            T.VID_HOMOCLAVE AS [MODIFICACION_TARJETA_TITU.VID_HOMOCLAVE], 
            T.NID_DECLARACION AS [MODIFICACION_TARJETA_TITU.NID_DECLARACION], 
            T.E_NUMERO AS [MODIFICACION_TARJETA_TITU.E_NUMERO], 
            T.NID_DEPENDIENTE AS [MODIFICACION_TARJETA_TITU.NID_DEPENDIENTE], 
            T.L_DIF AS [MODIFICACION_TARJETA_TITU.L_DIF], 
            True AS _from0
        FROM cnxDeclara.MODIFICACION_TARJETA_TITU AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ModelDeclaraStoreContainer.MODIFICACION_VEHICULO.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView109()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing MODIFICACION_VEHICULO
        [ModelDeclara.Store.MODIFICACION_VEHICULO](T1.[MODIFICACION_VEHICULO.VID_NOMBRE], T1.[MODIFICACION_VEHICULO.VID_FECHA], T1.[MODIFICACION_VEHICULO.VID_HOMOCLAVE], T1.[MODIFICACION_VEHICULO.NID_DECLARACION], T1.[MODIFICACION_VEHICULO.NID_PATRIMONIO], T1.[MODIFICACION_VEHICULO.NID_MARCA], T1.[MODIFICACION_VEHICULO.C_MODELO], T1.[MODIFICACION_VEHICULO.V_DESCRIPCION], T1.[MODIFICACION_VEHICULO.F_ADQUISICION], T1.[MODIFICACION_VEHICULO.NID_USO], T1.[MODIFICACION_VEHICULO.M_VALOR_VEHICULO], T1.[MODIFICACION_VEHICULO.L_MODIFICADO])
    FROM (
        SELECT 
            T.VID_NOMBRE AS [MODIFICACION_VEHICULO.VID_NOMBRE], 
            T.VID_FECHA AS [MODIFICACION_VEHICULO.VID_FECHA], 
            T.VID_HOMOCLAVE AS [MODIFICACION_VEHICULO.VID_HOMOCLAVE], 
            T.NID_DECLARACION AS [MODIFICACION_VEHICULO.NID_DECLARACION], 
            T.NID_PATRIMONIO AS [MODIFICACION_VEHICULO.NID_PATRIMONIO], 
            T.NID_MARCA AS [MODIFICACION_VEHICULO.NID_MARCA], 
            T.C_MODELO AS [MODIFICACION_VEHICULO.C_MODELO], 
            T.V_DESCRIPCION AS [MODIFICACION_VEHICULO.V_DESCRIPCION], 
            T.F_ADQUISICION AS [MODIFICACION_VEHICULO.F_ADQUISICION], 
            T.NID_USO AS [MODIFICACION_VEHICULO.NID_USO], 
            T.M_VALOR_VEHICULO AS [MODIFICACION_VEHICULO.M_VALOR_VEHICULO], 
            T.L_MODIFICADO AS [MODIFICACION_VEHICULO.L_MODIFICADO], 
            True AS _from0
        FROM cnxDeclara.MODIFICACION_VEHICULO AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ModelDeclaraStoreContainer.MODIFICACION_VEHICULO_ADEU.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView110()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing MODIFICACION_VEHICULO_ADEU
        [ModelDeclara.Store.MODIFICACION_VEHICULO_ADEU](T1.[MODIFICACION_VEHICULO_ADEU.VID_NOMBRE], T1.[MODIFICACION_VEHICULO_ADEU.VID_FECHA], T1.[MODIFICACION_VEHICULO_ADEU.VID_HOMOCLAVE], T1.[MODIFICACION_VEHICULO_ADEU.NID_DECLARACION], T1.[MODIFICACION_VEHICULO_ADEU.NID_PATRIMONIO], T1.[MODIFICACION_VEHICULO_ADEU.NID_PATRIMONIO_ADEUDO])
    FROM (
        SELECT 
            T.VID_NOMBRE AS [MODIFICACION_VEHICULO_ADEU.VID_NOMBRE], 
            T.VID_FECHA AS [MODIFICACION_VEHICULO_ADEU.VID_FECHA], 
            T.VID_HOMOCLAVE AS [MODIFICACION_VEHICULO_ADEU.VID_HOMOCLAVE], 
            T.NID_DECLARACION AS [MODIFICACION_VEHICULO_ADEU.NID_DECLARACION], 
            T.NID_PATRIMONIO AS [MODIFICACION_VEHICULO_ADEU.NID_PATRIMONIO], 
            T.NID_PATRIMONIO_ADEUDO AS [MODIFICACION_VEHICULO_ADEU.NID_PATRIMONIO_ADEUDO], 
            True AS _from0
        FROM cnxDeclara.MODIFICACION_VEHICULO_ADEU AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ModelDeclaraStoreContainer.MODIFICACION_VEHICULO_TITU.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView111()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing MODIFICACION_VEHICULO_TITU
        [ModelDeclara.Store.MODIFICACION_VEHICULO_TITU](T1.[MODIFICACION_VEHICULO_TITU.VID_NOMBRE], T1.[MODIFICACION_VEHICULO_TITU.VID_FECHA], T1.[MODIFICACION_VEHICULO_TITU.VID_HOMOCLAVE], T1.[MODIFICACION_VEHICULO_TITU.NID_DECLARACION], T1.[MODIFICACION_VEHICULO_TITU.NID_PATRIMONIO], T1.[MODIFICACION_VEHICULO_TITU.NID_DEPENDIENTE], T1.[MODIFICACION_VEHICULO_TITU.L_DIF])
    FROM (
        SELECT 
            T.VID_NOMBRE AS [MODIFICACION_VEHICULO_TITU.VID_NOMBRE], 
            T.VID_FECHA AS [MODIFICACION_VEHICULO_TITU.VID_FECHA], 
            T.VID_HOMOCLAVE AS [MODIFICACION_VEHICULO_TITU.VID_HOMOCLAVE], 
            T.NID_DECLARACION AS [MODIFICACION_VEHICULO_TITU.NID_DECLARACION], 
            T.NID_PATRIMONIO AS [MODIFICACION_VEHICULO_TITU.NID_PATRIMONIO], 
            T.NID_DEPENDIENTE AS [MODIFICACION_VEHICULO_TITU.NID_DEPENDIENTE], 
            T.L_DIF AS [MODIFICACION_VEHICULO_TITU.L_DIF], 
            True AS _from0
        FROM cnxDeclara.MODIFICACION_VEHICULO_TITU AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ModelDeclaraStoreContainer.PATRIMONIO.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView112()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing PATRIMONIO
        [ModelDeclara.Store.PATRIMONIO](T1.[PATRIMONIO.VID_NOMBRE], T1.[PATRIMONIO.VID_FECHA], T1.[PATRIMONIO.VID_HOMOCLAVE], T1.[PATRIMONIO.NID_PATRIMONIO], T1.[PATRIMONIO.NID_TIPO], T1.[PATRIMONIO.M_VALOR], T1.[PATRIMONIO.NID_DEC_INCOR], T1.[PATRIMONIO.F_INCORPORACION], T1.[PATRIMONIO.NID_DEC_ULT_MOD], T1.[PATRIMONIO.F_MODIFICACION], T1.[PATRIMONIO.L_ACTIVO], T1.[PATRIMONIO.F_REGISTRO])
    FROM (
        SELECT 
            T.VID_NOMBRE AS [PATRIMONIO.VID_NOMBRE], 
            T.VID_FECHA AS [PATRIMONIO.VID_FECHA], 
            T.VID_HOMOCLAVE AS [PATRIMONIO.VID_HOMOCLAVE], 
            T.NID_PATRIMONIO AS [PATRIMONIO.NID_PATRIMONIO], 
            T.NID_TIPO AS [PATRIMONIO.NID_TIPO], 
            T.M_VALOR AS [PATRIMONIO.M_VALOR], 
            T.NID_DEC_INCOR AS [PATRIMONIO.NID_DEC_INCOR], 
            T.F_INCORPORACION AS [PATRIMONIO.F_INCORPORACION], 
            T.NID_DEC_ULT_MOD AS [PATRIMONIO.NID_DEC_ULT_MOD], 
            T.F_MODIFICACION AS [PATRIMONIO.F_MODIFICACION], 
            T.L_ACTIVO AS [PATRIMONIO.L_ACTIVO], 
            T.F_REGISTRO AS [PATRIMONIO.F_REGISTRO], 
            True AS _from0
        FROM cnxDeclara.PATRIMONIO AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ModelDeclaraStoreContainer.PATRIMONIO_ADEUDO.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView113()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing PATRIMONIO_ADEUDO
        [ModelDeclara.Store.PATRIMONIO_ADEUDO](T1.[PATRIMONIO_ADEUDO.VID_NOMBRE], T1.[PATRIMONIO_ADEUDO.VID_FECHA], T1.[PATRIMONIO_ADEUDO.VID_HOMOCLAVE], T1.[PATRIMONIO_ADEUDO.NID_PATRIMONIO], T1.[PATRIMONIO_ADEUDO.NID_PAIS], T1.[PATRIMONIO_ADEUDO.CID_ENTIDAD_FEDERATIVA], T1.[PATRIMONIO_ADEUDO.V_LUGAR], T1.[PATRIMONIO_ADEUDO.NID_INSTITUCION], T1.[PATRIMONIO_ADEUDO.V_OTRA], T1.[PATRIMONIO_ADEUDO.NID_TIPO_ADEUDO], T1.[PATRIMONIO_ADEUDO.F_ADEUDO], T1.[PATRIMONIO_ADEUDO.M_ORIGINAL], T1.[PATRIMONIO_ADEUDO.M_SALDO], T1.[PATRIMONIO_ADEUDO.E_CUENTA])
    FROM (
        SELECT 
            T.VID_NOMBRE AS [PATRIMONIO_ADEUDO.VID_NOMBRE], 
            T.VID_FECHA AS [PATRIMONIO_ADEUDO.VID_FECHA], 
            T.VID_HOMOCLAVE AS [PATRIMONIO_ADEUDO.VID_HOMOCLAVE], 
            T.NID_PATRIMONIO AS [PATRIMONIO_ADEUDO.NID_PATRIMONIO], 
            T.NID_PAIS AS [PATRIMONIO_ADEUDO.NID_PAIS], 
            T.CID_ENTIDAD_FEDERATIVA AS [PATRIMONIO_ADEUDO.CID_ENTIDAD_FEDERATIVA], 
            T.V_LUGAR AS [PATRIMONIO_ADEUDO.V_LUGAR], 
            T.NID_INSTITUCION AS [PATRIMONIO_ADEUDO.NID_INSTITUCION], 
            T.V_OTRA AS [PATRIMONIO_ADEUDO.V_OTRA], 
            T.NID_TIPO_ADEUDO AS [PATRIMONIO_ADEUDO.NID_TIPO_ADEUDO], 
            T.F_ADEUDO AS [PATRIMONIO_ADEUDO.F_ADEUDO], 
            T.M_ORIGINAL AS [PATRIMONIO_ADEUDO.M_ORIGINAL], 
            T.M_SALDO AS [PATRIMONIO_ADEUDO.M_SALDO], 
            T.E_CUENTA AS [PATRIMONIO_ADEUDO.E_CUENTA], 
            True AS _from0
        FROM cnxDeclara.PATRIMONIO_ADEUDO AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ModelDeclaraStoreContainer.PATRIMONIO_COPROPIETARIO.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView114()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing PATRIMONIO_COPROPIETARIO
        [ModelDeclara.Store.PATRIMONIO_COPROPIETARIO](T1.[PATRIMONIO_COPROPIETARIO.VID_NOMBRE], T1.[PATRIMONIO_COPROPIETARIO.VID_FECHA], T1.[PATRIMONIO_COPROPIETARIO.VID_HOMOCLAVE], T1.[PATRIMONIO_COPROPIETARIO.NID_PATRIMONIO], T1.[PATRIMONIO_COPROPIETARIO.NID_COPROPIETARIO], T1.[PATRIMONIO_COPROPIETARIO.CID_TIPO_PERSONA], T1.[PATRIMONIO_COPROPIETARIO.V_NOMBRE], T1.[PATRIMONIO_COPROPIETARIO.V_RFC])
    FROM (
        SELECT 
            T.VID_NOMBRE AS [PATRIMONIO_COPROPIETARIO.VID_NOMBRE], 
            T.VID_FECHA AS [PATRIMONIO_COPROPIETARIO.VID_FECHA], 
            T.VID_HOMOCLAVE AS [PATRIMONIO_COPROPIETARIO.VID_HOMOCLAVE], 
            T.NID_PATRIMONIO AS [PATRIMONIO_COPROPIETARIO.NID_PATRIMONIO], 
            T.NID_COPROPIETARIO AS [PATRIMONIO_COPROPIETARIO.NID_COPROPIETARIO], 
            T.CID_TIPO_PERSONA AS [PATRIMONIO_COPROPIETARIO.CID_TIPO_PERSONA], 
            T.V_NOMBRE AS [PATRIMONIO_COPROPIETARIO.V_NOMBRE], 
            T.V_RFC AS [PATRIMONIO_COPROPIETARIO.V_RFC], 
            True AS _from0
        FROM cnxDeclara.PATRIMONIO_COPROPIETARIO AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ModelDeclaraStoreContainer.PATRIMONIO_DEPENDIENTES.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView115()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing PATRIMONIO_DEPENDIENTES
        [ModelDeclara.Store.PATRIMONIO_DEPENDIENTES](T1.[PATRIMONIO_DEPENDIENTES.VID_NOMBRE], T1.[PATRIMONIO_DEPENDIENTES.VID_FECHA], T1.[PATRIMONIO_DEPENDIENTES.VID_HOMOCLAVE], T1.[PATRIMONIO_DEPENDIENTES.NID_DEPENDIENTE], T1.[PATRIMONIO_DEPENDIENTES.NID_TIPO_DEPENDIENTE], T1.[PATRIMONIO_DEPENDIENTES.E_NOMBRE], T1.[PATRIMONIO_DEPENDIENTES.E_PRIMER_A], T1.[PATRIMONIO_DEPENDIENTES.E_SEGUNDO_A], T1.[PATRIMONIO_DEPENDIENTES.F_NACIMIENTO], T1.[PATRIMONIO_DEPENDIENTES.E_RFC], T1.[PATRIMONIO_DEPENDIENTES.L_DEPENDE_ECO], T1.[PATRIMONIO_DEPENDIENTES.V_DOMICILIO], T1.[PATRIMONIO_DEPENDIENTES.L_ACTIVO])
    FROM (
        SELECT 
            T.VID_NOMBRE AS [PATRIMONIO_DEPENDIENTES.VID_NOMBRE], 
            T.VID_FECHA AS [PATRIMONIO_DEPENDIENTES.VID_FECHA], 
            T.VID_HOMOCLAVE AS [PATRIMONIO_DEPENDIENTES.VID_HOMOCLAVE], 
            T.NID_DEPENDIENTE AS [PATRIMONIO_DEPENDIENTES.NID_DEPENDIENTE], 
            T.NID_TIPO_DEPENDIENTE AS [PATRIMONIO_DEPENDIENTES.NID_TIPO_DEPENDIENTE], 
            T.E_NOMBRE AS [PATRIMONIO_DEPENDIENTES.E_NOMBRE], 
            T.E_PRIMER_A AS [PATRIMONIO_DEPENDIENTES.E_PRIMER_A], 
            T.E_SEGUNDO_A AS [PATRIMONIO_DEPENDIENTES.E_SEGUNDO_A], 
            T.F_NACIMIENTO AS [PATRIMONIO_DEPENDIENTES.F_NACIMIENTO], 
            T.E_RFC AS [PATRIMONIO_DEPENDIENTES.E_RFC], 
            T.L_DEPENDE_ECO AS [PATRIMONIO_DEPENDIENTES.L_DEPENDE_ECO], 
            T.V_DOMICILIO AS [PATRIMONIO_DEPENDIENTES.V_DOMICILIO], 
            T.L_ACTIVO AS [PATRIMONIO_DEPENDIENTES.L_ACTIVO], 
            True AS _from0
        FROM cnxDeclara.PATRIMONIO_DEPENDIENTES AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ModelDeclaraStoreContainer.PATRIMONIO_FORMA_ADQUISICION.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView116()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing PATRIMONIO_FORMA_ADQUISICION
        [ModelDeclara.Store.PATRIMONIO_FORMA_ADQUISICION](T1.[PATRIMONIO_FORMA_ADQUISICION.VID_NOMBRE], T1.[PATRIMONIO_FORMA_ADQUISICION.VID_FECHA], T1.[PATRIMONIO_FORMA_ADQUISICION.VID_HOMOCLAVE], T1.[PATRIMONIO_FORMA_ADQUISICION.NID_PATRIMONIO], T1.[PATRIMONIO_FORMA_ADQUISICION.NID_FORMA_ADQUISICION], T1.[PATRIMONIO_FORMA_ADQUISICION.M_DONACION])
    FROM (
        SELECT 
            T.VID_NOMBRE AS [PATRIMONIO_FORMA_ADQUISICION.VID_NOMBRE], 
            T.VID_FECHA AS [PATRIMONIO_FORMA_ADQUISICION.VID_FECHA], 
            T.VID_HOMOCLAVE AS [PATRIMONIO_FORMA_ADQUISICION.VID_HOMOCLAVE], 
            T.NID_PATRIMONIO AS [PATRIMONIO_FORMA_ADQUISICION.NID_PATRIMONIO], 
            T.NID_FORMA_ADQUISICION AS [PATRIMONIO_FORMA_ADQUISICION.NID_FORMA_ADQUISICION], 
            T.M_DONACION AS [PATRIMONIO_FORMA_ADQUISICION.M_DONACION], 
            True AS _from0
        FROM cnxDeclara.PATRIMONIO_FORMA_ADQUISICION AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ModelDeclaraStoreContainer.PATRIMONIO_INMUEBLE.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView117()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing PATRIMONIO_INMUEBLE
        [ModelDeclara.Store.PATRIMONIO_INMUEBLE](T1.[PATRIMONIO_INMUEBLE.VID_NOMBRE], T1.[PATRIMONIO_INMUEBLE.VID_FECHA], T1.[PATRIMONIO_INMUEBLE.VID_HOMOCLAVE], T1.[PATRIMONIO_INMUEBLE.NID_PATRIMONIO], T1.[PATRIMONIO_INMUEBLE.NID_TIPO], T1.[PATRIMONIO_INMUEBLE.F_ADQUISICION], T1.[PATRIMONIO_INMUEBLE.NID_USO], T1.[PATRIMONIO_INMUEBLE.E_UBICACION], T1.[PATRIMONIO_INMUEBLE.N_TERRENO], T1.[PATRIMONIO_INMUEBLE.N_CONSTRUCCION], T1.[PATRIMONIO_INMUEBLE.M_VALOR_INMUEBLE])
    FROM (
        SELECT 
            T.VID_NOMBRE AS [PATRIMONIO_INMUEBLE.VID_NOMBRE], 
            T.VID_FECHA AS [PATRIMONIO_INMUEBLE.VID_FECHA], 
            T.VID_HOMOCLAVE AS [PATRIMONIO_INMUEBLE.VID_HOMOCLAVE], 
            T.NID_PATRIMONIO AS [PATRIMONIO_INMUEBLE.NID_PATRIMONIO], 
            T.NID_TIPO AS [PATRIMONIO_INMUEBLE.NID_TIPO], 
            T.F_ADQUISICION AS [PATRIMONIO_INMUEBLE.F_ADQUISICION], 
            T.NID_USO AS [PATRIMONIO_INMUEBLE.NID_USO], 
            T.E_UBICACION AS [PATRIMONIO_INMUEBLE.E_UBICACION], 
            T.N_TERRENO AS [PATRIMONIO_INMUEBLE.N_TERRENO], 
            T.N_CONSTRUCCION AS [PATRIMONIO_INMUEBLE.N_CONSTRUCCION], 
            T.M_VALOR_INMUEBLE AS [PATRIMONIO_INMUEBLE.M_VALOR_INMUEBLE], 
            True AS _from0
        FROM cnxDeclara.PATRIMONIO_INMUEBLE AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ModelDeclaraStoreContainer.PATRIMONIO_INMUEBLE_ADEUDO.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView118()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing PATRIMONIO_INMUEBLE_ADEUDO
        [ModelDeclara.Store.PATRIMONIO_INMUEBLE_ADEUDO](T1.[PATRIMONIO_INMUEBLE_ADEUDO.VID_NOMBRE], T1.[PATRIMONIO_INMUEBLE_ADEUDO.VID_FECHA], T1.[PATRIMONIO_INMUEBLE_ADEUDO.VID_HOMOCLAVE], T1.[PATRIMONIO_INMUEBLE_ADEUDO.NID_PATRIMONIO], T1.[PATRIMONIO_INMUEBLE_ADEUDO.NID_PATRIMONIO_ADEUDO], T1.[PATRIMONIO_INMUEBLE_ADEUDO.L_DIF])
    FROM (
        SELECT 
            T.VID_NOMBRE AS [PATRIMONIO_INMUEBLE_ADEUDO.VID_NOMBRE], 
            T.VID_FECHA AS [PATRIMONIO_INMUEBLE_ADEUDO.VID_FECHA], 
            T.VID_HOMOCLAVE AS [PATRIMONIO_INMUEBLE_ADEUDO.VID_HOMOCLAVE], 
            T.NID_PATRIMONIO AS [PATRIMONIO_INMUEBLE_ADEUDO.NID_PATRIMONIO], 
            T.NID_PATRIMONIO_ADEUDO AS [PATRIMONIO_INMUEBLE_ADEUDO.NID_PATRIMONIO_ADEUDO], 
            T.L_DIF AS [PATRIMONIO_INMUEBLE_ADEUDO.L_DIF], 
            True AS _from0
        FROM cnxDeclara.PATRIMONIO_INMUEBLE_ADEUDO AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ModelDeclaraStoreContainer.PATRIMONIO_INVERSION.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView119()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing PATRIMONIO_INVERSION
        [ModelDeclara.Store.PATRIMONIO_INVERSION](T1.[PATRIMONIO_INVERSION.VID_NOMBRE], T1.[PATRIMONIO_INVERSION.VID_FECHA], T1.[PATRIMONIO_INVERSION.VID_HOMOCLAVE], T1.[PATRIMONIO_INVERSION.NID_PATRIMONIO], T1.[PATRIMONIO_INVERSION.NID_TIPO_INVERSION], T1.[PATRIMONIO_INVERSION.NID_SUBTIPO_INVERSION], T1.[PATRIMONIO_INVERSION.NID_INSTITUCION], T1.[PATRIMONIO_INVERSION.E_CUENTA], T1.[PATRIMONIO_INVERSION.V_CUENTA_CORTO], T1.[PATRIMONIO_INVERSION.V_OTRO], T1.[PATRIMONIO_INVERSION.M_SALDO], T1.[PATRIMONIO_INVERSION.NID_PAIS], T1.[PATRIMONIO_INVERSION.CID_ENTIDAD_FEDERATIVA], T1.[PATRIMONIO_INVERSION.V_LUGAR])
    FROM (
        SELECT 
            T.VID_NOMBRE AS [PATRIMONIO_INVERSION.VID_NOMBRE], 
            T.VID_FECHA AS [PATRIMONIO_INVERSION.VID_FECHA], 
            T.VID_HOMOCLAVE AS [PATRIMONIO_INVERSION.VID_HOMOCLAVE], 
            T.NID_PATRIMONIO AS [PATRIMONIO_INVERSION.NID_PATRIMONIO], 
            T.NID_TIPO_INVERSION AS [PATRIMONIO_INVERSION.NID_TIPO_INVERSION], 
            T.NID_SUBTIPO_INVERSION AS [PATRIMONIO_INVERSION.NID_SUBTIPO_INVERSION], 
            T.NID_INSTITUCION AS [PATRIMONIO_INVERSION.NID_INSTITUCION], 
            T.E_CUENTA AS [PATRIMONIO_INVERSION.E_CUENTA], 
            T.V_CUENTA_CORTO AS [PATRIMONIO_INVERSION.V_CUENTA_CORTO], 
            T.V_OTRO AS [PATRIMONIO_INVERSION.V_OTRO], 
            T.M_SALDO AS [PATRIMONIO_INVERSION.M_SALDO], 
            T.NID_PAIS AS [PATRIMONIO_INVERSION.NID_PAIS], 
            T.CID_ENTIDAD_FEDERATIVA AS [PATRIMONIO_INVERSION.CID_ENTIDAD_FEDERATIVA], 
            T.V_LUGAR AS [PATRIMONIO_INVERSION.V_LUGAR], 
            True AS _from0
        FROM cnxDeclara.PATRIMONIO_INVERSION AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ModelDeclaraStoreContainer.PATRIMONIO_MUEBLE.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView120()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing PATRIMONIO_MUEBLE
        [ModelDeclara.Store.PATRIMONIO_MUEBLE](T1.[PATRIMONIO_MUEBLE.VID_NOMBRE], T1.[PATRIMONIO_MUEBLE.VID_FECHA], T1.[PATRIMONIO_MUEBLE.VID_HOMOCLAVE], T1.[PATRIMONIO_MUEBLE.NID_PATRIMONIO], T1.[PATRIMONIO_MUEBLE.NID_TIPO], T1.[PATRIMONIO_MUEBLE.E_ESPECIFICACION], T1.[PATRIMONIO_MUEBLE.M_VALOR], T1.[PATRIMONIO_MUEBLE.F_ADQUISICION])
    FROM (
        SELECT 
            T.VID_NOMBRE AS [PATRIMONIO_MUEBLE.VID_NOMBRE], 
            T.VID_FECHA AS [PATRIMONIO_MUEBLE.VID_FECHA], 
            T.VID_HOMOCLAVE AS [PATRIMONIO_MUEBLE.VID_HOMOCLAVE], 
            T.NID_PATRIMONIO AS [PATRIMONIO_MUEBLE.NID_PATRIMONIO], 
            T.NID_TIPO AS [PATRIMONIO_MUEBLE.NID_TIPO], 
            T.E_ESPECIFICACION AS [PATRIMONIO_MUEBLE.E_ESPECIFICACION], 
            T.M_VALOR AS [PATRIMONIO_MUEBLE.M_VALOR], 
            T.F_ADQUISICION AS [PATRIMONIO_MUEBLE.F_ADQUISICION], 
            True AS _from0
        FROM cnxDeclara.PATRIMONIO_MUEBLE AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ModelDeclaraStoreContainer.PATRIMONIO_TARJETA.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView121()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing PATRIMONIO_TARJETA
        [ModelDeclara.Store.PATRIMONIO_TARJETA](T1.[PATRIMONIO_TARJETA.VID_NOMBRE], T1.[PATRIMONIO_TARJETA.VID_FECHA], T1.[PATRIMONIO_TARJETA.VID_HOMOCLAVE], T1.[PATRIMONIO_TARJETA.NID_PATRIMONIO], T1.[PATRIMONIO_TARJETA.NID_INSTITUCION], T1.[PATRIMONIO_TARJETA.M_SALDO], T1.[PATRIMONIO_TARJETA.NID_PAIS], T1.[PATRIMONIO_TARJETA.CID_ENTIDAD_FEDERATIVA], T1.[PATRIMONIO_TARJETA.NID_TIPO_ADEUDO], T1.[PATRIMONIO_TARJETA.V_LUGAR], T1.[PATRIMONIO_TARJETA.V_OTRA], T1.[PATRIMONIO_TARJETA.M_ORIGINAL], T1.[PATRIMONIO_TARJETA.E_CUENTA])
    FROM (
        SELECT 
            T.VID_NOMBRE AS [PATRIMONIO_TARJETA.VID_NOMBRE], 
            T.VID_FECHA AS [PATRIMONIO_TARJETA.VID_FECHA], 
            T.VID_HOMOCLAVE AS [PATRIMONIO_TARJETA.VID_HOMOCLAVE], 
            T.NID_PATRIMONIO AS [PATRIMONIO_TARJETA.NID_PATRIMONIO], 
            T.NID_INSTITUCION AS [PATRIMONIO_TARJETA.NID_INSTITUCION], 
            T.M_SALDO AS [PATRIMONIO_TARJETA.M_SALDO], 
            T.NID_PAIS AS [PATRIMONIO_TARJETA.NID_PAIS], 
            T.CID_ENTIDAD_FEDERATIVA AS [PATRIMONIO_TARJETA.CID_ENTIDAD_FEDERATIVA], 
            T.NID_TIPO_ADEUDO AS [PATRIMONIO_TARJETA.NID_TIPO_ADEUDO], 
            T.V_LUGAR AS [PATRIMONIO_TARJETA.V_LUGAR], 
            T.V_OTRA AS [PATRIMONIO_TARJETA.V_OTRA], 
            T.M_ORIGINAL AS [PATRIMONIO_TARJETA.M_ORIGINAL], 
            T.E_CUENTA AS [PATRIMONIO_TARJETA.E_CUENTA], 
            True AS _from0
        FROM cnxDeclara.PATRIMONIO_TARJETA AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ModelDeclaraStoreContainer.PATRIMONIO_TITULAR.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView122()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing PATRIMONIO_TITULAR
        [ModelDeclara.Store.PATRIMONIO_TITULAR](T1.[PATRIMONIO_TITULAR.VID_NOMBRE], T1.[PATRIMONIO_TITULAR.VID_FECHA], T1.[PATRIMONIO_TITULAR.VID_HOMOCLAVE], T1.[PATRIMONIO_TITULAR.NID_PATRIMONIO], T1.[PATRIMONIO_TITULAR.NID_DEPENDIENTE], T1.[PATRIMONIO_TITULAR.L_DIF])
    FROM (
        SELECT 
            T.VID_NOMBRE AS [PATRIMONIO_TITULAR.VID_NOMBRE], 
            T.VID_FECHA AS [PATRIMONIO_TITULAR.VID_FECHA], 
            T.VID_HOMOCLAVE AS [PATRIMONIO_TITULAR.VID_HOMOCLAVE], 
            T.NID_PATRIMONIO AS [PATRIMONIO_TITULAR.NID_PATRIMONIO], 
            T.NID_DEPENDIENTE AS [PATRIMONIO_TITULAR.NID_DEPENDIENTE], 
            T.L_DIF AS [PATRIMONIO_TITULAR.L_DIF], 
            True AS _from0
        FROM cnxDeclara.PATRIMONIO_TITULAR AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ModelDeclaraStoreContainer.PATRIMONIO_VEHICULO.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView123()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing PATRIMONIO_VEHICULO
        [ModelDeclara.Store.PATRIMONIO_VEHICULO](T1.[PATRIMONIO_VEHICULO.VID_NOMBRE], T1.[PATRIMONIO_VEHICULO.VID_FECHA], T1.[PATRIMONIO_VEHICULO.VID_HOMOCLAVE], T1.[PATRIMONIO_VEHICULO.NID_PATRIMONIO], T1.[PATRIMONIO_VEHICULO.NID_MARCA], T1.[PATRIMONIO_VEHICULO.C_MODELO], T1.[PATRIMONIO_VEHICULO.V_DESCRIPCION], T1.[PATRIMONIO_VEHICULO.F_ADQUISICION], T1.[PATRIMONIO_VEHICULO.NID_USO], T1.[PATRIMONIO_VEHICULO.M_VALOR_VEHICULO], T1.[PATRIMONIO_VEHICULO.NID_TIPO_VEHICULO])
    FROM (
        SELECT 
            T.VID_NOMBRE AS [PATRIMONIO_VEHICULO.VID_NOMBRE], 
            T.VID_FECHA AS [PATRIMONIO_VEHICULO.VID_FECHA], 
            T.VID_HOMOCLAVE AS [PATRIMONIO_VEHICULO.VID_HOMOCLAVE], 
            T.NID_PATRIMONIO AS [PATRIMONIO_VEHICULO.NID_PATRIMONIO], 
            T.NID_MARCA AS [PATRIMONIO_VEHICULO.NID_MARCA], 
            T.C_MODELO AS [PATRIMONIO_VEHICULO.C_MODELO], 
            T.V_DESCRIPCION AS [PATRIMONIO_VEHICULO.V_DESCRIPCION], 
            T.F_ADQUISICION AS [PATRIMONIO_VEHICULO.F_ADQUISICION], 
            T.NID_USO AS [PATRIMONIO_VEHICULO.NID_USO], 
            T.M_VALOR_VEHICULO AS [PATRIMONIO_VEHICULO.M_VALOR_VEHICULO], 
            T.NID_TIPO_VEHICULO AS [PATRIMONIO_VEHICULO.NID_TIPO_VEHICULO], 
            True AS _from0
        FROM cnxDeclara.PATRIMONIO_VEHICULO AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ModelDeclaraStoreContainer.PATRIMONIO_VEHICULO_ADEUDO.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView124()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing PATRIMONIO_VEHICULO_ADEUDO
        [ModelDeclara.Store.PATRIMONIO_VEHICULO_ADEUDO](T1.[PATRIMONIO_VEHICULO_ADEUDO.VID_NOMBRE], T1.[PATRIMONIO_VEHICULO_ADEUDO.VID_FECHA], T1.[PATRIMONIO_VEHICULO_ADEUDO.VID_HOMOCLAVE], T1.[PATRIMONIO_VEHICULO_ADEUDO.NID_PATRIMONIO], T1.[PATRIMONIO_VEHICULO_ADEUDO.NID_PATRIMONIO_ADEUDO])
    FROM (
        SELECT 
            T.VID_NOMBRE AS [PATRIMONIO_VEHICULO_ADEUDO.VID_NOMBRE], 
            T.VID_FECHA AS [PATRIMONIO_VEHICULO_ADEUDO.VID_FECHA], 
            T.VID_HOMOCLAVE AS [PATRIMONIO_VEHICULO_ADEUDO.VID_HOMOCLAVE], 
            T.NID_PATRIMONIO AS [PATRIMONIO_VEHICULO_ADEUDO.NID_PATRIMONIO], 
            T.NID_PATRIMONIO_ADEUDO AS [PATRIMONIO_VEHICULO_ADEUDO.NID_PATRIMONIO_ADEUDO], 
            True AS _from0
        FROM cnxDeclara.PATRIMONIO_VEHICULO_ADEUDO AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ModelDeclaraStoreContainer.USUARIO.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView125()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing USUARIO
        [ModelDeclara.Store.USUARIO](T1.[USUARIO.VID_NOMBRE], T1.[USUARIO.VID_FECHA], T1.[USUARIO.VID_HOMOCLAVE], T1.[USUARIO.V_PASSWORD], T1.[USUARIO.V_NOMBRE], T1.[USUARIO.V_PRIMER_A], T1.[USUARIO.V_SEGUNDO_A], T1.[USUARIO.F_NACIMIENTO], T1.[USUARIO.V_ACUSE], T1.[USUARIO.L_ACTIVO], T1.[USUARIO.F_INGRESO_INSTITUTO], T1.[USUARIO.F_REGISTRO], T1.[USUARIO.NVO_INGRESO], T1.[USUARIO.OBL_DECLARACION])
    FROM (
        SELECT 
            T.VID_NOMBRE AS [USUARIO.VID_NOMBRE], 
            T.VID_FECHA AS [USUARIO.VID_FECHA], 
            T.VID_HOMOCLAVE AS [USUARIO.VID_HOMOCLAVE], 
            T.V_PASSWORD AS [USUARIO.V_PASSWORD], 
            T.V_NOMBRE AS [USUARIO.V_NOMBRE], 
            T.V_PRIMER_A AS [USUARIO.V_PRIMER_A], 
            T.V_SEGUNDO_A AS [USUARIO.V_SEGUNDO_A], 
            T.F_NACIMIENTO AS [USUARIO.F_NACIMIENTO], 
            T.V_ACUSE AS [USUARIO.V_ACUSE], 
            T.L_ACTIVO AS [USUARIO.L_ACTIVO], 
            T.F_INGRESO_INSTITUTO AS [USUARIO.F_INGRESO_INSTITUTO], 
            T.F_REGISTRO AS [USUARIO.F_REGISTRO], 
            T.NVO_INGRESO AS [USUARIO.NVO_INGRESO], 
            T.OBL_DECLARACION AS [USUARIO.OBL_DECLARACION], 
            True AS _from0
        FROM cnxDeclara.USUARIO AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ModelDeclaraStoreContainer.USUARIO_CORREO.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView126()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing USUARIO_CORREO
        [ModelDeclara.Store.USUARIO_CORREO](T1.[USUARIO_CORREO.VID_NOMBRE], T1.[USUARIO_CORREO.VID_FECHA], T1.[USUARIO_CORREO.VID_HOMOCLAVE], T1.[USUARIO_CORREO.V_CORREO], T1.[USUARIO_CORREO.L_PRINCIPAL], T1.[USUARIO_CORREO.L_ACTIVO], T1.[USUARIO_CORREO.L_CONFIRMADO], T1.[USUARIO_CORREO.N_CODIGO])
    FROM (
        SELECT 
            T.VID_NOMBRE AS [USUARIO_CORREO.VID_NOMBRE], 
            T.VID_FECHA AS [USUARIO_CORREO.VID_FECHA], 
            T.VID_HOMOCLAVE AS [USUARIO_CORREO.VID_HOMOCLAVE], 
            T.V_CORREO AS [USUARIO_CORREO.V_CORREO], 
            T.L_PRINCIPAL AS [USUARIO_CORREO.L_PRINCIPAL], 
            T.L_ACTIVO AS [USUARIO_CORREO.L_ACTIVO], 
            T.L_CONFIRMADO AS [USUARIO_CORREO.L_CONFIRMADO], 
            T.N_CODIGO AS [USUARIO_CORREO.N_CODIGO], 
            True AS _from0
        FROM cnxDeclara.USUARIO_CORREO AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ModelDeclaraStoreContainer.USUARIO_DOMICILIO.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView127()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing USUARIO_DOMICILIO
        [ModelDeclara.Store.USUARIO_DOMICILIO](T1.[USUARIO_DOMICILIO.VID_NOMBRE], T1.[USUARIO_DOMICILIO.VID_FECHA], T1.[USUARIO_DOMICILIO.VID_HOMOCLAVE], T1.[USUARIO_DOMICILIO.NID_DOMICILIO], T1.[USUARIO_DOMICILIO.NID_PAIS], T1.[USUARIO_DOMICILIO.CID_ENTIDAD_FEDERATIVA], T1.[USUARIO_DOMICILIO.CID_MUNICIPIO], T1.[USUARIO_DOMICILIO.C_CODIGO_POSTAL], T1.[USUARIO_DOMICILIO.E_DIRECCION], T1.[USUARIO_DOMICILIO.NID_TIPO_DOMICILIO], T1.[USUARIO_DOMICILIO.L_ACTIVO])
    FROM (
        SELECT 
            T.VID_NOMBRE AS [USUARIO_DOMICILIO.VID_NOMBRE], 
            T.VID_FECHA AS [USUARIO_DOMICILIO.VID_FECHA], 
            T.VID_HOMOCLAVE AS [USUARIO_DOMICILIO.VID_HOMOCLAVE], 
            T.NID_DOMICILIO AS [USUARIO_DOMICILIO.NID_DOMICILIO], 
            T.NID_PAIS AS [USUARIO_DOMICILIO.NID_PAIS], 
            T.CID_ENTIDAD_FEDERATIVA AS [USUARIO_DOMICILIO.CID_ENTIDAD_FEDERATIVA], 
            T.CID_MUNICIPIO AS [USUARIO_DOMICILIO.CID_MUNICIPIO], 
            T.C_CODIGO_POSTAL AS [USUARIO_DOMICILIO.C_CODIGO_POSTAL], 
            T.E_DIRECCION AS [USUARIO_DOMICILIO.E_DIRECCION], 
            T.NID_TIPO_DOMICILIO AS [USUARIO_DOMICILIO.NID_TIPO_DOMICILIO], 
            T.L_ACTIVO AS [USUARIO_DOMICILIO.L_ACTIVO], 
            True AS _from0
        FROM cnxDeclara.USUARIO_DOMICILIO AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ModelDeclaraStoreContainer.USUARIO_REC_PASS.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView128()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing USUARIO_REC_PASS
        [ModelDeclara.Store.USUARIO_REC_PASS](T1.[USUARIO_REC_PASS.VID_NOMBRE], T1.[USUARIO_REC_PASS.VID_FECHA], T1.[USUARIO_REC_PASS.VID_HOMOCLAVE], T1.[USUARIO_REC_PASS.V_CORREO], T1.[USUARIO_REC_PASS.N_USOS], T1.[USUARIO_REC_PASS.F_SOLICITUD])
    FROM (
        SELECT 
            T.VID_NOMBRE AS [USUARIO_REC_PASS.VID_NOMBRE], 
            T.VID_FECHA AS [USUARIO_REC_PASS.VID_FECHA], 
            T.VID_HOMOCLAVE AS [USUARIO_REC_PASS.VID_HOMOCLAVE], 
            T.V_CORREO AS [USUARIO_REC_PASS.V_CORREO], 
            T.N_USOS AS [USUARIO_REC_PASS.N_USOS], 
            T.F_SOLICITUD AS [USUARIO_REC_PASS.F_SOLICITUD], 
            True AS _from0
        FROM cnxDeclara.USUARIO_REC_PASS AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ModelDeclaraStoreContainer.USUARIO_SESION.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView129()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing USUARIO_SESION
        [ModelDeclara.Store.USUARIO_SESION](T1.[USUARIO_SESION.VID_NOMBRE], T1.[USUARIO_SESION.VID_FECHA], T1.[USUARIO_SESION.VID_HOMOCLAVE], T1.[USUARIO_SESION.NID_SESION], T1.[USUARIO_SESION.V_IP], T1.[USUARIO_SESION.V_MAQUINA_USUARIO], T1.[USUARIO_SESION.F_INICIO], T1.[USUARIO_SESION.F_FIN])
    FROM (
        SELECT 
            T.VID_NOMBRE AS [USUARIO_SESION.VID_NOMBRE], 
            T.VID_FECHA AS [USUARIO_SESION.VID_FECHA], 
            T.VID_HOMOCLAVE AS [USUARIO_SESION.VID_HOMOCLAVE], 
            T.NID_SESION AS [USUARIO_SESION.NID_SESION], 
            T.V_IP AS [USUARIO_SESION.V_IP], 
            T.V_MAQUINA_USUARIO AS [USUARIO_SESION.V_MAQUINA_USUARIO], 
            T.F_INICIO AS [USUARIO_SESION.F_INICIO], 
            T.F_FIN AS [USUARIO_SESION.F_FIN], 
            True AS _from0
        FROM cnxDeclara.USUARIO_SESION AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for cnxDeclara.ALTA.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView130()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing ALTA
        [ModelDeclara.ALTA](T1.[ALTA.VID_NOMBRE], T1.[ALTA.VID_FECHA], T1.[ALTA.VID_HOMOCLAVE], T1.[ALTA.NID_DECLARACION])
    FROM (
        SELECT 
            T.VID_NOMBRE AS [ALTA.VID_NOMBRE], 
            T.VID_FECHA AS [ALTA.VID_FECHA], 
            T.VID_HOMOCLAVE AS [ALTA.VID_HOMOCLAVE], 
            T.NID_DECLARACION AS [ALTA.NID_DECLARACION], 
            True AS _from0
        FROM ModelDeclaraStoreContainer.ALTA AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for cnxDeclara.ALTA_ADEUDO.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView131()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing ALTA_ADEUDO
        [ModelDeclara.ALTA_ADEUDO](T1.[ALTA_ADEUDO.VID_NOMBRE], T1.[ALTA_ADEUDO.VID_FECHA], T1.[ALTA_ADEUDO.VID_HOMOCLAVE], T1.[ALTA_ADEUDO.NID_DECLARACION], T1.[ALTA_ADEUDO.NID_ADEUDO], T1.[ALTA_ADEUDO.NID_PAIS], T1.[ALTA_ADEUDO.CID_ENTIDAD_FEDERATIVA], T1.[ALTA_ADEUDO.V_LUGAR], T1.[ALTA_ADEUDO.NID_INSTITUCION], T1.[ALTA_ADEUDO.V_OTRA], T1.[ALTA_ADEUDO.NID_TIPO_ADEUDO], T1.[ALTA_ADEUDO.F_ADEUDO], T1.[ALTA_ADEUDO.M_ORIGINAL], T1.[ALTA_ADEUDO.M_SALDO], T1.[ALTA_ADEUDO.E_CUENTA], T1.[ALTA_ADEUDO.L_AUTOGENERADO], T1.[ALTA_ADEUDO.NID_PATRIMONIO], T1.[ALTA_ADEUDO.V_TIPO_MONEDA], T1.[ALTA_ADEUDO.CID_TIPO_PERSONA_OTORGANTE], T1.[ALTA_ADEUDO.E_RFC], T1.[ALTA_ADEUDO.E_OBSERVACIONES], T1.[ALTA_ADEUDO.E_OBSERVACIONES_MARCADO], T1.[ALTA_ADEUDO.V_OBSERVACIONES_TESTADO], T1.[ALTA_ADEUDO.NID_ESTADO_TESTADO], T1.[ALTA_ADEUDO.NID_TERCERO], T1.[ALTA_ADEUDO.E_NOMBRE_TERCERO], T1.[ALTA_ADEUDO.E_RFC_TERCERO])
    FROM (
        SELECT 
            T.VID_NOMBRE AS [ALTA_ADEUDO.VID_NOMBRE], 
            T.VID_FECHA AS [ALTA_ADEUDO.VID_FECHA], 
            T.VID_HOMOCLAVE AS [ALTA_ADEUDO.VID_HOMOCLAVE], 
            T.NID_DECLARACION AS [ALTA_ADEUDO.NID_DECLARACION], 
            T.NID_ADEUDO AS [ALTA_ADEUDO.NID_ADEUDO], 
            T.NID_PAIS AS [ALTA_ADEUDO.NID_PAIS], 
            T.CID_ENTIDAD_FEDERATIVA AS [ALTA_ADEUDO.CID_ENTIDAD_FEDERATIVA], 
            T.V_LUGAR AS [ALTA_ADEUDO.V_LUGAR], 
            T.NID_INSTITUCION AS [ALTA_ADEUDO.NID_INSTITUCION], 
            T.V_OTRA AS [ALTA_ADEUDO.V_OTRA], 
            T.NID_TIPO_ADEUDO AS [ALTA_ADEUDO.NID_TIPO_ADEUDO], 
            T.F_ADEUDO AS [ALTA_ADEUDO.F_ADEUDO], 
            T.M_ORIGINAL AS [ALTA_ADEUDO.M_ORIGINAL], 
            T.M_SALDO AS [ALTA_ADEUDO.M_SALDO], 
            T.E_CUENTA AS [ALTA_ADEUDO.E_CUENTA], 
            T.L_AUTOGENERADO AS [ALTA_ADEUDO.L_AUTOGENERADO], 
            T.NID_PATRIMONIO AS [ALTA_ADEUDO.NID_PATRIMONIO], 
            T.V_TIPO_MONEDA AS [ALTA_ADEUDO.V_TIPO_MONEDA], 
            T.CID_TIPO_PERSONA_OTORGANTE AS [ALTA_ADEUDO.CID_TIPO_PERSONA_OTORGANTE], 
            T.E_RFC AS [ALTA_ADEUDO.E_RFC], 
            T.E_OBSERVACIONES AS [ALTA_ADEUDO.E_OBSERVACIONES], 
            T.E_OBSERVACIONES_MARCADO AS [ALTA_ADEUDO.E_OBSERVACIONES_MARCADO], 
            T.V_OBSERVACIONES_TESTADO AS [ALTA_ADEUDO.V_OBSERVACIONES_TESTADO], 
            T.NID_ESTADO_TESTADO AS [ALTA_ADEUDO.NID_ESTADO_TESTADO], 
            T.NID_TERCERO AS [ALTA_ADEUDO.NID_TERCERO], 
            T.E_NOMBRE_TERCERO AS [ALTA_ADEUDO.E_NOMBRE_TERCERO], 
            T.E_RFC_TERCERO AS [ALTA_ADEUDO.E_RFC_TERCERO], 
            True AS _from0
        FROM ModelDeclaraStoreContainer.ALTA_ADEUDO AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for cnxDeclara.ALTA_ADEUDO_PAGOS.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView132()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing ALTA_ADEUDO_PAGOS
        [ModelDeclara.ALTA_ADEUDO_PAGOS](T1.[ALTA_ADEUDO_PAGOS.VID_NOMBRE], T1.[ALTA_ADEUDO_PAGOS.VID_FECHA], T1.[ALTA_ADEUDO_PAGOS.VID_HOMOCLAVE], T1.[ALTA_ADEUDO_PAGOS.NID_DECLARACION], T1.[ALTA_ADEUDO_PAGOS.NID_ADEUDO], T1.[ALTA_ADEUDO_PAGOS.M_PAGOS])
    FROM (
        SELECT 
            T.VID_NOMBRE AS [ALTA_ADEUDO_PAGOS.VID_NOMBRE], 
            T.VID_FECHA AS [ALTA_ADEUDO_PAGOS.VID_FECHA], 
            T.VID_HOMOCLAVE AS [ALTA_ADEUDO_PAGOS.VID_HOMOCLAVE], 
            T.NID_DECLARACION AS [ALTA_ADEUDO_PAGOS.NID_DECLARACION], 
            T.NID_ADEUDO AS [ALTA_ADEUDO_PAGOS.NID_ADEUDO], 
            T.M_PAGOS AS [ALTA_ADEUDO_PAGOS.M_PAGOS], 
            True AS _from0
        FROM ModelDeclaraStoreContainer.ALTA_ADEUDO_PAGOS AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for cnxDeclara.ALTA_ADEUDO_TITULAR.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView133()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing ALTA_ADEUDO_TITULAR
        [ModelDeclara.ALTA_ADEUDO_TITULAR](T1.[ALTA_ADEUDO_TITULAR.VID_NOMBRE], T1.[ALTA_ADEUDO_TITULAR.VID_FECHA], T1.[ALTA_ADEUDO_TITULAR.VID_HOMOCLAVE], T1.[ALTA_ADEUDO_TITULAR.NID_DECLARACION], T1.[ALTA_ADEUDO_TITULAR.NID_ADEUDO], T1.[ALTA_ADEUDO_TITULAR.NID_DEPENDIENTE], T1.[ALTA_ADEUDO_TITULAR.L_DIF])
    FROM (
        SELECT 
            T.VID_NOMBRE AS [ALTA_ADEUDO_TITULAR.VID_NOMBRE], 
            T.VID_FECHA AS [ALTA_ADEUDO_TITULAR.VID_FECHA], 
            T.VID_HOMOCLAVE AS [ALTA_ADEUDO_TITULAR.VID_HOMOCLAVE], 
            T.NID_DECLARACION AS [ALTA_ADEUDO_TITULAR.NID_DECLARACION], 
            T.NID_ADEUDO AS [ALTA_ADEUDO_TITULAR.NID_ADEUDO], 
            T.NID_DEPENDIENTE AS [ALTA_ADEUDO_TITULAR.NID_DEPENDIENTE], 
            T.L_DIF AS [ALTA_ADEUDO_TITULAR.L_DIF], 
            True AS _from0
        FROM ModelDeclaraStoreContainer.ALTA_ADEUDO_TITULAR AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for cnxDeclara.ALTA_COMODATO.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView134()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing ALTA_COMODATO
        [ModelDeclara.ALTA_COMODATO](T1.[ALTA_COMODATO.VID_NOMBRE], T1.[ALTA_COMODATO.VID_FECHA], T1.[ALTA_COMODATO.VID_HOMOCLAVE], T1.[ALTA_COMODATO.NID_DECLARACION], T1.[ALTA_COMODATO.NID_COMODATO], T1.[ALTA_COMODATO.CID_TIPO_PERSONA], T1.[ALTA_COMODATO.E_TITULAR], T1.[ALTA_COMODATO.E_RFC], T1.[ALTA_COMODATO.NID_TIPO_RELACION], T1.[ALTA_COMODATO.E_OBSERVACIONES], T1.[ALTA_COMODATO.E_OBSERVACIONES_MARCADO], T1.[ALTA_COMODATO.V_OBSERVACIONES_TESTADO], T1.[ALTA_COMODATO.NID_ESTADO_TESTADO])
    FROM (
        SELECT 
            T.VID_NOMBRE AS [ALTA_COMODATO.VID_NOMBRE], 
            T.VID_FECHA AS [ALTA_COMODATO.VID_FECHA], 
            T.VID_HOMOCLAVE AS [ALTA_COMODATO.VID_HOMOCLAVE], 
            T.NID_DECLARACION AS [ALTA_COMODATO.NID_DECLARACION], 
            T.NID_COMODATO AS [ALTA_COMODATO.NID_COMODATO], 
            T.CID_TIPO_PERSONA AS [ALTA_COMODATO.CID_TIPO_PERSONA], 
            T.E_TITULAR AS [ALTA_COMODATO.E_TITULAR], 
            T.E_RFC AS [ALTA_COMODATO.E_RFC], 
            T.NID_TIPO_RELACION AS [ALTA_COMODATO.NID_TIPO_RELACION], 
            T.E_OBSERVACIONES AS [ALTA_COMODATO.E_OBSERVACIONES], 
            T.E_OBSERVACIONES_MARCADO AS [ALTA_COMODATO.E_OBSERVACIONES_MARCADO], 
            T.V_OBSERVACIONES_TESTADO AS [ALTA_COMODATO.V_OBSERVACIONES_TESTADO], 
            T.NID_ESTADO_TESTADO AS [ALTA_COMODATO.NID_ESTADO_TESTADO], 
            True AS _from0
        FROM ModelDeclaraStoreContainer.ALTA_COMODATO AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for cnxDeclara.ALTA_COMODATO_INMUEBLE.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView135()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing ALTA_COMODATO_INMUEBLE
        [ModelDeclara.ALTA_COMODATO_INMUEBLE](T1.[ALTA_COMODATO_INMUEBLE.VID_NOMBRE], T1.[ALTA_COMODATO_INMUEBLE.VID_FECHA], T1.[ALTA_COMODATO_INMUEBLE.VID_HOMOCLAVE], T1.[ALTA_COMODATO_INMUEBLE.NID_DECLARACION], T1.[ALTA_COMODATO_INMUEBLE.NID_COMODATO], T1.[ALTA_COMODATO_INMUEBLE.NID_TIPO], T1.[ALTA_COMODATO_INMUEBLE.C_CODIGO_POSTAL], T1.[ALTA_COMODATO_INMUEBLE.NID_PAIS], T1.[ALTA_COMODATO_INMUEBLE.CID_ENTIDAD_FEDERATIVA], T1.[ALTA_COMODATO_INMUEBLE.CID_MUNICIPIO], T1.[ALTA_COMODATO_INMUEBLE.V_COLONIA], T1.[ALTA_COMODATO_INMUEBLE.V_DOMICILIO])
    FROM (
        SELECT 
            T.VID_NOMBRE AS [ALTA_COMODATO_INMUEBLE.VID_NOMBRE], 
            T.VID_FECHA AS [ALTA_COMODATO_INMUEBLE.VID_FECHA], 
            T.VID_HOMOCLAVE AS [ALTA_COMODATO_INMUEBLE.VID_HOMOCLAVE], 
            T.NID_DECLARACION AS [ALTA_COMODATO_INMUEBLE.NID_DECLARACION], 
            T.NID_COMODATO AS [ALTA_COMODATO_INMUEBLE.NID_COMODATO], 
            T.NID_TIPO AS [ALTA_COMODATO_INMUEBLE.NID_TIPO], 
            T.C_CODIGO_POSTAL AS [ALTA_COMODATO_INMUEBLE.C_CODIGO_POSTAL], 
            T.NID_PAIS AS [ALTA_COMODATO_INMUEBLE.NID_PAIS], 
            T.CID_ENTIDAD_FEDERATIVA AS [ALTA_COMODATO_INMUEBLE.CID_ENTIDAD_FEDERATIVA], 
            T.CID_MUNICIPIO AS [ALTA_COMODATO_INMUEBLE.CID_MUNICIPIO], 
            T.V_COLONIA AS [ALTA_COMODATO_INMUEBLE.V_COLONIA], 
            T.V_DOMICILIO AS [ALTA_COMODATO_INMUEBLE.V_DOMICILIO], 
            True AS _from0
        FROM ModelDeclaraStoreContainer.ALTA_COMODATO_INMUEBLE AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for cnxDeclara.ALTA_COMODATO_VEHICULO.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView136()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing ALTA_COMODATO_VEHICULO
        [ModelDeclara.ALTA_COMODATO_VEHICULO](T1.[ALTA_COMODATO_VEHICULO.VID_NOMBRE], T1.[ALTA_COMODATO_VEHICULO.VID_FECHA], T1.[ALTA_COMODATO_VEHICULO.VID_HOMOCLAVE], T1.[ALTA_COMODATO_VEHICULO.NID_DECLARACION], T1.[ALTA_COMODATO_VEHICULO.NID_COMODATO], T1.[ALTA_COMODATO_VEHICULO.NID_TIPO_VEHICULO], T1.[ALTA_COMODATO_VEHICULO.NID_MARCA], T1.[ALTA_COMODATO_VEHICULO.C_MODELO], T1.[ALTA_COMODATO_VEHICULO.V_DESCRIPCION], T1.[ALTA_COMODATO_VEHICULO.E_NUMERO_SERIE], T1.[ALTA_COMODATO_VEHICULO.NID_PAIS], T1.[ALTA_COMODATO_VEHICULO.CID_ENTIDAD_FEDERATIVA])
    FROM (
        SELECT 
            T.VID_NOMBRE AS [ALTA_COMODATO_VEHICULO.VID_NOMBRE], 
            T.VID_FECHA AS [ALTA_COMODATO_VEHICULO.VID_FECHA], 
            T.VID_HOMOCLAVE AS [ALTA_COMODATO_VEHICULO.VID_HOMOCLAVE], 
            T.NID_DECLARACION AS [ALTA_COMODATO_VEHICULO.NID_DECLARACION], 
            T.NID_COMODATO AS [ALTA_COMODATO_VEHICULO.NID_COMODATO], 
            T.NID_TIPO_VEHICULO AS [ALTA_COMODATO_VEHICULO.NID_TIPO_VEHICULO], 
            T.NID_MARCA AS [ALTA_COMODATO_VEHICULO.NID_MARCA], 
            T.C_MODELO AS [ALTA_COMODATO_VEHICULO.C_MODELO], 
            T.V_DESCRIPCION AS [ALTA_COMODATO_VEHICULO.V_DESCRIPCION], 
            T.E_NUMERO_SERIE AS [ALTA_COMODATO_VEHICULO.E_NUMERO_SERIE], 
            T.NID_PAIS AS [ALTA_COMODATO_VEHICULO.NID_PAIS], 
            T.CID_ENTIDAD_FEDERATIVA AS [ALTA_COMODATO_VEHICULO.CID_ENTIDAD_FEDERATIVA], 
            True AS _from0
        FROM ModelDeclaraStoreContainer.ALTA_COMODATO_VEHICULO AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for cnxDeclara.ALTA_INMUEBLE.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView137()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing ALTA_INMUEBLE
        [ModelDeclara.ALTA_INMUEBLE](T1.[ALTA_INMUEBLE.VID_NOMBRE], T1.[ALTA_INMUEBLE.VID_FECHA], T1.[ALTA_INMUEBLE.VID_HOMOCLAVE], T1.[ALTA_INMUEBLE.NID_DECLARACION], T1.[ALTA_INMUEBLE.NID_INMUEBLE], T1.[ALTA_INMUEBLE.NID_TIPO], T1.[ALTA_INMUEBLE.F_ADQUISICION], T1.[ALTA_INMUEBLE.NID_USO], T1.[ALTA_INMUEBLE.E_UBICACION], T1.[ALTA_INMUEBLE.N_TERRENO], T1.[ALTA_INMUEBLE.N_CONSTRUCCION], T1.[ALTA_INMUEBLE.M_VALOR_INMUEBLE], T1.[ALTA_INMUEBLE.NID_PATRIMONIO], T1.[ALTA_INMUEBLE.N_PORCENTAJE_DECLARANTE], T1.[ALTA_INMUEBLE.E_REGISTRO_PUBLICO_PROPIEDAD], T1.[ALTA_INMUEBLE.CID_TIPO_PERSONA_TRANSMISOR], T1.[ALTA_INMUEBLE.E_NOMBRE_TRANSMISOR], T1.[ALTA_INMUEBLE.E_RFC_TRANSMISOR], T1.[ALTA_INMUEBLE.NID_RELACION_TRANSMISOR], T1.[ALTA_INMUEBLE.V_TIPO_MONEDA], T1.[ALTA_INMUEBLE.NID_VALOR_ADQUISICION], T1.[ALTA_INMUEBLE.NID_FORMA_ADQUISICION], T1.[ALTA_INMUEBLE.NID_FORMA_PAGO], T1.[ALTA_INMUEBLE.E_OBSERVACIONES], T1.[ALTA_INMUEBLE.E_OBSERVACIONES_MARCADO], T1.[ALTA_INMUEBLE.V_OBSERVACIONES_TESTADO], T1.[ALTA_INMUEBLE.NID_ESTADO_TESTADO])
    FROM (
        SELECT 
            T.VID_NOMBRE AS [ALTA_INMUEBLE.VID_NOMBRE], 
            T.VID_FECHA AS [ALTA_INMUEBLE.VID_FECHA], 
            T.VID_HOMOCLAVE AS [ALTA_INMUEBLE.VID_HOMOCLAVE], 
            T.NID_DECLARACION AS [ALTA_INMUEBLE.NID_DECLARACION], 
            T.NID_INMUEBLE AS [ALTA_INMUEBLE.NID_INMUEBLE], 
            T.NID_TIPO AS [ALTA_INMUEBLE.NID_TIPO], 
            T.F_ADQUISICION AS [ALTA_INMUEBLE.F_ADQUISICION], 
            T.NID_USO AS [ALTA_INMUEBLE.NID_USO], 
            T.E_UBICACION AS [ALTA_INMUEBLE.E_UBICACION], 
            T.N_TERRENO AS [ALTA_INMUEBLE.N_TERRENO], 
            T.N_CONSTRUCCION AS [ALTA_INMUEBLE.N_CONSTRUCCION], 
            T.M_VALOR_INMUEBLE AS [ALTA_INMUEBLE.M_VALOR_INMUEBLE], 
            T.NID_PATRIMONIO AS [ALTA_INMUEBLE.NID_PATRIMONIO], 
            T.N_PORCENTAJE_DECLARANTE AS [ALTA_INMUEBLE.N_PORCENTAJE_DECLARANTE], 
            T.E_REGISTRO_PUBLICO_PROPIEDAD AS [ALTA_INMUEBLE.E_REGISTRO_PUBLICO_PROPIEDAD], 
            T.CID_TIPO_PERSONA_TRANSMISOR AS [ALTA_INMUEBLE.CID_TIPO_PERSONA_TRANSMISOR], 
            T.E_NOMBRE_TRANSMISOR AS [ALTA_INMUEBLE.E_NOMBRE_TRANSMISOR], 
            T.E_RFC_TRANSMISOR AS [ALTA_INMUEBLE.E_RFC_TRANSMISOR], 
            T.NID_RELACION_TRANSMISOR AS [ALTA_INMUEBLE.NID_RELACION_TRANSMISOR], 
            T.V_TIPO_MONEDA AS [ALTA_INMUEBLE.V_TIPO_MONEDA], 
            T.NID_VALOR_ADQUISICION AS [ALTA_INMUEBLE.NID_VALOR_ADQUISICION], 
            T.NID_FORMA_ADQUISICION AS [ALTA_INMUEBLE.NID_FORMA_ADQUISICION], 
            T.NID_FORMA_PAGO AS [ALTA_INMUEBLE.NID_FORMA_PAGO], 
            T.E_OBSERVACIONES AS [ALTA_INMUEBLE.E_OBSERVACIONES], 
            T.E_OBSERVACIONES_MARCADO AS [ALTA_INMUEBLE.E_OBSERVACIONES_MARCADO], 
            T.V_OBSERVACIONES_TESTADO AS [ALTA_INMUEBLE.V_OBSERVACIONES_TESTADO], 
            T.NID_ESTADO_TESTADO AS [ALTA_INMUEBLE.NID_ESTADO_TESTADO], 
            True AS _from0
        FROM ModelDeclaraStoreContainer.ALTA_INMUEBLE AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for cnxDeclara.ALTA_INMUEBLE_ADEUDO.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView138()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing ALTA_INMUEBLE_ADEUDO
        [ModelDeclara.ALTA_INMUEBLE_ADEUDO](T1.[ALTA_INMUEBLE_ADEUDO.VID_NOMBRE], T1.[ALTA_INMUEBLE_ADEUDO.VID_FECHA], T1.[ALTA_INMUEBLE_ADEUDO.VID_HOMOCLAVE], T1.[ALTA_INMUEBLE_ADEUDO.NID_DECLARACION], T1.[ALTA_INMUEBLE_ADEUDO.NID_INMUEBLE], T1.[ALTA_INMUEBLE_ADEUDO.NID_ADEUDO], T1.[ALTA_INMUEBLE_ADEUDO.L_DIF])
    FROM (
        SELECT 
            T.VID_NOMBRE AS [ALTA_INMUEBLE_ADEUDO.VID_NOMBRE], 
            T.VID_FECHA AS [ALTA_INMUEBLE_ADEUDO.VID_FECHA], 
            T.VID_HOMOCLAVE AS [ALTA_INMUEBLE_ADEUDO.VID_HOMOCLAVE], 
            T.NID_DECLARACION AS [ALTA_INMUEBLE_ADEUDO.NID_DECLARACION], 
            T.NID_INMUEBLE AS [ALTA_INMUEBLE_ADEUDO.NID_INMUEBLE], 
            T.NID_ADEUDO AS [ALTA_INMUEBLE_ADEUDO.NID_ADEUDO], 
            T.L_DIF AS [ALTA_INMUEBLE_ADEUDO.L_DIF], 
            True AS _from0
        FROM ModelDeclaraStoreContainer.ALTA_INMUEBLE_ADEUDO AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for cnxDeclara.ALTA_INMUEBLE_COPROPIETARIO.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView139()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing ALTA_INMUEBLE_COPROPIETARIO
        [ModelDeclara.ALTA_INMUEBLE_COPROPIETARIO](T1.[ALTA_INMUEBLE_COPROPIETARIO.VID_NOMBRE], T1.[ALTA_INMUEBLE_COPROPIETARIO.VID_FECHA], T1.[ALTA_INMUEBLE_COPROPIETARIO.VID_HOMOCLAVE], T1.[ALTA_INMUEBLE_COPROPIETARIO.NID_DECLARACION], T1.[ALTA_INMUEBLE_COPROPIETARIO.NID_INMUEBLE], T1.[ALTA_INMUEBLE_COPROPIETARIO.NID_COPROPIETARIO], T1.[ALTA_INMUEBLE_COPROPIETARIO.CID_TIPO_PERSONA], T1.[ALTA_INMUEBLE_COPROPIETARIO.V_NOMBRE], T1.[ALTA_INMUEBLE_COPROPIETARIO.V_RFC])
    FROM (
        SELECT 
            T.VID_NOMBRE AS [ALTA_INMUEBLE_COPROPIETARIO.VID_NOMBRE], 
            T.VID_FECHA AS [ALTA_INMUEBLE_COPROPIETARIO.VID_FECHA], 
            T.VID_HOMOCLAVE AS [ALTA_INMUEBLE_COPROPIETARIO.VID_HOMOCLAVE], 
            T.NID_DECLARACION AS [ALTA_INMUEBLE_COPROPIETARIO.NID_DECLARACION], 
            T.NID_INMUEBLE AS [ALTA_INMUEBLE_COPROPIETARIO.NID_INMUEBLE], 
            T.NID_COPROPIETARIO AS [ALTA_INMUEBLE_COPROPIETARIO.NID_COPROPIETARIO], 
            T.CID_TIPO_PERSONA AS [ALTA_INMUEBLE_COPROPIETARIO.CID_TIPO_PERSONA], 
            T.V_NOMBRE AS [ALTA_INMUEBLE_COPROPIETARIO.V_NOMBRE], 
            T.V_RFC AS [ALTA_INMUEBLE_COPROPIETARIO.V_RFC], 
            True AS _from0
        FROM ModelDeclaraStoreContainer.ALTA_INMUEBLE_COPROPIETARIO AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for cnxDeclara.ALTA_INMUEBLE_FORMA_ADQUISICION.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView140()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing ALTA_INMUEBLE_FORMA_ADQUISICION
        [ModelDeclara.ALTA_INMUEBLE_FORMA_ADQUISICION](T1.[ALTA_INMUEBLE_FORMA_ADQUISICION.VID_NOMBRE], T1.[ALTA_INMUEBLE_FORMA_ADQUISICION.VID_FECHA], T1.[ALTA_INMUEBLE_FORMA_ADQUISICION.VID_HOMOCLAVE], T1.[ALTA_INMUEBLE_FORMA_ADQUISICION.NID_DECLARACION], T1.[ALTA_INMUEBLE_FORMA_ADQUISICION.NID_INMUEBLE], T1.[ALTA_INMUEBLE_FORMA_ADQUISICION.NID_FORMA_ADQUISICION], T1.[ALTA_INMUEBLE_FORMA_ADQUISICION.M_DONACION])
    FROM (
        SELECT 
            T.VID_NOMBRE AS [ALTA_INMUEBLE_FORMA_ADQUISICION.VID_NOMBRE], 
            T.VID_FECHA AS [ALTA_INMUEBLE_FORMA_ADQUISICION.VID_FECHA], 
            T.VID_HOMOCLAVE AS [ALTA_INMUEBLE_FORMA_ADQUISICION.VID_HOMOCLAVE], 
            T.NID_DECLARACION AS [ALTA_INMUEBLE_FORMA_ADQUISICION.NID_DECLARACION], 
            T.NID_INMUEBLE AS [ALTA_INMUEBLE_FORMA_ADQUISICION.NID_INMUEBLE], 
            T.NID_FORMA_ADQUISICION AS [ALTA_INMUEBLE_FORMA_ADQUISICION.NID_FORMA_ADQUISICION], 
            T.M_DONACION AS [ALTA_INMUEBLE_FORMA_ADQUISICION.M_DONACION], 
            True AS _from0
        FROM ModelDeclaraStoreContainer.ALTA_INMUEBLE_FORMA_ADQUISICION AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for cnxDeclara.ALTA_INMUEBLE_PAGO_INICIAL.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView141()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing ALTA_INMUEBLE_PAGO_INICIAL
        [ModelDeclara.ALTA_INMUEBLE_PAGO_INICIAL](T1.[ALTA_INMUEBLE_PAGO_INICIAL.VID_NOMBRE], T1.[ALTA_INMUEBLE_PAGO_INICIAL.VID_FECHA], T1.[ALTA_INMUEBLE_PAGO_INICIAL.VID_HOMOCLAVE], T1.[ALTA_INMUEBLE_PAGO_INICIAL.NID_DECLARACION], T1.[ALTA_INMUEBLE_PAGO_INICIAL.NID_INMUEBLE], T1.[ALTA_INMUEBLE_PAGO_INICIAL.M_PAGO])
    FROM (
        SELECT 
            T.VID_NOMBRE AS [ALTA_INMUEBLE_PAGO_INICIAL.VID_NOMBRE], 
            T.VID_FECHA AS [ALTA_INMUEBLE_PAGO_INICIAL.VID_FECHA], 
            T.VID_HOMOCLAVE AS [ALTA_INMUEBLE_PAGO_INICIAL.VID_HOMOCLAVE], 
            T.NID_DECLARACION AS [ALTA_INMUEBLE_PAGO_INICIAL.NID_DECLARACION], 
            T.NID_INMUEBLE AS [ALTA_INMUEBLE_PAGO_INICIAL.NID_INMUEBLE], 
            T.M_PAGO AS [ALTA_INMUEBLE_PAGO_INICIAL.M_PAGO], 
            True AS _from0
        FROM ModelDeclaraStoreContainer.ALTA_INMUEBLE_PAGO_INICIAL AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for cnxDeclara.ALTA_INMUEBLE_TITULAR.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView142()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing ALTA_INMUEBLE_TITULAR
        [ModelDeclara.ALTA_INMUEBLE_TITULAR](T1.[ALTA_INMUEBLE_TITULAR.VID_NOMBRE], T1.[ALTA_INMUEBLE_TITULAR.VID_FECHA], T1.[ALTA_INMUEBLE_TITULAR.VID_HOMOCLAVE], T1.[ALTA_INMUEBLE_TITULAR.NID_DECLARACION], T1.[ALTA_INMUEBLE_TITULAR.NID_INMUEBLE], T1.[ALTA_INMUEBLE_TITULAR.NID_DEPENDIENTE], T1.[ALTA_INMUEBLE_TITULAR.L_DIF])
    FROM (
        SELECT 
            T.VID_NOMBRE AS [ALTA_INMUEBLE_TITULAR.VID_NOMBRE], 
            T.VID_FECHA AS [ALTA_INMUEBLE_TITULAR.VID_FECHA], 
            T.VID_HOMOCLAVE AS [ALTA_INMUEBLE_TITULAR.VID_HOMOCLAVE], 
            T.NID_DECLARACION AS [ALTA_INMUEBLE_TITULAR.NID_DECLARACION], 
            T.NID_INMUEBLE AS [ALTA_INMUEBLE_TITULAR.NID_INMUEBLE], 
            T.NID_DEPENDIENTE AS [ALTA_INMUEBLE_TITULAR.NID_DEPENDIENTE], 
            T.L_DIF AS [ALTA_INMUEBLE_TITULAR.L_DIF], 
            True AS _from0
        FROM ModelDeclaraStoreContainer.ALTA_INMUEBLE_TITULAR AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for cnxDeclara.ALTA_INVERSION.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView143()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing ALTA_INVERSION
        [ModelDeclara.ALTA_INVERSION](T1.[ALTA_INVERSION.VID_NOMBRE], T1.[ALTA_INVERSION.VID_FECHA], T1.[ALTA_INVERSION.VID_HOMOCLAVE], T1.[ALTA_INVERSION.NID_DECLARACION], T1.[ALTA_INVERSION.NID_INVERSION], T1.[ALTA_INVERSION.NID_TIPO_INVERSION], T1.[ALTA_INVERSION.NID_SUBTIPO_INVERSION], T1.[ALTA_INVERSION.NID_INSTITUCION], T1.[ALTA_INVERSION.E_CUENTA], T1.[ALTA_INVERSION.V_CUENTA_CORTO], T1.[ALTA_INVERSION.V_OTRO], T1.[ALTA_INVERSION.M_SALDO], T1.[ALTA_INVERSION.NID_PAIS], T1.[ALTA_INVERSION.CID_ENTIDAD_FEDERATIVA], T1.[ALTA_INVERSION.V_LUGAR], T1.[ALTA_INVERSION.F_APERTURA], T1.[ALTA_INVERSION.NID_PATRIMONIO], T1.[ALTA_INVERSION.V_RFC_INVERSION], T1.[ALTA_INVERSION.V_TIPO_MONEDA], T1.[ALTA_INVERSION.E_OBSERVACIONES], T1.[ALTA_INVERSION.E_OBSERVACIONES_MARCADO], T1.[ALTA_INVERSION.V_OBSERVACIONES_TESTADO], T1.[ALTA_INVERSION.NID_ESTADO_TESTADO])
    FROM (
        SELECT 
            T.VID_NOMBRE AS [ALTA_INVERSION.VID_NOMBRE], 
            T.VID_FECHA AS [ALTA_INVERSION.VID_FECHA], 
            T.VID_HOMOCLAVE AS [ALTA_INVERSION.VID_HOMOCLAVE], 
            T.NID_DECLARACION AS [ALTA_INVERSION.NID_DECLARACION], 
            T.NID_INVERSION AS [ALTA_INVERSION.NID_INVERSION], 
            T.NID_TIPO_INVERSION AS [ALTA_INVERSION.NID_TIPO_INVERSION], 
            T.NID_SUBTIPO_INVERSION AS [ALTA_INVERSION.NID_SUBTIPO_INVERSION], 
            T.NID_INSTITUCION AS [ALTA_INVERSION.NID_INSTITUCION], 
            T.E_CUENTA AS [ALTA_INVERSION.E_CUENTA], 
            T.V_CUENTA_CORTO AS [ALTA_INVERSION.V_CUENTA_CORTO], 
            T.V_OTRO AS [ALTA_INVERSION.V_OTRO], 
            T.M_SALDO AS [ALTA_INVERSION.M_SALDO], 
            T.NID_PAIS AS [ALTA_INVERSION.NID_PAIS], 
            T.CID_ENTIDAD_FEDERATIVA AS [ALTA_INVERSION.CID_ENTIDAD_FEDERATIVA], 
            T.V_LUGAR AS [ALTA_INVERSION.V_LUGAR], 
            T.F_APERTURA AS [ALTA_INVERSION.F_APERTURA], 
            T.NID_PATRIMONIO AS [ALTA_INVERSION.NID_PATRIMONIO], 
            T.V_RFC_INVERSION AS [ALTA_INVERSION.V_RFC_INVERSION], 
            T.V_TIPO_MONEDA AS [ALTA_INVERSION.V_TIPO_MONEDA], 
            T.E_OBSERVACIONES AS [ALTA_INVERSION.E_OBSERVACIONES], 
            T.E_OBSERVACIONES_MARCADO AS [ALTA_INVERSION.E_OBSERVACIONES_MARCADO], 
            T.V_OBSERVACIONES_TESTADO AS [ALTA_INVERSION.V_OBSERVACIONES_TESTADO], 
            T.NID_ESTADO_TESTADO AS [ALTA_INVERSION.NID_ESTADO_TESTADO], 
            True AS _from0
        FROM ModelDeclaraStoreContainer.ALTA_INVERSION AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for cnxDeclara.ALTA_INVERSION_COPROPIETARIO.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView144()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing ALTA_INVERSION_COPROPIETARIO
        [ModelDeclara.ALTA_INVERSION_COPROPIETARIO](T1.[ALTA_INVERSION_COPROPIETARIO.VID_NOMBRE], T1.[ALTA_INVERSION_COPROPIETARIO.VID_FECHA], T1.[ALTA_INVERSION_COPROPIETARIO.VID_HOMOCLAVE], T1.[ALTA_INVERSION_COPROPIETARIO.NID_DECLARACION], T1.[ALTA_INVERSION_COPROPIETARIO.NID_INVERSION], T1.[ALTA_INVERSION_COPROPIETARIO.NID_COPROPIETARIO], T1.[ALTA_INVERSION_COPROPIETARIO.CID_TIPO_PERSONA], T1.[ALTA_INVERSION_COPROPIETARIO.V_NOMBRE], T1.[ALTA_INVERSION_COPROPIETARIO.V_RFC])
    FROM (
        SELECT 
            T.VID_NOMBRE AS [ALTA_INVERSION_COPROPIETARIO.VID_NOMBRE], 
            T.VID_FECHA AS [ALTA_INVERSION_COPROPIETARIO.VID_FECHA], 
            T.VID_HOMOCLAVE AS [ALTA_INVERSION_COPROPIETARIO.VID_HOMOCLAVE], 
            T.NID_DECLARACION AS [ALTA_INVERSION_COPROPIETARIO.NID_DECLARACION], 
            T.NID_INVERSION AS [ALTA_INVERSION_COPROPIETARIO.NID_INVERSION], 
            T.NID_COPROPIETARIO AS [ALTA_INVERSION_COPROPIETARIO.NID_COPROPIETARIO], 
            T.CID_TIPO_PERSONA AS [ALTA_INVERSION_COPROPIETARIO.CID_TIPO_PERSONA], 
            T.V_NOMBRE AS [ALTA_INVERSION_COPROPIETARIO.V_NOMBRE], 
            T.V_RFC AS [ALTA_INVERSION_COPROPIETARIO.V_RFC], 
            True AS _from0
        FROM ModelDeclaraStoreContainer.ALTA_INVERSION_COPROPIETARIO AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for cnxDeclara.ALTA_INVERSION_TITULAR.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView145()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing ALTA_INVERSION_TITULAR
        [ModelDeclara.ALTA_INVERSION_TITULAR](T1.[ALTA_INVERSION_TITULAR.VID_NOMBRE], T1.[ALTA_INVERSION_TITULAR.VID_FECHA], T1.[ALTA_INVERSION_TITULAR.VID_HOMOCLAVE], T1.[ALTA_INVERSION_TITULAR.NID_DECLARACION], T1.[ALTA_INVERSION_TITULAR.NID_INVERSION], T1.[ALTA_INVERSION_TITULAR.NID_DEPENDIENTE], T1.[ALTA_INVERSION_TITULAR.L_DIF])
    FROM (
        SELECT 
            T.VID_NOMBRE AS [ALTA_INVERSION_TITULAR.VID_NOMBRE], 
            T.VID_FECHA AS [ALTA_INVERSION_TITULAR.VID_FECHA], 
            T.VID_HOMOCLAVE AS [ALTA_INVERSION_TITULAR.VID_HOMOCLAVE], 
            T.NID_DECLARACION AS [ALTA_INVERSION_TITULAR.NID_DECLARACION], 
            T.NID_INVERSION AS [ALTA_INVERSION_TITULAR.NID_INVERSION], 
            T.NID_DEPENDIENTE AS [ALTA_INVERSION_TITULAR.NID_DEPENDIENTE], 
            T.L_DIF AS [ALTA_INVERSION_TITULAR.L_DIF], 
            True AS _from0
        FROM ModelDeclaraStoreContainer.ALTA_INVERSION_TITULAR AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for cnxDeclara.ALTA_MUEBLE.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView146()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing ALTA_MUEBLE
        [ModelDeclara.ALTA_MUEBLE](T1.[ALTA_MUEBLE.VID_NOMBRE], T1.[ALTA_MUEBLE.VID_FECHA], T1.[ALTA_MUEBLE.VID_HOMOCLAVE], T1.[ALTA_MUEBLE.NID_DECLARACION], T1.[ALTA_MUEBLE.NID_MUEBLE], T1.[ALTA_MUEBLE.NID_TIPO], T1.[ALTA_MUEBLE.E_ESPECIFICACION], T1.[ALTA_MUEBLE.M_VALOR], T1.[ALTA_MUEBLE.NID_PATRIMONIO], T1.[ALTA_MUEBLE.L_CREDITO], T1.[ALTA_MUEBLE.F_ADQUISICION], T1.[ALTA_MUEBLE.CID_TIPO_PERSONA_TRANSMISOR], T1.[ALTA_MUEBLE.E_NOMBRE_TRANSMISOR], T1.[ALTA_MUEBLE.E_RFC_TRANSMISOR], T1.[ALTA_MUEBLE.NID_RELACION_TRANSMISOR], T1.[ALTA_MUEBLE.V_TIPO_MONEDA], T1.[ALTA_MUEBLE.NID_FORMA_ADQUISICION], T1.[ALTA_MUEBLE.NID_FORMA_PAGO], T1.[ALTA_MUEBLE.E_OBSERVACIONES], T1.[ALTA_MUEBLE.E_OBSERVACIONES_MARCADO], T1.[ALTA_MUEBLE.V_OBSERVACIONES_TESTADO], T1.[ALTA_MUEBLE.NID_ESTADO_TESTADO])
    FROM (
        SELECT 
            T.VID_NOMBRE AS [ALTA_MUEBLE.VID_NOMBRE], 
            T.VID_FECHA AS [ALTA_MUEBLE.VID_FECHA], 
            T.VID_HOMOCLAVE AS [ALTA_MUEBLE.VID_HOMOCLAVE], 
            T.NID_DECLARACION AS [ALTA_MUEBLE.NID_DECLARACION], 
            T.NID_MUEBLE AS [ALTA_MUEBLE.NID_MUEBLE], 
            T.NID_TIPO AS [ALTA_MUEBLE.NID_TIPO], 
            T.E_ESPECIFICACION AS [ALTA_MUEBLE.E_ESPECIFICACION], 
            T.M_VALOR AS [ALTA_MUEBLE.M_VALOR], 
            T.NID_PATRIMONIO AS [ALTA_MUEBLE.NID_PATRIMONIO], 
            T.L_CREDITO AS [ALTA_MUEBLE.L_CREDITO], 
            T.F_ADQUISICION AS [ALTA_MUEBLE.F_ADQUISICION], 
            T.CID_TIPO_PERSONA_TRANSMISOR AS [ALTA_MUEBLE.CID_TIPO_PERSONA_TRANSMISOR], 
            T.E_NOMBRE_TRANSMISOR AS [ALTA_MUEBLE.E_NOMBRE_TRANSMISOR], 
            T.E_RFC_TRANSMISOR AS [ALTA_MUEBLE.E_RFC_TRANSMISOR], 
            T.NID_RELACION_TRANSMISOR AS [ALTA_MUEBLE.NID_RELACION_TRANSMISOR], 
            T.V_TIPO_MONEDA AS [ALTA_MUEBLE.V_TIPO_MONEDA], 
            T.NID_FORMA_ADQUISICION AS [ALTA_MUEBLE.NID_FORMA_ADQUISICION], 
            T.NID_FORMA_PAGO AS [ALTA_MUEBLE.NID_FORMA_PAGO], 
            T.E_OBSERVACIONES AS [ALTA_MUEBLE.E_OBSERVACIONES], 
            T.E_OBSERVACIONES_MARCADO AS [ALTA_MUEBLE.E_OBSERVACIONES_MARCADO], 
            T.V_OBSERVACIONES_TESTADO AS [ALTA_MUEBLE.V_OBSERVACIONES_TESTADO], 
            T.NID_ESTADO_TESTADO AS [ALTA_MUEBLE.NID_ESTADO_TESTADO], 
            True AS _from0
        FROM ModelDeclaraStoreContainer.ALTA_MUEBLE AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for cnxDeclara.ALTA_MUEBLE_COPROPIETARIO.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView147()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing ALTA_MUEBLE_COPROPIETARIO
        [ModelDeclara.ALTA_MUEBLE_COPROPIETARIO](T1.[ALTA_MUEBLE_COPROPIETARIO.VID_NOMBRE], T1.[ALTA_MUEBLE_COPROPIETARIO.VID_FECHA], T1.[ALTA_MUEBLE_COPROPIETARIO.VID_HOMOCLAVE], T1.[ALTA_MUEBLE_COPROPIETARIO.NID_DECLARACION], T1.[ALTA_MUEBLE_COPROPIETARIO.NID_MUEBLE], T1.[ALTA_MUEBLE_COPROPIETARIO.NID_COPROPIETARIO], T1.[ALTA_MUEBLE_COPROPIETARIO.CID_TIPO_PERSONA], T1.[ALTA_MUEBLE_COPROPIETARIO.V_NOMBRE], T1.[ALTA_MUEBLE_COPROPIETARIO.V_RFC])
    FROM (
        SELECT 
            T.VID_NOMBRE AS [ALTA_MUEBLE_COPROPIETARIO.VID_NOMBRE], 
            T.VID_FECHA AS [ALTA_MUEBLE_COPROPIETARIO.VID_FECHA], 
            T.VID_HOMOCLAVE AS [ALTA_MUEBLE_COPROPIETARIO.VID_HOMOCLAVE], 
            T.NID_DECLARACION AS [ALTA_MUEBLE_COPROPIETARIO.NID_DECLARACION], 
            T.NID_MUEBLE AS [ALTA_MUEBLE_COPROPIETARIO.NID_MUEBLE], 
            T.NID_COPROPIETARIO AS [ALTA_MUEBLE_COPROPIETARIO.NID_COPROPIETARIO], 
            T.CID_TIPO_PERSONA AS [ALTA_MUEBLE_COPROPIETARIO.CID_TIPO_PERSONA], 
            T.V_NOMBRE AS [ALTA_MUEBLE_COPROPIETARIO.V_NOMBRE], 
            T.V_RFC AS [ALTA_MUEBLE_COPROPIETARIO.V_RFC], 
            True AS _from0
        FROM ModelDeclaraStoreContainer.ALTA_MUEBLE_COPROPIETARIO AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for cnxDeclara.ALTA_MUEBLE_FORMA_ADQUISICION.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView148()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing ALTA_MUEBLE_FORMA_ADQUISICION
        [ModelDeclara.ALTA_MUEBLE_FORMA_ADQUISICION](T1.[ALTA_MUEBLE_FORMA_ADQUISICION.VID_NOMBRE], T1.[ALTA_MUEBLE_FORMA_ADQUISICION.VID_FECHA], T1.[ALTA_MUEBLE_FORMA_ADQUISICION.VID_HOMOCLAVE], T1.[ALTA_MUEBLE_FORMA_ADQUISICION.NID_DECLARACION], T1.[ALTA_MUEBLE_FORMA_ADQUISICION.NID_MUEBLE], T1.[ALTA_MUEBLE_FORMA_ADQUISICION.NID_FORMA_ADQUISICION], T1.[ALTA_MUEBLE_FORMA_ADQUISICION.M_DONACION])
    FROM (
        SELECT 
            T.VID_NOMBRE AS [ALTA_MUEBLE_FORMA_ADQUISICION.VID_NOMBRE], 
            T.VID_FECHA AS [ALTA_MUEBLE_FORMA_ADQUISICION.VID_FECHA], 
            T.VID_HOMOCLAVE AS [ALTA_MUEBLE_FORMA_ADQUISICION.VID_HOMOCLAVE], 
            T.NID_DECLARACION AS [ALTA_MUEBLE_FORMA_ADQUISICION.NID_DECLARACION], 
            T.NID_MUEBLE AS [ALTA_MUEBLE_FORMA_ADQUISICION.NID_MUEBLE], 
            T.NID_FORMA_ADQUISICION AS [ALTA_MUEBLE_FORMA_ADQUISICION.NID_FORMA_ADQUISICION], 
            T.M_DONACION AS [ALTA_MUEBLE_FORMA_ADQUISICION.M_DONACION], 
            True AS _from0
        FROM ModelDeclaraStoreContainer.ALTA_MUEBLE_FORMA_ADQUISICION AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for cnxDeclara.ALTA_MUEBLE_TITULAR.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView149()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing ALTA_MUEBLE_TITULAR
        [ModelDeclara.ALTA_MUEBLE_TITULAR](T1.[ALTA_MUEBLE_TITULAR.VID_NOMBRE], T1.[ALTA_MUEBLE_TITULAR.VID_FECHA], T1.[ALTA_MUEBLE_TITULAR.VID_HOMOCLAVE], T1.[ALTA_MUEBLE_TITULAR.NID_DECLARACION], T1.[ALTA_MUEBLE_TITULAR.NID_MUEBLE], T1.[ALTA_MUEBLE_TITULAR.NID_DEPENDIENTE], T1.[ALTA_MUEBLE_TITULAR.L_DIF])
    FROM (
        SELECT 
            T.VID_NOMBRE AS [ALTA_MUEBLE_TITULAR.VID_NOMBRE], 
            T.VID_FECHA AS [ALTA_MUEBLE_TITULAR.VID_FECHA], 
            T.VID_HOMOCLAVE AS [ALTA_MUEBLE_TITULAR.VID_HOMOCLAVE], 
            T.NID_DECLARACION AS [ALTA_MUEBLE_TITULAR.NID_DECLARACION], 
            T.NID_MUEBLE AS [ALTA_MUEBLE_TITULAR.NID_MUEBLE], 
            T.NID_DEPENDIENTE AS [ALTA_MUEBLE_TITULAR.NID_DEPENDIENTE], 
            T.L_DIF AS [ALTA_MUEBLE_TITULAR.L_DIF], 
            True AS _from0
        FROM ModelDeclaraStoreContainer.ALTA_MUEBLE_TITULAR AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for cnxDeclara.ALTA_TARJETA.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView150()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing ALTA_TARJETA
        [ModelDeclara.ALTA_TARJETA](T1.[ALTA_TARJETA.VID_NOMBRE], T1.[ALTA_TARJETA.VID_FECHA], T1.[ALTA_TARJETA.VID_HOMOCLAVE], T1.[ALTA_TARJETA.NID_DECLARACION], T1.[ALTA_TARJETA.E_NUMERO], T1.[ALTA_TARJETA.V_NUMERO_CORTO], T1.[ALTA_TARJETA.M_SALDO], T1.[ALTA_TARJETA.NID_TITULAR])
    FROM (
        SELECT 
            T.VID_NOMBRE AS [ALTA_TARJETA.VID_NOMBRE], 
            T.VID_FECHA AS [ALTA_TARJETA.VID_FECHA], 
            T.VID_HOMOCLAVE AS [ALTA_TARJETA.VID_HOMOCLAVE], 
            T.NID_DECLARACION AS [ALTA_TARJETA.NID_DECLARACION], 
            T.E_NUMERO AS [ALTA_TARJETA.E_NUMERO], 
            T.V_NUMERO_CORTO AS [ALTA_TARJETA.V_NUMERO_CORTO], 
            T.M_SALDO AS [ALTA_TARJETA.M_SALDO], 
            T.NID_TITULAR AS [ALTA_TARJETA.NID_TITULAR], 
            True AS _from0
        FROM ModelDeclaraStoreContainer.ALTA_TARJETA AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for cnxDeclara.ALTA_VEHICULO.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView151()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing ALTA_VEHICULO
        [ModelDeclara.ALTA_VEHICULO](T1.[ALTA_VEHICULO.VID_NOMBRE], T1.[ALTA_VEHICULO.VID_FECHA], T1.[ALTA_VEHICULO.VID_HOMOCLAVE], T1.[ALTA_VEHICULO.NID_DECLARACION], T1.[ALTA_VEHICULO.NID_VEHICULO], T1.[ALTA_VEHICULO.NID_MARCA], T1.[ALTA_VEHICULO.C_MODELO], T1.[ALTA_VEHICULO.V_DESCRIPCION], T1.[ALTA_VEHICULO.F_ADQUISICION], T1.[ALTA_VEHICULO.NID_TIPO_VEHICULO], T1.[ALTA_VEHICULO.NID_USO], T1.[ALTA_VEHICULO.M_VALOR_VEHICULO], T1.[ALTA_VEHICULO.V_TIPO_MONEDA], T1.[ALTA_VEHICULO.E_NUMERO_SERIE], T1.[ALTA_VEHICULO.NID_PAIS], T1.[ALTA_VEHICULO.CID_ENTIDAD_FEDERATIVA], T1.[ALTA_VEHICULO.NID_PATRIMONIO], T1.[ALTA_VEHICULO.CID_TIPO_PERSONA_TRANSMISOR], T1.[ALTA_VEHICULO.E_NOMBRE_TRANSMISOR], T1.[ALTA_VEHICULO.E_RFC_TRANSMISOR], T1.[ALTA_VEHICULO.NID_RELACION_TRANSMISOR], T1.[ALTA_VEHICULO.NID_FORMA_ADQUISICION], T1.[ALTA_VEHICULO.NID_FORMA_PAGO], T1.[ALTA_VEHICULO.E_OBSERVACIONES], T1.[ALTA_VEHICULO.E_OBSERVACIONES_MARCADO], T1.[ALTA_VEHICULO.V_OBSERVACIONES_TESTADO], T1.[ALTA_VEHICULO.NID_ESTADO_TESTADO])
    FROM (
        SELECT 
            T.VID_NOMBRE AS [ALTA_VEHICULO.VID_NOMBRE], 
            T.VID_FECHA AS [ALTA_VEHICULO.VID_FECHA], 
            T.VID_HOMOCLAVE AS [ALTA_VEHICULO.VID_HOMOCLAVE], 
            T.NID_DECLARACION AS [ALTA_VEHICULO.NID_DECLARACION], 
            T.NID_VEHICULO AS [ALTA_VEHICULO.NID_VEHICULO], 
            T.NID_MARCA AS [ALTA_VEHICULO.NID_MARCA], 
            T.C_MODELO AS [ALTA_VEHICULO.C_MODELO], 
            T.V_DESCRIPCION AS [ALTA_VEHICULO.V_DESCRIPCION], 
            T.F_ADQUISICION AS [ALTA_VEHICULO.F_ADQUISICION], 
            T.NID_TIPO_VEHICULO AS [ALTA_VEHICULO.NID_TIPO_VEHICULO], 
            T.NID_USO AS [ALTA_VEHICULO.NID_USO], 
            T.M_VALOR_VEHICULO AS [ALTA_VEHICULO.M_VALOR_VEHICULO], 
            T.V_TIPO_MONEDA AS [ALTA_VEHICULO.V_TIPO_MONEDA], 
            T.E_NUMERO_SERIE AS [ALTA_VEHICULO.E_NUMERO_SERIE], 
            T.NID_PAIS AS [ALTA_VEHICULO.NID_PAIS], 
            T.CID_ENTIDAD_FEDERATIVA AS [ALTA_VEHICULO.CID_ENTIDAD_FEDERATIVA], 
            T.NID_PATRIMONIO AS [ALTA_VEHICULO.NID_PATRIMONIO], 
            T.CID_TIPO_PERSONA_TRANSMISOR AS [ALTA_VEHICULO.CID_TIPO_PERSONA_TRANSMISOR], 
            T.E_NOMBRE_TRANSMISOR AS [ALTA_VEHICULO.E_NOMBRE_TRANSMISOR], 
            T.E_RFC_TRANSMISOR AS [ALTA_VEHICULO.E_RFC_TRANSMISOR], 
            T.NID_RELACION_TRANSMISOR AS [ALTA_VEHICULO.NID_RELACION_TRANSMISOR], 
            T.NID_FORMA_ADQUISICION AS [ALTA_VEHICULO.NID_FORMA_ADQUISICION], 
            T.NID_FORMA_PAGO AS [ALTA_VEHICULO.NID_FORMA_PAGO], 
            T.E_OBSERVACIONES AS [ALTA_VEHICULO.E_OBSERVACIONES], 
            T.E_OBSERVACIONES_MARCADO AS [ALTA_VEHICULO.E_OBSERVACIONES_MARCADO], 
            T.V_OBSERVACIONES_TESTADO AS [ALTA_VEHICULO.V_OBSERVACIONES_TESTADO], 
            T.NID_ESTADO_TESTADO AS [ALTA_VEHICULO.NID_ESTADO_TESTADO], 
            True AS _from0
        FROM ModelDeclaraStoreContainer.ALTA_VEHICULO AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for cnxDeclara.ALTA_VEHICULO_ADEUDO.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView152()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing ALTA_VEHICULO_ADEUDO
        [ModelDeclara.ALTA_VEHICULO_ADEUDO](T1.[ALTA_VEHICULO_ADEUDO.VID_NOMBRE], T1.[ALTA_VEHICULO_ADEUDO.VID_FECHA], T1.[ALTA_VEHICULO_ADEUDO.VID_HOMOCLAVE], T1.[ALTA_VEHICULO_ADEUDO.NID_DECLARACION], T1.[ALTA_VEHICULO_ADEUDO.NID_VEHICULO], T1.[ALTA_VEHICULO_ADEUDO.NID_ADEUDO])
    FROM (
        SELECT 
            T.VID_NOMBRE AS [ALTA_VEHICULO_ADEUDO.VID_NOMBRE], 
            T.VID_FECHA AS [ALTA_VEHICULO_ADEUDO.VID_FECHA], 
            T.VID_HOMOCLAVE AS [ALTA_VEHICULO_ADEUDO.VID_HOMOCLAVE], 
            T.NID_DECLARACION AS [ALTA_VEHICULO_ADEUDO.NID_DECLARACION], 
            T.NID_VEHICULO AS [ALTA_VEHICULO_ADEUDO.NID_VEHICULO], 
            T.NID_ADEUDO AS [ALTA_VEHICULO_ADEUDO.NID_ADEUDO], 
            True AS _from0
        FROM ModelDeclaraStoreContainer.ALTA_VEHICULO_ADEUDO AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for cnxDeclara.ALTA_VEHICULO_COPROPIETARIO.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView153()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing ALTA_VEHICULO_COPROPIETARIO
        [ModelDeclara.ALTA_VEHICULO_COPROPIETARIO](T1.[ALTA_VEHICULO_COPROPIETARIO.VID_NOMBRE], T1.[ALTA_VEHICULO_COPROPIETARIO.VID_FECHA], T1.[ALTA_VEHICULO_COPROPIETARIO.VID_HOMOCLAVE], T1.[ALTA_VEHICULO_COPROPIETARIO.NID_DECLARACION], T1.[ALTA_VEHICULO_COPROPIETARIO.NID_VEHICULO], T1.[ALTA_VEHICULO_COPROPIETARIO.NID_COPROPIETARIO], T1.[ALTA_VEHICULO_COPROPIETARIO.CID_TIPO_PERSONA], T1.[ALTA_VEHICULO_COPROPIETARIO.V_NOMBRE], T1.[ALTA_VEHICULO_COPROPIETARIO.V_RFC])
    FROM (
        SELECT 
            T.VID_NOMBRE AS [ALTA_VEHICULO_COPROPIETARIO.VID_NOMBRE], 
            T.VID_FECHA AS [ALTA_VEHICULO_COPROPIETARIO.VID_FECHA], 
            T.VID_HOMOCLAVE AS [ALTA_VEHICULO_COPROPIETARIO.VID_HOMOCLAVE], 
            T.NID_DECLARACION AS [ALTA_VEHICULO_COPROPIETARIO.NID_DECLARACION], 
            T.NID_VEHICULO AS [ALTA_VEHICULO_COPROPIETARIO.NID_VEHICULO], 
            T.NID_COPROPIETARIO AS [ALTA_VEHICULO_COPROPIETARIO.NID_COPROPIETARIO], 
            T.CID_TIPO_PERSONA AS [ALTA_VEHICULO_COPROPIETARIO.CID_TIPO_PERSONA], 
            T.V_NOMBRE AS [ALTA_VEHICULO_COPROPIETARIO.V_NOMBRE], 
            T.V_RFC AS [ALTA_VEHICULO_COPROPIETARIO.V_RFC], 
            True AS _from0
        FROM ModelDeclaraStoreContainer.ALTA_VEHICULO_COPROPIETARIO AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for cnxDeclara.ALTA_VEHICULO_FORMA_ADQUISICION.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView154()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing ALTA_VEHICULO_FORMA_ADQUISICION
        [ModelDeclara.ALTA_VEHICULO_FORMA_ADQUISICION](T1.[ALTA_VEHICULO_FORMA_ADQUISICION.VID_NOMBRE], T1.[ALTA_VEHICULO_FORMA_ADQUISICION.VID_FECHA], T1.[ALTA_VEHICULO_FORMA_ADQUISICION.VID_HOMOCLAVE], T1.[ALTA_VEHICULO_FORMA_ADQUISICION.NID_DECLARACION], T1.[ALTA_VEHICULO_FORMA_ADQUISICION.NID_VEHICULO], T1.[ALTA_VEHICULO_FORMA_ADQUISICION.NID_FORMA_ADQUISICION], T1.[ALTA_VEHICULO_FORMA_ADQUISICION.M_DONACION])
    FROM (
        SELECT 
            T.VID_NOMBRE AS [ALTA_VEHICULO_FORMA_ADQUISICION.VID_NOMBRE], 
            T.VID_FECHA AS [ALTA_VEHICULO_FORMA_ADQUISICION.VID_FECHA], 
            T.VID_HOMOCLAVE AS [ALTA_VEHICULO_FORMA_ADQUISICION.VID_HOMOCLAVE], 
            T.NID_DECLARACION AS [ALTA_VEHICULO_FORMA_ADQUISICION.NID_DECLARACION], 
            T.NID_VEHICULO AS [ALTA_VEHICULO_FORMA_ADQUISICION.NID_VEHICULO], 
            T.NID_FORMA_ADQUISICION AS [ALTA_VEHICULO_FORMA_ADQUISICION.NID_FORMA_ADQUISICION], 
            T.M_DONACION AS [ALTA_VEHICULO_FORMA_ADQUISICION.M_DONACION], 
            True AS _from0
        FROM ModelDeclaraStoreContainer.ALTA_VEHICULO_FORMA_ADQUISICION AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for cnxDeclara.ALTA_VEHICULO_PAGO_INICIAL.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView155()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing ALTA_VEHICULO_PAGO_INICIAL
        [ModelDeclara.ALTA_VEHICULO_PAGO_INICIAL](T1.[ALTA_VEHICULO_PAGO_INICIAL.VID_NOMBRE], T1.[ALTA_VEHICULO_PAGO_INICIAL.VID_FECHA], T1.[ALTA_VEHICULO_PAGO_INICIAL.VID_HOMOCLAVE], T1.[ALTA_VEHICULO_PAGO_INICIAL.NID_DECLARACION], T1.[ALTA_VEHICULO_PAGO_INICIAL.NID_VEHICULO], T1.[ALTA_VEHICULO_PAGO_INICIAL.M_PAGO])
    FROM (
        SELECT 
            T.VID_NOMBRE AS [ALTA_VEHICULO_PAGO_INICIAL.VID_NOMBRE], 
            T.VID_FECHA AS [ALTA_VEHICULO_PAGO_INICIAL.VID_FECHA], 
            T.VID_HOMOCLAVE AS [ALTA_VEHICULO_PAGO_INICIAL.VID_HOMOCLAVE], 
            T.NID_DECLARACION AS [ALTA_VEHICULO_PAGO_INICIAL.NID_DECLARACION], 
            T.NID_VEHICULO AS [ALTA_VEHICULO_PAGO_INICIAL.NID_VEHICULO], 
            T.M_PAGO AS [ALTA_VEHICULO_PAGO_INICIAL.M_PAGO], 
            True AS _from0
        FROM ModelDeclaraStoreContainer.ALTA_VEHICULO_PAGO_INICIAL AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for cnxDeclara.ALTA_VEHICULO_TITULAR.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView156()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing ALTA_VEHICULO_TITULAR
        [ModelDeclara.ALTA_VEHICULO_TITULAR](T1.[ALTA_VEHICULO_TITULAR.VID_NOMBRE], T1.[ALTA_VEHICULO_TITULAR.VID_FECHA], T1.[ALTA_VEHICULO_TITULAR.VID_HOMOCLAVE], T1.[ALTA_VEHICULO_TITULAR.NID_DECLARACION], T1.[ALTA_VEHICULO_TITULAR.NID_VEHICULO], T1.[ALTA_VEHICULO_TITULAR.NID_DEPENDIENTE], T1.[ALTA_VEHICULO_TITULAR.L_DIF])
    FROM (
        SELECT 
            T.VID_NOMBRE AS [ALTA_VEHICULO_TITULAR.VID_NOMBRE], 
            T.VID_FECHA AS [ALTA_VEHICULO_TITULAR.VID_FECHA], 
            T.VID_HOMOCLAVE AS [ALTA_VEHICULO_TITULAR.VID_HOMOCLAVE], 
            T.NID_DECLARACION AS [ALTA_VEHICULO_TITULAR.NID_DECLARACION], 
            T.NID_VEHICULO AS [ALTA_VEHICULO_TITULAR.NID_VEHICULO], 
            T.NID_DEPENDIENTE AS [ALTA_VEHICULO_TITULAR.NID_DEPENDIENTE], 
            T.L_DIF AS [ALTA_VEHICULO_TITULAR.L_DIF], 
            True AS _from0
        FROM ModelDeclaraStoreContainer.ALTA_VEHICULO_TITULAR AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for cnxDeclara.CAT_AMBITO_PUBLICO.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView157()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing CAT_AMBITO_PUBLICO
        [ModelDeclara.CAT_AMBITO_PUBLICO](T1.[CAT_AMBITO_PUBLICO.NID_AMBITO_PUBLICO], T1.[CAT_AMBITO_PUBLICO.V_AMBITO_PUBLICO])
    FROM (
        SELECT 
            T.NID_AMBITO_PUBLICO AS [CAT_AMBITO_PUBLICO.NID_AMBITO_PUBLICO], 
            T.V_AMBITO_PUBLICO AS [CAT_AMBITO_PUBLICO.V_AMBITO_PUBLICO], 
            True AS _from0
        FROM ModelDeclaraStoreContainer.CAT_AMBITO_PUBLICO AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for cnxDeclara.CAT_AMBITO_SECTOR.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView158()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing CAT_AMBITO_SECTOR
        [ModelDeclara.CAT_AMBITO_SECTOR](T1.[CAT_AMBITO_SECTOR.NID_AMBITO_SECTOR], T1.[CAT_AMBITO_SECTOR.V_AMBITO_SECTOR])
    FROM (
        SELECT 
            T.NID_AMBITO_SECTOR AS [CAT_AMBITO_SECTOR.NID_AMBITO_SECTOR], 
            T.V_AMBITO_SECTOR AS [CAT_AMBITO_SECTOR.V_AMBITO_SECTOR], 
            True AS _from0
        FROM ModelDeclaraStoreContainer.CAT_AMBITO_SECTOR AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for cnxDeclara.CAT_CODIGO_POSTAL.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView159()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing CAT_CODIGO_POSTAL
        [ModelDeclara.CAT_CODIGO_POSTAL](T1.[CAT_CODIGO_POSTAL.NID_PAIS], T1.[CAT_CODIGO_POSTAL.CID_ENTIDAD_FEDERATIVA], T1.[CAT_CODIGO_POSTAL.CID_MUNICIPIO], T1.[CAT_CODIGO_POSTAL.CID_CODIGO_POSTAL], T1.[CAT_CODIGO_POSTAL.NID_COLONIA], T1.[CAT_CODIGO_POSTAL.V_COLONIA])
    FROM (
        SELECT 
            T.NID_PAIS AS [CAT_CODIGO_POSTAL.NID_PAIS], 
            T.CID_ENTIDAD_FEDERATIVA AS [CAT_CODIGO_POSTAL.CID_ENTIDAD_FEDERATIVA], 
            T.CID_MUNICIPIO AS [CAT_CODIGO_POSTAL.CID_MUNICIPIO], 
            T.CID_CODIGO_POSTAL AS [CAT_CODIGO_POSTAL.CID_CODIGO_POSTAL], 
            T.NID_COLONIA AS [CAT_CODIGO_POSTAL.NID_COLONIA], 
            T.V_COLONIA AS [CAT_CODIGO_POSTAL.V_COLONIA], 
            True AS _from0
        FROM ModelDeclaraStoreContainer.CAT_CODIGO_POSTAL AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for cnxDeclara.CAT_DOCUMENTO_OBTENIDO.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView160()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing CAT_DOCUMENTO_OBTENIDO
        [ModelDeclara.CAT_DOCUMENTO_OBTENIDO](T1.[CAT_DOCUMENTO_OBTENIDO.NID_DOCUMENTO_OBTENIDO], T1.[CAT_DOCUMENTO_OBTENIDO.V_DOCUMENTO_OBTENIDO])
    FROM (
        SELECT 
            T.NID_DOCUMENTO_OBTENIDO AS [CAT_DOCUMENTO_OBTENIDO.NID_DOCUMENTO_OBTENIDO], 
            T.V_DOCUMENTO_OBTENIDO AS [CAT_DOCUMENTO_OBTENIDO.V_DOCUMENTO_OBTENIDO], 
            True AS _from0
        FROM ModelDeclaraStoreContainer.CAT_DOCUMENTO_OBTENIDO AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for cnxDeclara.CAT_ENTIDAD_FEDERATIVA.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView161()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing CAT_ENTIDAD_FEDERATIVA
        [ModelDeclara.CAT_ENTIDAD_FEDERATIVA](T1.[CAT_ENTIDAD_FEDERATIVA.NID_PAIS], T1.[CAT_ENTIDAD_FEDERATIVA.CID_ENTIDAD_FEDERATIVA], T1.[CAT_ENTIDAD_FEDERATIVA.V_ENTIDAD_FEDERATIVA])
    FROM (
        SELECT 
            T.NID_PAIS AS [CAT_ENTIDAD_FEDERATIVA.NID_PAIS], 
            T.CID_ENTIDAD_FEDERATIVA AS [CAT_ENTIDAD_FEDERATIVA.CID_ENTIDAD_FEDERATIVA], 
            T.V_ENTIDAD_FEDERATIVA AS [CAT_ENTIDAD_FEDERATIVA.V_ENTIDAD_FEDERATIVA], 
            True AS _from0
        FROM ModelDeclaraStoreContainer.CAT_ENTIDAD_FEDERATIVA AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for cnxDeclara.CAT_ESTADO_DECLARACION.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView162()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing CAT_ESTADO_DECLARACION
        [ModelDeclara.CAT_ESTADO_DECLARACION](T1.[CAT_ESTADO_DECLARACION.NID_ESTADO], T1.[CAT_ESTADO_DECLARACION.V_ESTADO])
    FROM (
        SELECT 
            T.NID_ESTADO AS [CAT_ESTADO_DECLARACION.NID_ESTADO], 
            T.V_ESTADO AS [CAT_ESTADO_DECLARACION.V_ESTADO], 
            True AS _from0
        FROM ModelDeclaraStoreContainer.CAT_ESTADO_DECLARACION AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for cnxDeclara.CAT_ESTADO_ESCOLARIDAD.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView163()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing CAT_ESTADO_ESCOLARIDAD
        [ModelDeclara.CAT_ESTADO_ESCOLARIDAD](T1.[CAT_ESTADO_ESCOLARIDAD.NID_ESTADO_ESCOLARIDAD], T1.[CAT_ESTADO_ESCOLARIDAD.V_ESTADO_ESCOLARIDAD])
    FROM (
        SELECT 
            T.NID_ESTADO_ESCOLARIDAD AS [CAT_ESTADO_ESCOLARIDAD.NID_ESTADO_ESCOLARIDAD], 
            T.V_ESTADO_ESCOLARIDAD AS [CAT_ESTADO_ESCOLARIDAD.V_ESTADO_ESCOLARIDAD], 
            True AS _from0
        FROM ModelDeclaraStoreContainer.CAT_ESTADO_ESCOLARIDAD AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for cnxDeclara.CAT_ESTADO_TESTADO.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView164()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing CAT_ESTADO_TESTADO
        [ModelDeclara.CAT_ESTADO_TESTADO](T1.[CAT_ESTADO_TESTADO.NID_ESTADO_TESTADO], T1.[CAT_ESTADO_TESTADO.V_ESTADO_TESTADO])
    FROM (
        SELECT 
            T.NID_ESTADO_TESTADO AS [CAT_ESTADO_TESTADO.NID_ESTADO_TESTADO], 
            T.V_ESTADO_TESTADO AS [CAT_ESTADO_TESTADO.V_ESTADO_TESTADO], 
            True AS _from0
        FROM ModelDeclaraStoreContainer.CAT_ESTADO_TESTADO AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for cnxDeclara.CAT_FORMA_ADQUISICION.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView165()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing CAT_FORMA_ADQUISICION
        [ModelDeclara.CAT_FORMA_ADQUISICION](T1.[CAT_FORMA_ADQUISICION.NID_FORMA_ADQUISICION], T1.[CAT_FORMA_ADQUISICION.V_FORMA_ADQUISICION])
    FROM (
        SELECT 
            T.NID_FORMA_ADQUISICION AS [CAT_FORMA_ADQUISICION.NID_FORMA_ADQUISICION], 
            T.V_FORMA_ADQUISICION AS [CAT_FORMA_ADQUISICION.V_FORMA_ADQUISICION], 
            True AS _from0
        FROM ModelDeclaraStoreContainer.CAT_FORMA_ADQUISICION AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for cnxDeclara.CAT_FORMA_PAGO.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView166()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing CAT_FORMA_PAGO
        [ModelDeclara.CAT_FORMA_PAGO](T1.[CAT_FORMA_PAGO.NID_FORMA_PAGO], T1.[CAT_FORMA_PAGO.V_FORMA_PAGO])
    FROM (
        SELECT 
            T.NID_FORMA_PAGO AS [CAT_FORMA_PAGO.NID_FORMA_PAGO], 
            T.V_FORMA_PAGO AS [CAT_FORMA_PAGO.V_FORMA_PAGO], 
            True AS _from0
        FROM ModelDeclaraStoreContainer.CAT_FORMA_PAGO AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for cnxDeclara.CAT_INST_FINANCIERA.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView167()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing CAT_INST_FINANCIERA
        [ModelDeclara.CAT_INST_FINANCIERA](T1.[CAT_INST_FINANCIERA.NID_INSTITUCION], T1.[CAT_INST_FINANCIERA.V_INSTITUCION], T1.[CAT_INST_FINANCIERA.L_ACTIVO])
    FROM (
        SELECT 
            T.NID_INSTITUCION AS [CAT_INST_FINANCIERA.NID_INSTITUCION], 
            T.V_INSTITUCION AS [CAT_INST_FINANCIERA.V_INSTITUCION], 
            T.L_ACTIVO AS [CAT_INST_FINANCIERA.L_ACTIVO], 
            True AS _from0
        FROM ModelDeclaraStoreContainer.CAT_INST_FINANCIERA AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for cnxDeclara.CAT_MARCA_VEHICULO.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView168()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing CAT_MARCA_VEHICULO
        [ModelDeclara.CAT_MARCA_VEHICULO](T1.[CAT_MARCA_VEHICULO.NID_MARCA], T1.[CAT_MARCA_VEHICULO.V_MARCA])
    FROM (
        SELECT 
            T.NID_MARCA AS [CAT_MARCA_VEHICULO.NID_MARCA], 
            T.V_MARCA AS [CAT_MARCA_VEHICULO.V_MARCA], 
            True AS _from0
        FROM ModelDeclaraStoreContainer.CAT_MARCA_VEHICULO AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for cnxDeclara.CAT_MUNICIPIO.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView169()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing CAT_MUNICIPIO
        [ModelDeclara.CAT_MUNICIPIO](T1.[CAT_MUNICIPIO.NID_PAIS], T1.[CAT_MUNICIPIO.CID_ENTIDAD_FEDERATIVA], T1.[CAT_MUNICIPIO.CID_MUNICIPIO], T1.[CAT_MUNICIPIO.V_MUNICIPIO])
    FROM (
        SELECT 
            T.NID_PAIS AS [CAT_MUNICIPIO.NID_PAIS], 
            T.CID_ENTIDAD_FEDERATIVA AS [CAT_MUNICIPIO.CID_ENTIDAD_FEDERATIVA], 
            T.CID_MUNICIPIO AS [CAT_MUNICIPIO.CID_MUNICIPIO], 
            T.V_MUNICIPIO AS [CAT_MUNICIPIO.V_MUNICIPIO], 
            True AS _from0
        FROM ModelDeclaraStoreContainer.CAT_MUNICIPIO AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for cnxDeclara.CAT_NIVEL_ESCOLARIDAD.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView170()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing CAT_NIVEL_ESCOLARIDAD
        [ModelDeclara.CAT_NIVEL_ESCOLARIDAD](T1.[CAT_NIVEL_ESCOLARIDAD.NID_NIVEL_ESCOLARIDAD], T1.[CAT_NIVEL_ESCOLARIDAD.V_NIVEL_ESCOLARIDAD])
    FROM (
        SELECT 
            T.NID_NIVEL_ESCOLARIDAD AS [CAT_NIVEL_ESCOLARIDAD.NID_NIVEL_ESCOLARIDAD], 
            T.V_NIVEL_ESCOLARIDAD AS [CAT_NIVEL_ESCOLARIDAD.V_NIVEL_ESCOLARIDAD], 
            True AS _from0
        FROM ModelDeclaraStoreContainer.CAT_NIVEL_ESCOLARIDAD AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for cnxDeclara.CAT_NIVEL_GOBIERNO.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView171()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing CAT_NIVEL_GOBIERNO
        [ModelDeclara.CAT_NIVEL_GOBIERNO](T1.[CAT_NIVEL_GOBIERNO.NID_NIVEL_GOBIERNO], T1.[CAT_NIVEL_GOBIERNO.V_NIVEL_GOBIERNO])
    FROM (
        SELECT 
            T.NID_NIVEL_GOBIERNO AS [CAT_NIVEL_GOBIERNO.NID_NIVEL_GOBIERNO], 
            T.V_NIVEL_GOBIERNO AS [CAT_NIVEL_GOBIERNO.V_NIVEL_GOBIERNO], 
            True AS _from0
        FROM ModelDeclaraStoreContainer.CAT_NIVEL_GOBIERNO AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for cnxDeclara.CAT_PAIS.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView172()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing CAT_PAIS
        [ModelDeclara.CAT_PAIS](T1.[CAT_PAIS.NID_PAIS], T1.[CAT_PAIS.V_PAIS], T1.[CAT_PAIS.V_NACIONALIDAD_M], T1.[CAT_PAIS.V_NACIONALIDAD_F])
    FROM (
        SELECT 
            T.NID_PAIS AS [CAT_PAIS.NID_PAIS], 
            T.V_PAIS AS [CAT_PAIS.V_PAIS], 
            T.V_NACIONALIDAD_M AS [CAT_PAIS.V_NACIONALIDAD_M], 
            T.V_NACIONALIDAD_F AS [CAT_PAIS.V_NACIONALIDAD_F], 
            True AS _from0
        FROM ModelDeclaraStoreContainer.CAT_PAIS AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for cnxDeclara.CAT_PUESTO.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView173()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing CAT_PUESTO
        [ModelDeclara.CAT_PUESTO](T1.[CAT_PUESTO.NID_PUESTO], T1.[CAT_PUESTO.VID_PUESTO], T1.[CAT_PUESTO.VID_NIVEL], T1.[CAT_PUESTO.V_PUESTO], T1.[CAT_PUESTO.L_ACTIVO], T1.[CAT_PUESTO.L_OBLIGADO])
    FROM (
        SELECT 
            T.NID_PUESTO AS [CAT_PUESTO.NID_PUESTO], 
            T.VID_PUESTO AS [CAT_PUESTO.VID_PUESTO], 
            T.VID_NIVEL AS [CAT_PUESTO.VID_NIVEL], 
            T.V_PUESTO AS [CAT_PUESTO.V_PUESTO], 
            T.L_ACTIVO AS [CAT_PUESTO.L_ACTIVO], 
            T.L_OBLIGADO AS [CAT_PUESTO.L_OBLIGADO], 
            True AS _from0
        FROM ModelDeclaraStoreContainer.CAT_PUESTO AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for cnxDeclara.CAT_REGIMEN_MATRIMONIAL.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView174()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing CAT_REGIMEN_MATRIMONIAL
        [ModelDeclara.CAT_REGIMEN_MATRIMONIAL](T1.[CAT_REGIMEN_MATRIMONIAL.NID_REGIMEN_MATRIMONIAL], T1.[CAT_REGIMEN_MATRIMONIAL.V_REGIMEN_MATRIMONIAL])
    FROM (
        SELECT 
            T.NID_REGIMEN_MATRIMONIAL AS [CAT_REGIMEN_MATRIMONIAL.NID_REGIMEN_MATRIMONIAL], 
            T.V_REGIMEN_MATRIMONIAL AS [CAT_REGIMEN_MATRIMONIAL.V_REGIMEN_MATRIMONIAL], 
            True AS _from0
        FROM ModelDeclaraStoreContainer.CAT_REGIMEN_MATRIMONIAL AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for cnxDeclara.CAT_RELACION_TRANSMISOR.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView175()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing CAT_RELACION_TRANSMISOR
        [ModelDeclara.CAT_RELACION_TRANSMISOR](T1.[CAT_RELACION_TRANSMISOR.NID_RELACION_TRANSMISOR], T1.[CAT_RELACION_TRANSMISOR.V_RELACION_TRANSMISOR])
    FROM (
        SELECT 
            T.NID_RELACION_TRANSMISOR AS [CAT_RELACION_TRANSMISOR.NID_RELACION_TRANSMISOR], 
            T.V_RELACION_TRANSMISOR AS [CAT_RELACION_TRANSMISOR.V_RELACION_TRANSMISOR], 
            True AS _from0
        FROM ModelDeclaraStoreContainer.CAT_RELACION_TRANSMISOR AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for cnxDeclara.CAT_RESTRICCIONES.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView176()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing CAT_RESTRICCIONES
        [ModelDeclara.CAT_RESTRICCIONES](T1.[CAT_RESTRICCIONES.NID_RESTRICCION], T1.[CAT_RESTRICCIONES.V_RESTRICCION], T1.[CAT_RESTRICCIONES.L_VIGENTE])
    FROM (
        SELECT 
            T.NID_RESTRICCION AS [CAT_RESTRICCIONES.NID_RESTRICCION], 
            T.V_RESTRICCION AS [CAT_RESTRICCIONES.V_RESTRICCION], 
            T.L_VIGENTE AS [CAT_RESTRICCIONES.L_VIGENTE], 
            True AS _from0
        FROM ModelDeclaraStoreContainer.CAT_RESTRICCIONES AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for cnxDeclara.CAT_SECTOR.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView177()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing CAT_SECTOR
        [ModelDeclara.CAT_SECTOR](T1.[CAT_SECTOR.NID_SECTOR], T1.[CAT_SECTOR.V_SECTOR])
    FROM (
        SELECT 
            T.NID_SECTOR AS [CAT_SECTOR.NID_SECTOR], 
            T.V_SECTOR AS [CAT_SECTOR.V_SECTOR], 
            True AS _from0
        FROM ModelDeclaraStoreContainer.CAT_SECTOR AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for cnxDeclara.CAT_SEGUNDO_NIVEL.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView178()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing CAT_SEGUNDO_NIVEL
        [ModelDeclara.CAT_SEGUNDO_NIVEL](T1.[CAT_SEGUNDO_NIVEL.VID_PRIMER_NIVEL], T1.[CAT_SEGUNDO_NIVEL.VID_SEGUNDO_NIVEL], T1.[CAT_SEGUNDO_NIVEL.V_SEGUNDO_NIVEL], T1.[CAT_SEGUNDO_NIVEL.C_INICIO], T1.[CAT_SEGUNDO_NIVEL.C_FIN])
    FROM (
        SELECT 
            T.VID_PRIMER_NIVEL AS [CAT_SEGUNDO_NIVEL.VID_PRIMER_NIVEL], 
            T.VID_SEGUNDO_NIVEL AS [CAT_SEGUNDO_NIVEL.VID_SEGUNDO_NIVEL], 
            T.V_SEGUNDO_NIVEL AS [CAT_SEGUNDO_NIVEL.V_SEGUNDO_NIVEL], 
            T.C_INICIO AS [CAT_SEGUNDO_NIVEL.C_INICIO], 
            T.C_FIN AS [CAT_SEGUNDO_NIVEL.C_FIN], 
            True AS _from0
        FROM ModelDeclaraStoreContainer.CAT_SEGUNDO_NIVEL AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for cnxDeclara.CAT_SUBTIPO_INVERSION.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView179()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing CAT_SUBTIPO_INVERSION
        [ModelDeclara.CAT_SUBTIPO_INVERSION](T1.[CAT_SUBTIPO_INVERSION.NID_TIPO_INVERSION], T1.[CAT_SUBTIPO_INVERSION.NID_SUBTIPO_INVERSION], T1.[CAT_SUBTIPO_INVERSION.V_SUBTIPO_INVERSION], T1.[CAT_SUBTIPO_INVERSION.L_ACTIVO])
    FROM (
        SELECT 
            T.NID_TIPO_INVERSION AS [CAT_SUBTIPO_INVERSION.NID_TIPO_INVERSION], 
            T.NID_SUBTIPO_INVERSION AS [CAT_SUBTIPO_INVERSION.NID_SUBTIPO_INVERSION], 
            T.V_SUBTIPO_INVERSION AS [CAT_SUBTIPO_INVERSION.V_SUBTIPO_INVERSION], 
            T.L_ACTIVO AS [CAT_SUBTIPO_INVERSION.L_ACTIVO], 
            True AS _from0
        FROM ModelDeclaraStoreContainer.CAT_SUBTIPO_INVERSION AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for cnxDeclara.CAT_TIPO_ADEUDO.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView180()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing CAT_TIPO_ADEUDO
        [ModelDeclara.CAT_TIPO_ADEUDO](T1.[CAT_TIPO_ADEUDO.NID_TIPO_ADEUDO], T1.[CAT_TIPO_ADEUDO.V_TIPO_ADEUDO], T1.[CAT_TIPO_ADEUDO.L_ACTIVO])
    FROM (
        SELECT 
            T.NID_TIPO_ADEUDO AS [CAT_TIPO_ADEUDO.NID_TIPO_ADEUDO], 
            T.V_TIPO_ADEUDO AS [CAT_TIPO_ADEUDO.V_TIPO_ADEUDO], 
            T.L_ACTIVO AS [CAT_TIPO_ADEUDO.L_ACTIVO], 
            True AS _from0
        FROM ModelDeclaraStoreContainer.CAT_TIPO_ADEUDO AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for cnxDeclara.CAT_TIPO_BAJA.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView181()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing CAT_TIPO_BAJA
        [ModelDeclara.CAT_TIPO_BAJA](T1.[CAT_TIPO_BAJA.NID_TIPO_BAJA], T1.[CAT_TIPO_BAJA.V_TIPO_BAJA])
    FROM (
        SELECT 
            T.NID_TIPO_BAJA AS [CAT_TIPO_BAJA.NID_TIPO_BAJA], 
            T.V_TIPO_BAJA AS [CAT_TIPO_BAJA.V_TIPO_BAJA], 
            True AS _from0
        FROM ModelDeclaraStoreContainer.CAT_TIPO_BAJA AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for cnxDeclara.CAT_TIPO_DECLARACION.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView182()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing CAT_TIPO_DECLARACION
        [ModelDeclara.CAT_TIPO_DECLARACION](T1.[CAT_TIPO_DECLARACION.NID_TIPO_DECLARACION], T1.[CAT_TIPO_DECLARACION.V_TIPO_DECLARACION])
    FROM (
        SELECT 
            T.NID_TIPO_DECLARACION AS [CAT_TIPO_DECLARACION.NID_TIPO_DECLARACION], 
            T.V_TIPO_DECLARACION AS [CAT_TIPO_DECLARACION.V_TIPO_DECLARACION], 
            True AS _from0
        FROM ModelDeclaraStoreContainer.CAT_TIPO_DECLARACION AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for cnxDeclara.CAT_TIPO_DEPENDIENTES.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView183()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing CAT_TIPO_DEPENDIENTES
        [ModelDeclara.CAT_TIPO_DEPENDIENTES](T1.[CAT_TIPO_DEPENDIENTES.NID_TIPO_DEPENDIENTE], T1.[CAT_TIPO_DEPENDIENTES.V_TIPO_DEPENDIENTE], T1.[CAT_TIPO_DEPENDIENTES.L_PAREJA])
    FROM (
        SELECT 
            T.NID_TIPO_DEPENDIENTE AS [CAT_TIPO_DEPENDIENTES.NID_TIPO_DEPENDIENTE], 
            T.V_TIPO_DEPENDIENTE AS [CAT_TIPO_DEPENDIENTES.V_TIPO_DEPENDIENTE], 
            T.L_PAREJA AS [CAT_TIPO_DEPENDIENTES.L_PAREJA], 
            True AS _from0
        FROM ModelDeclaraStoreContainer.CAT_TIPO_DEPENDIENTES AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for cnxDeclara.CAT_TIPO_DOMICILIO.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView184()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing CAT_TIPO_DOMICILIO
        [ModelDeclara.CAT_TIPO_DOMICILIO](T1.[CAT_TIPO_DOMICILIO.NID_TIPO_DOMICILIO], T1.[CAT_TIPO_DOMICILIO.V_TIPO_DOMICILIO])
    FROM (
        SELECT 
            T.NID_TIPO_DOMICILIO AS [CAT_TIPO_DOMICILIO.NID_TIPO_DOMICILIO], 
            T.V_TIPO_DOMICILIO AS [CAT_TIPO_DOMICILIO.V_TIPO_DOMICILIO], 
            True AS _from0
        FROM ModelDeclaraStoreContainer.CAT_TIPO_DOMICILIO AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for cnxDeclara.CAT_TIPO_GASTO.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView185()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing CAT_TIPO_GASTO
        [ModelDeclara.CAT_TIPO_GASTO](T1.[CAT_TIPO_GASTO.NID_TIPO_GASTO], T1.[CAT_TIPO_GASTO.V_GASTO])
    FROM (
        SELECT 
            T.NID_TIPO_GASTO AS [CAT_TIPO_GASTO.NID_TIPO_GASTO], 
            T.V_GASTO AS [CAT_TIPO_GASTO.V_GASTO], 
            True AS _from0
        FROM ModelDeclaraStoreContainer.CAT_TIPO_GASTO AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for cnxDeclara.CAT_TIPO_INMUEBLE.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView186()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing CAT_TIPO_INMUEBLE
        [ModelDeclara.CAT_TIPO_INMUEBLE](T1.[CAT_TIPO_INMUEBLE.NID_TIPO], T1.[CAT_TIPO_INMUEBLE.V_TIPO], T1.[CAT_TIPO_INMUEBLE.L_ACTIVO])
    FROM (
        SELECT 
            T.NID_TIPO AS [CAT_TIPO_INMUEBLE.NID_TIPO], 
            T.V_TIPO AS [CAT_TIPO_INMUEBLE.V_TIPO], 
            T.L_ACTIVO AS [CAT_TIPO_INMUEBLE.L_ACTIVO], 
            True AS _from0
        FROM ModelDeclaraStoreContainer.CAT_TIPO_INMUEBLE AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for cnxDeclara.CAT_TIPO_MUEBLE.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView187()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing CAT_TIPO_MUEBLE
        [ModelDeclara.CAT_TIPO_MUEBLE](T1.[CAT_TIPO_MUEBLE.NID_TIPO], T1.[CAT_TIPO_MUEBLE.V_TIPO], T1.[CAT_TIPO_MUEBLE.L_ACTIVO])
    FROM (
        SELECT 
            T.NID_TIPO AS [CAT_TIPO_MUEBLE.NID_TIPO], 
            T.V_TIPO AS [CAT_TIPO_MUEBLE.V_TIPO], 
            T.L_ACTIVO AS [CAT_TIPO_MUEBLE.L_ACTIVO], 
            True AS _from0
        FROM ModelDeclaraStoreContainer.CAT_TIPO_MUEBLE AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for cnxDeclara.CAT_TIPO_PATRIMONIO.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView188()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing CAT_TIPO_PATRIMONIO
        [ModelDeclara.CAT_TIPO_PATRIMONIO](T1.[CAT_TIPO_PATRIMONIO.NID_TIPO], T1.[CAT_TIPO_PATRIMONIO.V_TIPO], T1.[CAT_TIPO_PATRIMONIO.C_NATURALEZA])
    FROM (
        SELECT 
            T.NID_TIPO AS [CAT_TIPO_PATRIMONIO.NID_TIPO], 
            T.V_TIPO AS [CAT_TIPO_PATRIMONIO.V_TIPO], 
            T.C_NATURALEZA AS [CAT_TIPO_PATRIMONIO.C_NATURALEZA], 
            True AS _from0
        FROM ModelDeclaraStoreContainer.CAT_TIPO_PATRIMONIO AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for cnxDeclara.CAT_TIPO_VEHICULO.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView189()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing CAT_TIPO_VEHICULO
        [ModelDeclara.CAT_TIPO_VEHICULO](T1.[CAT_TIPO_VEHICULO.NID_TIPO_VEHICULO], T1.[CAT_TIPO_VEHICULO.V_TIPO_VEHICULO])
    FROM (
        SELECT 
            T.NID_TIPO_VEHICULO AS [CAT_TIPO_VEHICULO.NID_TIPO_VEHICULO], 
            T.V_TIPO_VEHICULO AS [CAT_TIPO_VEHICULO.V_TIPO_VEHICULO], 
            True AS _from0
        FROM ModelDeclaraStoreContainer.CAT_TIPO_VEHICULO AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for cnxDeclara.CAT_USO_INMUEBLE.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView190()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing CAT_USO_INMUEBLE
        [ModelDeclara.CAT_USO_INMUEBLE](T1.[CAT_USO_INMUEBLE.NID_USO], T1.[CAT_USO_INMUEBLE.V_USO], T1.[CAT_USO_INMUEBLE.L_ACTIVO])
    FROM (
        SELECT 
            T.NID_USO AS [CAT_USO_INMUEBLE.NID_USO], 
            T.V_USO AS [CAT_USO_INMUEBLE.V_USO], 
            T.L_ACTIVO AS [CAT_USO_INMUEBLE.L_ACTIVO], 
            True AS _from0
        FROM ModelDeclaraStoreContainer.CAT_USO_INMUEBLE AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for cnxDeclara.CAT_USO_VEHICULO.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView191()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing CAT_USO_VEHICULO
        [ModelDeclara.CAT_USO_VEHICULO](T1.[CAT_USO_VEHICULO.NID_USO], T1.[CAT_USO_VEHICULO.V_USO], T1.[CAT_USO_VEHICULO.L_ACTIVO])
    FROM (
        SELECT 
            T.NID_USO AS [CAT_USO_VEHICULO.NID_USO], 
            T.V_USO AS [CAT_USO_VEHICULO.V_USO], 
            T.L_ACTIVO AS [CAT_USO_VEHICULO.L_ACTIVO], 
            True AS _from0
        FROM ModelDeclaraStoreContainer.CAT_USO_VEHICULO AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for cnxDeclara.CAT_VALOR_ADQUISICION.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView192()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing CAT_VALOR_ADQUISICION
        [ModelDeclara.CAT_VALOR_ADQUISICION](T1.[CAT_VALOR_ADQUISICION.NID_VALOR_ADQUISICION], T1.[CAT_VALOR_ADQUISICION.V_VALOR_ADQUISICION])
    FROM (
        SELECT 
            T.NID_VALOR_ADQUISICION AS [CAT_VALOR_ADQUISICION.NID_VALOR_ADQUISICION], 
            T.V_VALOR_ADQUISICION AS [CAT_VALOR_ADQUISICION.V_VALOR_ADQUISICION], 
            True AS _from0
        FROM ModelDeclaraStoreContainer.CAT_VALOR_ADQUISICION AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for cnxDeclara.DECLARACION.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView193()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing DECLARACION
        [ModelDeclara.DECLARACION](T1.[DECLARACION.VID_NOMBRE], T1.[DECLARACION.VID_FECHA], T1.[DECLARACION.VID_HOMOCLAVE], T1.[DECLARACION.NID_DECLARACION], T1.[DECLARACION.C_EJERCICIO], T1.[DECLARACION.NID_TIPO_DECLARACION], T1.[DECLARACION.NID_ESTADO], T1.[DECLARACION.E_OBSERVACIONES], T1.[DECLARACION.E_OBSERVACIONES_MARCADO], T1.[DECLARACION.V_OBSERVACIONES_TESTADO], T1.[DECLARACION.NID_ESTADO_TESTADO], T1.[DECLARACION.L_AUTORIZA_PUBLICAR], T1.[DECLARACION.F_REGISTRO], T1.[DECLARACION.F_ENVIO], T1.[DECLARACION.L_CONFLICTO], T1.[DECLARACION.V_HASH], T1.[DECLARACION.B_FILE_DECLARACION])
    FROM (
        SELECT 
            T.VID_NOMBRE AS [DECLARACION.VID_NOMBRE], 
            T.VID_FECHA AS [DECLARACION.VID_FECHA], 
            T.VID_HOMOCLAVE AS [DECLARACION.VID_HOMOCLAVE], 
            T.NID_DECLARACION AS [DECLARACION.NID_DECLARACION], 
            T.C_EJERCICIO AS [DECLARACION.C_EJERCICIO], 
            T.NID_TIPO_DECLARACION AS [DECLARACION.NID_TIPO_DECLARACION], 
            T.NID_ESTADO AS [DECLARACION.NID_ESTADO], 
            T.E_OBSERVACIONES AS [DECLARACION.E_OBSERVACIONES], 
            T.E_OBSERVACIONES_MARCADO AS [DECLARACION.E_OBSERVACIONES_MARCADO], 
            T.V_OBSERVACIONES_TESTADO AS [DECLARACION.V_OBSERVACIONES_TESTADO], 
            T.NID_ESTADO_TESTADO AS [DECLARACION.NID_ESTADO_TESTADO], 
            T.L_AUTORIZA_PUBLICAR AS [DECLARACION.L_AUTORIZA_PUBLICAR], 
            T.F_REGISTRO AS [DECLARACION.F_REGISTRO], 
            T.F_ENVIO AS [DECLARACION.F_ENVIO], 
            T.L_CONFLICTO AS [DECLARACION.L_CONFLICTO], 
            T.V_HASH AS [DECLARACION.V_HASH], 
            T.B_FILE_DECLARACION AS [DECLARACION.B_FILE_DECLARACION], 
            True AS _from0
        FROM ModelDeclaraStoreContainer.DECLARACION AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for cnxDeclara.DECLARACION_APARTADO.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView194()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing DECLARACION_APARTADO
        [ModelDeclara.DECLARACION_APARTADO](T1.[DECLARACION_APARTADO.VID_NOMBRE], T1.[DECLARACION_APARTADO.VID_FECHA], T1.[DECLARACION_APARTADO.VID_HOMOCLAVE], T1.[DECLARACION_APARTADO.NID_DECLARACION], T1.[DECLARACION_APARTADO.NID_APARTADO], T1.[DECLARACION_APARTADO.L_ESTADO])
    FROM (
        SELECT 
            T.VID_NOMBRE AS [DECLARACION_APARTADO.VID_NOMBRE], 
            T.VID_FECHA AS [DECLARACION_APARTADO.VID_FECHA], 
            T.VID_HOMOCLAVE AS [DECLARACION_APARTADO.VID_HOMOCLAVE], 
            T.NID_DECLARACION AS [DECLARACION_APARTADO.NID_DECLARACION], 
            T.NID_APARTADO AS [DECLARACION_APARTADO.NID_APARTADO], 
            T.L_ESTADO AS [DECLARACION_APARTADO.L_ESTADO], 
            True AS _from0
        FROM ModelDeclaraStoreContainer.DECLARACION_APARTADO AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for cnxDeclara.DECLARACION_CARGO.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView195()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing DECLARACION_CARGO
        [ModelDeclara.DECLARACION_CARGO](T1.[DECLARACION_CARGO.VID_NOMBRE], T1.[DECLARACION_CARGO.VID_FECHA], T1.[DECLARACION_CARGO.VID_HOMOCLAVE], T1.[DECLARACION_CARGO.NID_DECLARACION], T1.[DECLARACION_CARGO.NID_PUESTO], T1.[DECLARACION_CARGO.V_DENOMINACION], T1.[DECLARACION_CARGO.F_POSESION], T1.[DECLARACION_CARGO.F_INICIO], T1.[DECLARACION_CARGO.VID_PRIMER_NIVEL], T1.[DECLARACION_CARGO.VID_SEGUNDO_NIVEL], T1.[DECLARACION_CARGO.V_FUNCION_PRINCIPAL], T1.[DECLARACION_CARGO.E_OBSERVACIONES], T1.[DECLARACION_CARGO.E_OBSERVACIONES_MARCADO], T1.[DECLARACION_CARGO.V_OBSERVACIONES_TESTADO], T1.[DECLARACION_CARGO.NID_ESTADO_TESTADO])
    FROM (
        SELECT 
            T.VID_NOMBRE AS [DECLARACION_CARGO.VID_NOMBRE], 
            T.VID_FECHA AS [DECLARACION_CARGO.VID_FECHA], 
            T.VID_HOMOCLAVE AS [DECLARACION_CARGO.VID_HOMOCLAVE], 
            T.NID_DECLARACION AS [DECLARACION_CARGO.NID_DECLARACION], 
            T.NID_PUESTO AS [DECLARACION_CARGO.NID_PUESTO], 
            T.V_DENOMINACION AS [DECLARACION_CARGO.V_DENOMINACION], 
            T.F_POSESION AS [DECLARACION_CARGO.F_POSESION], 
            T.F_INICIO AS [DECLARACION_CARGO.F_INICIO], 
            T.VID_PRIMER_NIVEL AS [DECLARACION_CARGO.VID_PRIMER_NIVEL], 
            T.VID_SEGUNDO_NIVEL AS [DECLARACION_CARGO.VID_SEGUNDO_NIVEL], 
            T.V_FUNCION_PRINCIPAL AS [DECLARACION_CARGO.V_FUNCION_PRINCIPAL], 
            T.E_OBSERVACIONES AS [DECLARACION_CARGO.E_OBSERVACIONES], 
            T.E_OBSERVACIONES_MARCADO AS [DECLARACION_CARGO.E_OBSERVACIONES_MARCADO], 
            T.V_OBSERVACIONES_TESTADO AS [DECLARACION_CARGO.V_OBSERVACIONES_TESTADO], 
            T.NID_ESTADO_TESTADO AS [DECLARACION_CARGO.NID_ESTADO_TESTADO], 
            True AS _from0
        FROM ModelDeclaraStoreContainer.DECLARACION_CARGO AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for cnxDeclara.DECLARACION_CARGO_OTRO.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView196()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing DECLARACION_CARGO_OTRO
        [ModelDeclara.DECLARACION_CARGO_OTRO](T1.[DECLARACION_CARGO_OTRO.VID_NOMBRE], T1.[DECLARACION_CARGO_OTRO.VID_FECHA], T1.[DECLARACION_CARGO_OTRO.VID_HOMOCLAVE], T1.[DECLARACION_CARGO_OTRO.NID_DECLARACION], T1.[DECLARACION_CARGO_OTRO.NID_NIVEL_GOBIERNO], T1.[DECLARACION_CARGO_OTRO.NID_AMBITO_PUBLICO], T1.[DECLARACION_CARGO_OTRO.VID_NOMBRE_ENTE], T1.[DECLARACION_CARGO_OTRO.V_AREA_ADSCRIPCION], T1.[DECLARACION_CARGO_OTRO.V_CARGO], T1.[DECLARACION_CARGO_OTRO.L_HONORARIOS], T1.[DECLARACION_CARGO_OTRO.V_NIVEL_EMPLEO], T1.[DECLARACION_CARGO_OTRO.V_FUNCION_PRINCIPAL], T1.[DECLARACION_CARGO_OTRO.F_POSESION], T1.[DECLARACION_CARGO_OTRO.V_TEL_LABORAL], T1.[DECLARACION_CARGO_OTRO.C_CODIGO_POSTAL], T1.[DECLARACION_CARGO_OTRO.NID_PAIS], T1.[DECLARACION_CARGO_OTRO.CID_ENTIDAD_FEDERATIVA], T1.[DECLARACION_CARGO_OTRO.CID_MUNICIPIO], T1.[DECLARACION_CARGO_OTRO.V_COLONIA], T1.[DECLARACION_CARGO_OTRO.V_DOMICILIO], T1.[DECLARACION_CARGO_OTRO.V_OBSERVACIONES])
    FROM (
        SELECT 
            T.VID_NOMBRE AS [DECLARACION_CARGO_OTRO.VID_NOMBRE], 
            T.VID_FECHA AS [DECLARACION_CARGO_OTRO.VID_FECHA], 
            T.VID_HOMOCLAVE AS [DECLARACION_CARGO_OTRO.VID_HOMOCLAVE], 
            T.NID_DECLARACION AS [DECLARACION_CARGO_OTRO.NID_DECLARACION], 
            T.NID_NIVEL_GOBIERNO AS [DECLARACION_CARGO_OTRO.NID_NIVEL_GOBIERNO], 
            T.NID_AMBITO_PUBLICO AS [DECLARACION_CARGO_OTRO.NID_AMBITO_PUBLICO], 
            T.VID_NOMBRE_ENTE AS [DECLARACION_CARGO_OTRO.VID_NOMBRE_ENTE], 
            T.V_AREA_ADSCRIPCION AS [DECLARACION_CARGO_OTRO.V_AREA_ADSCRIPCION], 
            T.V_CARGO AS [DECLARACION_CARGO_OTRO.V_CARGO], 
            T.L_HONORARIOS AS [DECLARACION_CARGO_OTRO.L_HONORARIOS], 
            T.V_NIVEL_EMPLEO AS [DECLARACION_CARGO_OTRO.V_NIVEL_EMPLEO], 
            T.V_FUNCION_PRINCIPAL AS [DECLARACION_CARGO_OTRO.V_FUNCION_PRINCIPAL], 
            T.F_POSESION AS [DECLARACION_CARGO_OTRO.F_POSESION], 
            T.V_TEL_LABORAL AS [DECLARACION_CARGO_OTRO.V_TEL_LABORAL], 
            T.C_CODIGO_POSTAL AS [DECLARACION_CARGO_OTRO.C_CODIGO_POSTAL], 
            T.NID_PAIS AS [DECLARACION_CARGO_OTRO.NID_PAIS], 
            T.CID_ENTIDAD_FEDERATIVA AS [DECLARACION_CARGO_OTRO.CID_ENTIDAD_FEDERATIVA], 
            T.CID_MUNICIPIO AS [DECLARACION_CARGO_OTRO.CID_MUNICIPIO], 
            T.V_COLONIA AS [DECLARACION_CARGO_OTRO.V_COLONIA], 
            T.V_DOMICILIO AS [DECLARACION_CARGO_OTRO.V_DOMICILIO], 
            T.V_OBSERVACIONES AS [DECLARACION_CARGO_OTRO.V_OBSERVACIONES], 
            True AS _from0
        FROM ModelDeclaraStoreContainer.DECLARACION_CARGO_OTRO AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for cnxDeclara.DECLARACION_DEPENDIENTES.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView197()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing DECLARACION_DEPENDIENTES
        [ModelDeclara.DECLARACION_DEPENDIENTES](T1.[DECLARACION_DEPENDIENTES.VID_NOMBRE], T1.[DECLARACION_DEPENDIENTES.VID_FECHA], T1.[DECLARACION_DEPENDIENTES.VID_HOMOCLAVE], T1.[DECLARACION_DEPENDIENTES.NID_DECLARACION], T1.[DECLARACION_DEPENDIENTES.NID_DEPENDIENTE], T1.[DECLARACION_DEPENDIENTES.NID_TIPO_DEPENDIENTE], T1.[DECLARACION_DEPENDIENTES.E_NOMBRE], T1.[DECLARACION_DEPENDIENTES.E_PRIMER_A], T1.[DECLARACION_DEPENDIENTES.E_SEGUNDO_A], T1.[DECLARACION_DEPENDIENTES.F_NACIMIENTO], T1.[DECLARACION_DEPENDIENTES.E_RFC], T1.[DECLARACION_DEPENDIENTES.L_DEPENDE_ECO], T1.[DECLARACION_DEPENDIENTES.E_DOMICILIO], T1.[DECLARACION_DEPENDIENTES.L_ACTIVO], T1.[DECLARACION_DEPENDIENTES.L_CIUDADANO_EXTRANJERO], T1.[DECLARACION_DEPENDIENTES.E_CURP], T1.[DECLARACION_DEPENDIENTES.NID_ACTIVIDAD_LABORAL], T1.[DECLARACION_DEPENDIENTES.E_OBSERVACIONES], T1.[DECLARACION_DEPENDIENTES.E_OBSERVACIONES_MARCADO], T1.[DECLARACION_DEPENDIENTES.V_OBSERVACIONES_TESTADO], T1.[DECLARACION_DEPENDIENTES.NID_ESTADO_TESTADO], T1.[DECLARACION_DEPENDIENTES.L_MISMO_DOMICILIO_DECLARANTE], T1.[DECLARACION_DEPENDIENTES.L_PAREJA])
    FROM (
        SELECT 
            T.VID_NOMBRE AS [DECLARACION_DEPENDIENTES.VID_NOMBRE], 
            T.VID_FECHA AS [DECLARACION_DEPENDIENTES.VID_FECHA], 
            T.VID_HOMOCLAVE AS [DECLARACION_DEPENDIENTES.VID_HOMOCLAVE], 
            T.NID_DECLARACION AS [DECLARACION_DEPENDIENTES.NID_DECLARACION], 
            T.NID_DEPENDIENTE AS [DECLARACION_DEPENDIENTES.NID_DEPENDIENTE], 
            T.NID_TIPO_DEPENDIENTE AS [DECLARACION_DEPENDIENTES.NID_TIPO_DEPENDIENTE], 
            T.E_NOMBRE AS [DECLARACION_DEPENDIENTES.E_NOMBRE], 
            T.E_PRIMER_A AS [DECLARACION_DEPENDIENTES.E_PRIMER_A], 
            T.E_SEGUNDO_A AS [DECLARACION_DEPENDIENTES.E_SEGUNDO_A], 
            T.F_NACIMIENTO AS [DECLARACION_DEPENDIENTES.F_NACIMIENTO], 
            T.E_RFC AS [DECLARACION_DEPENDIENTES.E_RFC], 
            T.L_DEPENDE_ECO AS [DECLARACION_DEPENDIENTES.L_DEPENDE_ECO], 
            T.E_DOMICILIO AS [DECLARACION_DEPENDIENTES.E_DOMICILIO], 
            T.L_ACTIVO AS [DECLARACION_DEPENDIENTES.L_ACTIVO], 
            T.L_CIUDADANO_EXTRANJERO AS [DECLARACION_DEPENDIENTES.L_CIUDADANO_EXTRANJERO], 
            T.E_CURP AS [DECLARACION_DEPENDIENTES.E_CURP], 
            T.NID_ACTIVIDAD_LABORAL AS [DECLARACION_DEPENDIENTES.NID_ACTIVIDAD_LABORAL], 
            T.E_OBSERVACIONES AS [DECLARACION_DEPENDIENTES.E_OBSERVACIONES], 
            T.E_OBSERVACIONES_MARCADO AS [DECLARACION_DEPENDIENTES.E_OBSERVACIONES_MARCADO], 
            T.V_OBSERVACIONES_TESTADO AS [DECLARACION_DEPENDIENTES.V_OBSERVACIONES_TESTADO], 
            T.NID_ESTADO_TESTADO AS [DECLARACION_DEPENDIENTES.NID_ESTADO_TESTADO], 
            T.L_MISMO_DOMICILIO_DECLARANTE AS [DECLARACION_DEPENDIENTES.L_MISMO_DOMICILIO_DECLARANTE], 
            T.L_PAREJA AS [DECLARACION_DEPENDIENTES.L_PAREJA], 
            True AS _from0
        FROM ModelDeclaraStoreContainer.DECLARACION_DEPENDIENTES AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for cnxDeclara.DECLARACION_DEPENDIENTES_DOMICILIO.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView198()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing DECLARACION_DEPENDIENTES_DOMICILIO
        [ModelDeclara.DECLARACION_DEPENDIENTES_DOMICILIO](T1.[DECLARACION_DEPENDIENTES_DOMICILIO.VID_NOMBRE], T1.[DECLARACION_DEPENDIENTES_DOMICILIO.VID_FECHA], T1.[DECLARACION_DEPENDIENTES_DOMICILIO.VID_HOMOCLAVE], T1.[DECLARACION_DEPENDIENTES_DOMICILIO.NID_DECLARACION], T1.[DECLARACION_DEPENDIENTES_DOMICILIO.NID_DEPENDIENTE], T1.[DECLARACION_DEPENDIENTES_DOMICILIO.C_CODIGO_POSTAL], T1.[DECLARACION_DEPENDIENTES_DOMICILIO.NID_PAIS], T1.[DECLARACION_DEPENDIENTES_DOMICILIO.CID_ENTIDAD_FEDERATIVA], T1.[DECLARACION_DEPENDIENTES_DOMICILIO.CID_MUNICIPIO], T1.[DECLARACION_DEPENDIENTES_DOMICILIO.V_COLONIA], T1.[DECLARACION_DEPENDIENTES_DOMICILIO.V_DOMICILIO])
    FROM (
        SELECT 
            T.VID_NOMBRE AS [DECLARACION_DEPENDIENTES_DOMICILIO.VID_NOMBRE], 
            T.VID_FECHA AS [DECLARACION_DEPENDIENTES_DOMICILIO.VID_FECHA], 
            T.VID_HOMOCLAVE AS [DECLARACION_DEPENDIENTES_DOMICILIO.VID_HOMOCLAVE], 
            T.NID_DECLARACION AS [DECLARACION_DEPENDIENTES_DOMICILIO.NID_DECLARACION], 
            T.NID_DEPENDIENTE AS [DECLARACION_DEPENDIENTES_DOMICILIO.NID_DEPENDIENTE], 
            T.C_CODIGO_POSTAL AS [DECLARACION_DEPENDIENTES_DOMICILIO.C_CODIGO_POSTAL], 
            T.NID_PAIS AS [DECLARACION_DEPENDIENTES_DOMICILIO.NID_PAIS], 
            T.CID_ENTIDAD_FEDERATIVA AS [DECLARACION_DEPENDIENTES_DOMICILIO.CID_ENTIDAD_FEDERATIVA], 
            T.CID_MUNICIPIO AS [DECLARACION_DEPENDIENTES_DOMICILIO.CID_MUNICIPIO], 
            T.V_COLONIA AS [DECLARACION_DEPENDIENTES_DOMICILIO.V_COLONIA], 
            T.V_DOMICILIO AS [DECLARACION_DEPENDIENTES_DOMICILIO.V_DOMICILIO], 
            True AS _from0
        FROM ModelDeclaraStoreContainer.DECLARACION_DEPENDIENTES_DOMICILIO AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for cnxDeclara.DECLARACION_DEPENDIENTES_PRIVADO.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView199()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing DECLARACION_DEPENDIENTES_PRIVADO
        [ModelDeclara.DECLARACION_DEPENDIENTES_PRIVADO](T1.[DECLARACION_DEPENDIENTES_PRIVADO.VID_NOMBRE], T1.[DECLARACION_DEPENDIENTES_PRIVADO.VID_FECHA], T1.[DECLARACION_DEPENDIENTES_PRIVADO.VID_HOMOCLAVE], T1.[DECLARACION_DEPENDIENTES_PRIVADO.NID_DECLARACION], T1.[DECLARACION_DEPENDIENTES_PRIVADO.NID_DEPENDIENTE], T1.[DECLARACION_DEPENDIENTES_PRIVADO.V_NOMBRE], T1.[DECLARACION_DEPENDIENTES_PRIVADO.V_CARGO], T1.[DECLARACION_DEPENDIENTES_PRIVADO.V_RFC], T1.[DECLARACION_DEPENDIENTES_PRIVADO.F_INGRESO], T1.[DECLARACION_DEPENDIENTES_PRIVADO.NID_SECTOR], T1.[DECLARACION_DEPENDIENTES_PRIVADO.M_SALARIO_MENSUAL], T1.[DECLARACION_DEPENDIENTES_PRIVADO.L_PROVEEDOR])
    FROM (
        SELECT 
            T.VID_NOMBRE AS [DECLARACION_DEPENDIENTES_PRIVADO.VID_NOMBRE], 
            T.VID_FECHA AS [DECLARACION_DEPENDIENTES_PRIVADO.VID_FECHA], 
            T.VID_HOMOCLAVE AS [DECLARACION_DEPENDIENTES_PRIVADO.VID_HOMOCLAVE], 
            T.NID_DECLARACION AS [DECLARACION_DEPENDIENTES_PRIVADO.NID_DECLARACION], 
            T.NID_DEPENDIENTE AS [DECLARACION_DEPENDIENTES_PRIVADO.NID_DEPENDIENTE], 
            T.V_NOMBRE AS [DECLARACION_DEPENDIENTES_PRIVADO.V_NOMBRE], 
            T.V_CARGO AS [DECLARACION_DEPENDIENTES_PRIVADO.V_CARGO], 
            T.V_RFC AS [DECLARACION_DEPENDIENTES_PRIVADO.V_RFC], 
            T.F_INGRESO AS [DECLARACION_DEPENDIENTES_PRIVADO.F_INGRESO], 
            T.NID_SECTOR AS [DECLARACION_DEPENDIENTES_PRIVADO.NID_SECTOR], 
            T.M_SALARIO_MENSUAL AS [DECLARACION_DEPENDIENTES_PRIVADO.M_SALARIO_MENSUAL], 
            T.L_PROVEEDOR AS [DECLARACION_DEPENDIENTES_PRIVADO.L_PROVEEDOR], 
            True AS _from0
        FROM ModelDeclaraStoreContainer.DECLARACION_DEPENDIENTES_PRIVADO AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for cnxDeclara.DECLARACION_DEPENDIENTES_PUBLICO.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView200()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing DECLARACION_DEPENDIENTES_PUBLICO
        [ModelDeclara.DECLARACION_DEPENDIENTES_PUBLICO](T1.[DECLARACION_DEPENDIENTES_PUBLICO.VID_NOMBRE], T1.[DECLARACION_DEPENDIENTES_PUBLICO.VID_FECHA], T1.[DECLARACION_DEPENDIENTES_PUBLICO.VID_HOMOCLAVE], T1.[DECLARACION_DEPENDIENTES_PUBLICO.NID_DECLARACION], T1.[DECLARACION_DEPENDIENTES_PUBLICO.NID_DEPENDIENTE], T1.[DECLARACION_DEPENDIENTES_PUBLICO.NID_AMBITO_SECTOR], T1.[DECLARACION_DEPENDIENTES_PUBLICO.NID_NIVEL_GOBIERNO], T1.[DECLARACION_DEPENDIENTES_PUBLICO.NID_AMBITO_PUBLICO], T1.[DECLARACION_DEPENDIENTES_PUBLICO.V_NOMBRE_ENTE], T1.[DECLARACION_DEPENDIENTES_PUBLICO.V_AREA_ADSCRIPCION], T1.[DECLARACION_DEPENDIENTES_PUBLICO.V_CARGO], T1.[DECLARACION_DEPENDIENTES_PUBLICO.V_FUNCION_PRINCIPAL], T1.[DECLARACION_DEPENDIENTES_PUBLICO.M_SALARIO_MENSUAL], T1.[DECLARACION_DEPENDIENTES_PUBLICO.F_INGRESO])
    FROM (
        SELECT 
            T.VID_NOMBRE AS [DECLARACION_DEPENDIENTES_PUBLICO.VID_NOMBRE], 
            T.VID_FECHA AS [DECLARACION_DEPENDIENTES_PUBLICO.VID_FECHA], 
            T.VID_HOMOCLAVE AS [DECLARACION_DEPENDIENTES_PUBLICO.VID_HOMOCLAVE], 
            T.NID_DECLARACION AS [DECLARACION_DEPENDIENTES_PUBLICO.NID_DECLARACION], 
            T.NID_DEPENDIENTE AS [DECLARACION_DEPENDIENTES_PUBLICO.NID_DEPENDIENTE], 
            T.NID_AMBITO_SECTOR AS [DECLARACION_DEPENDIENTES_PUBLICO.NID_AMBITO_SECTOR], 
            T.NID_NIVEL_GOBIERNO AS [DECLARACION_DEPENDIENTES_PUBLICO.NID_NIVEL_GOBIERNO], 
            T.NID_AMBITO_PUBLICO AS [DECLARACION_DEPENDIENTES_PUBLICO.NID_AMBITO_PUBLICO], 
            T.V_NOMBRE_ENTE AS [DECLARACION_DEPENDIENTES_PUBLICO.V_NOMBRE_ENTE], 
            T.V_AREA_ADSCRIPCION AS [DECLARACION_DEPENDIENTES_PUBLICO.V_AREA_ADSCRIPCION], 
            T.V_CARGO AS [DECLARACION_DEPENDIENTES_PUBLICO.V_CARGO], 
            T.V_FUNCION_PRINCIPAL AS [DECLARACION_DEPENDIENTES_PUBLICO.V_FUNCION_PRINCIPAL], 
            T.M_SALARIO_MENSUAL AS [DECLARACION_DEPENDIENTES_PUBLICO.M_SALARIO_MENSUAL], 
            T.F_INGRESO AS [DECLARACION_DEPENDIENTES_PUBLICO.F_INGRESO], 
            True AS _from0
        FROM ModelDeclaraStoreContainer.DECLARACION_DEPENDIENTES_PUBLICO AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for cnxDeclara.DECLARACION_DOM_LABORAL.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView201()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing DECLARACION_DOM_LABORAL
        [ModelDeclara.DECLARACION_DOM_LABORAL](T1.[DECLARACION_DOM_LABORAL.VID_NOMBRE], T1.[DECLARACION_DOM_LABORAL.VID_FECHA], T1.[DECLARACION_DOM_LABORAL.VID_HOMOCLAVE], T1.[DECLARACION_DOM_LABORAL.NID_DECLARACION], T1.[DECLARACION_DOM_LABORAL.C_CODIGO_POSTAL], T1.[DECLARACION_DOM_LABORAL.NID_PAIS], T1.[DECLARACION_DOM_LABORAL.CID_ENTIDAD_FEDERATIVA], T1.[DECLARACION_DOM_LABORAL.CID_MUNICIPIO], T1.[DECLARACION_DOM_LABORAL.V_COLONIA], T1.[DECLARACION_DOM_LABORAL.V_DOMICILIO], T1.[DECLARACION_DOM_LABORAL.V_CORREO_LABORAL], T1.[DECLARACION_DOM_LABORAL.V_TEL_LABORAL])
    FROM (
        SELECT 
            T.VID_NOMBRE AS [DECLARACION_DOM_LABORAL.VID_NOMBRE], 
            T.VID_FECHA AS [DECLARACION_DOM_LABORAL.VID_FECHA], 
            T.VID_HOMOCLAVE AS [DECLARACION_DOM_LABORAL.VID_HOMOCLAVE], 
            T.NID_DECLARACION AS [DECLARACION_DOM_LABORAL.NID_DECLARACION], 
            T.C_CODIGO_POSTAL AS [DECLARACION_DOM_LABORAL.C_CODIGO_POSTAL], 
            T.NID_PAIS AS [DECLARACION_DOM_LABORAL.NID_PAIS], 
            T.CID_ENTIDAD_FEDERATIVA AS [DECLARACION_DOM_LABORAL.CID_ENTIDAD_FEDERATIVA], 
            T.CID_MUNICIPIO AS [DECLARACION_DOM_LABORAL.CID_MUNICIPIO], 
            T.V_COLONIA AS [DECLARACION_DOM_LABORAL.V_COLONIA], 
            T.V_DOMICILIO AS [DECLARACION_DOM_LABORAL.V_DOMICILIO], 
            T.V_CORREO_LABORAL AS [DECLARACION_DOM_LABORAL.V_CORREO_LABORAL], 
            T.V_TEL_LABORAL AS [DECLARACION_DOM_LABORAL.V_TEL_LABORAL], 
            True AS _from0
        FROM ModelDeclaraStoreContainer.DECLARACION_DOM_LABORAL AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for cnxDeclara.DECLARACION_DOM_PARTICULAR.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView202()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing DECLARACION_DOM_PARTICULAR
        [ModelDeclara.DECLARACION_DOM_PARTICULAR](T1.[DECLARACION_DOM_PARTICULAR.VID_NOMBRE], T1.[DECLARACION_DOM_PARTICULAR.VID_FECHA], T1.[DECLARACION_DOM_PARTICULAR.VID_HOMOCLAVE], T1.[DECLARACION_DOM_PARTICULAR.NID_DECLARACION], T1.[DECLARACION_DOM_PARTICULAR.C_CODIGO_POSTAL], T1.[DECLARACION_DOM_PARTICULAR.NID_PAIS], T1.[DECLARACION_DOM_PARTICULAR.CID_ENTIDAD_FEDERATIVA], T1.[DECLARACION_DOM_PARTICULAR.CID_MUNICIPIO], T1.[DECLARACION_DOM_PARTICULAR.V_COLONIA], T1.[DECLARACION_DOM_PARTICULAR.V_DOMICILIO], T1.[DECLARACION_DOM_PARTICULAR.V_CORREO], T1.[DECLARACION_DOM_PARTICULAR.V_TEL_PARTICULAR], T1.[DECLARACION_DOM_PARTICULAR.V_TEL_CELULAR], T1.[DECLARACION_DOM_PARTICULAR.E_OBSERVACIONES], T1.[DECLARACION_DOM_PARTICULAR.E_OBSERVACIONES_MARCADO], T1.[DECLARACION_DOM_PARTICULAR.V_OBSERVACIONES_TESTADO], T1.[DECLARACION_DOM_PARTICULAR.NID_ESTADO_TESTADO], T1.[DECLARACION_DOM_PARTICULAR.V_ENTIDAD_FEDERATIVA], T1.[DECLARACION_DOM_PARTICULAR.V_MUNICIPIO])
    FROM (
        SELECT 
            T.VID_NOMBRE AS [DECLARACION_DOM_PARTICULAR.VID_NOMBRE], 
            T.VID_FECHA AS [DECLARACION_DOM_PARTICULAR.VID_FECHA], 
            T.VID_HOMOCLAVE AS [DECLARACION_DOM_PARTICULAR.VID_HOMOCLAVE], 
            T.NID_DECLARACION AS [DECLARACION_DOM_PARTICULAR.NID_DECLARACION], 
            T.C_CODIGO_POSTAL AS [DECLARACION_DOM_PARTICULAR.C_CODIGO_POSTAL], 
            T.NID_PAIS AS [DECLARACION_DOM_PARTICULAR.NID_PAIS], 
            T.CID_ENTIDAD_FEDERATIVA AS [DECLARACION_DOM_PARTICULAR.CID_ENTIDAD_FEDERATIVA], 
            T.CID_MUNICIPIO AS [DECLARACION_DOM_PARTICULAR.CID_MUNICIPIO], 
            T.V_COLONIA AS [DECLARACION_DOM_PARTICULAR.V_COLONIA], 
            T.V_DOMICILIO AS [DECLARACION_DOM_PARTICULAR.V_DOMICILIO], 
            T.V_CORREO AS [DECLARACION_DOM_PARTICULAR.V_CORREO], 
            T.V_TEL_PARTICULAR AS [DECLARACION_DOM_PARTICULAR.V_TEL_PARTICULAR], 
            T.V_TEL_CELULAR AS [DECLARACION_DOM_PARTICULAR.V_TEL_CELULAR], 
            T.E_OBSERVACIONES AS [DECLARACION_DOM_PARTICULAR.E_OBSERVACIONES], 
            T.E_OBSERVACIONES_MARCADO AS [DECLARACION_DOM_PARTICULAR.E_OBSERVACIONES_MARCADO], 
            T.V_OBSERVACIONES_TESTADO AS [DECLARACION_DOM_PARTICULAR.V_OBSERVACIONES_TESTADO], 
            T.NID_ESTADO_TESTADO AS [DECLARACION_DOM_PARTICULAR.NID_ESTADO_TESTADO], 
            T.V_ENTIDAD_FEDERATIVA AS [DECLARACION_DOM_PARTICULAR.V_ENTIDAD_FEDERATIVA], 
            T.V_MUNICIPIO AS [DECLARACION_DOM_PARTICULAR.V_MUNICIPIO], 
            True AS _from0
        FROM ModelDeclaraStoreContainer.DECLARACION_DOM_PARTICULAR AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for cnxDeclara.DECLARACION_EGRESOS.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView203()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing DECLARACION_EGRESOS
        [ModelDeclara.DECLARACION_EGRESOS](T1.[DECLARACION_EGRESOS.VID_NOMBRE], T1.[DECLARACION_EGRESOS.VID_FECHA], T1.[DECLARACION_EGRESOS.VID_HOMOCLAVE], T1.[DECLARACION_EGRESOS.NID_DECLARACION], T1.[DECLARACION_EGRESOS.NID_EGRESO], T1.[DECLARACION_EGRESOS.V_CONCEPTO], T1.[DECLARACION_EGRESOS.M_DECLARANTE], T1.[DECLARACION_EGRESOS.M_DEPENDIENTE], T1.[DECLARACION_EGRESOS.M_SUMA], T1.[DECLARACION_EGRESOS.N_NIVEL])
    FROM (
        SELECT 
            T.VID_NOMBRE AS [DECLARACION_EGRESOS.VID_NOMBRE], 
            T.VID_FECHA AS [DECLARACION_EGRESOS.VID_FECHA], 
            T.VID_HOMOCLAVE AS [DECLARACION_EGRESOS.VID_HOMOCLAVE], 
            T.NID_DECLARACION AS [DECLARACION_EGRESOS.NID_DECLARACION], 
            T.NID_EGRESO AS [DECLARACION_EGRESOS.NID_EGRESO], 
            T.V_CONCEPTO AS [DECLARACION_EGRESOS.V_CONCEPTO], 
            T.M_DECLARANTE AS [DECLARACION_EGRESOS.M_DECLARANTE], 
            T.M_DEPENDIENTE AS [DECLARACION_EGRESOS.M_DEPENDIENTE], 
            T.M_SUMA AS [DECLARACION_EGRESOS.M_SUMA], 
            T.N_NIVEL AS [DECLARACION_EGRESOS.N_NIVEL], 
            True AS _from0
        FROM ModelDeclaraStoreContainer.DECLARACION_EGRESOS AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for cnxDeclara.DECLARACION_ESCOLARIDAD.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView204()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing DECLARACION_ESCOLARIDAD
        [ModelDeclara.DECLARACION_ESCOLARIDAD](T1.[DECLARACION_ESCOLARIDAD.VID_NOMBRE], T1.[DECLARACION_ESCOLARIDAD.VID_FECHA], T1.[DECLARACION_ESCOLARIDAD.VID_HOMOCLAVE], T1.[DECLARACION_ESCOLARIDAD.NID_DECLARACION], T1.[DECLARACION_ESCOLARIDAD.NID_ESCOLARIDAD], T1.[DECLARACION_ESCOLARIDAD.NID_NIVEL_ESCOLARIDAD], T1.[DECLARACION_ESCOLARIDAD.V_INSTITUCION_EDUCATIVA], T1.[DECLARACION_ESCOLARIDAD.V_CARRERA], T1.[DECLARACION_ESCOLARIDAD.NID_ESTADO_ESCOLARIDAD], T1.[DECLARACION_ESCOLARIDAD.NID_DOCUMENTO_OBTENIDO], T1.[DECLARACION_ESCOLARIDAD.F_OBTENCION], T1.[DECLARACION_ESCOLARIDAD.NID_PAIS], T1.[DECLARACION_ESCOLARIDAD.E_OBSERVACIONES], T1.[DECLARACION_ESCOLARIDAD.E_OBSERVACIONES_MARCADO], T1.[DECLARACION_ESCOLARIDAD.V_OBSERVACIONES_TESTADO], T1.[DECLARACION_ESCOLARIDAD.NID_ESTADO_TESTADO])
    FROM (
        SELECT 
            T.VID_NOMBRE AS [DECLARACION_ESCOLARIDAD.VID_NOMBRE], 
            T.VID_FECHA AS [DECLARACION_ESCOLARIDAD.VID_FECHA], 
            T.VID_HOMOCLAVE AS [DECLARACION_ESCOLARIDAD.VID_HOMOCLAVE], 
            T.NID_DECLARACION AS [DECLARACION_ESCOLARIDAD.NID_DECLARACION], 
            T.NID_ESCOLARIDAD AS [DECLARACION_ESCOLARIDAD.NID_ESCOLARIDAD], 
            T.NID_NIVEL_ESCOLARIDAD AS [DECLARACION_ESCOLARIDAD.NID_NIVEL_ESCOLARIDAD], 
            T.V_INSTITUCION_EDUCATIVA AS [DECLARACION_ESCOLARIDAD.V_INSTITUCION_EDUCATIVA], 
            T.V_CARRERA AS [DECLARACION_ESCOLARIDAD.V_CARRERA], 
            T.NID_ESTADO_ESCOLARIDAD AS [DECLARACION_ESCOLARIDAD.NID_ESTADO_ESCOLARIDAD], 
            T.NID_DOCUMENTO_OBTENIDO AS [DECLARACION_ESCOLARIDAD.NID_DOCUMENTO_OBTENIDO], 
            T.F_OBTENCION AS [DECLARACION_ESCOLARIDAD.F_OBTENCION], 
            T.NID_PAIS AS [DECLARACION_ESCOLARIDAD.NID_PAIS], 
            T.E_OBSERVACIONES AS [DECLARACION_ESCOLARIDAD.E_OBSERVACIONES], 
            T.E_OBSERVACIONES_MARCADO AS [DECLARACION_ESCOLARIDAD.E_OBSERVACIONES_MARCADO], 
            T.V_OBSERVACIONES_TESTADO AS [DECLARACION_ESCOLARIDAD.V_OBSERVACIONES_TESTADO], 
            T.NID_ESTADO_TESTADO AS [DECLARACION_ESCOLARIDAD.NID_ESTADO_TESTADO], 
            True AS _from0
        FROM ModelDeclaraStoreContainer.DECLARACION_ESCOLARIDAD AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for cnxDeclara.DECLARACION_EXPERIENCIA_LABORAL.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView205()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing DECLARACION_EXPERIENCIA_LABORAL
        [ModelDeclara.DECLARACION_EXPERIENCIA_LABORAL](T1.[DECLARACION_EXPERIENCIA_LABORAL.VID_NOMBRE], T1.[DECLARACION_EXPERIENCIA_LABORAL.VID_FECHA], T1.[DECLARACION_EXPERIENCIA_LABORAL.VID_HOMOCLAVE], T1.[DECLARACION_EXPERIENCIA_LABORAL.NID_DECLARACION], T1.[DECLARACION_EXPERIENCIA_LABORAL.NID_EXPERIENCIA_LABORAL], T1.[DECLARACION_EXPERIENCIA_LABORAL.NID_AMBITO_SECTOR], T1.[DECLARACION_EXPERIENCIA_LABORAL.NID_NIVEL_GOBIERNO], T1.[DECLARACION_EXPERIENCIA_LABORAL.NID_AMBITO_PUBLICO], T1.[DECLARACION_EXPERIENCIA_LABORAL.V_NOMBRE], T1.[DECLARACION_EXPERIENCIA_LABORAL.V_RFC], T1.[DECLARACION_EXPERIENCIA_LABORAL.V_AREA_ADSCRIPCION], T1.[DECLARACION_EXPERIENCIA_LABORAL.V_PUESTO], T1.[DECLARACION_EXPERIENCIA_LABORAL.V_FUNCION_PRINCIPAL], T1.[DECLARACION_EXPERIENCIA_LABORAL.NID_SECTOR], T1.[DECLARACION_EXPERIENCIA_LABORAL.V_SECTOR], T1.[DECLARACION_EXPERIENCIA_LABORAL.F_INGRESO], T1.[DECLARACION_EXPERIENCIA_LABORAL.F_EGRESO], T1.[DECLARACION_EXPERIENCIA_LABORAL.NID_PAIS], T1.[DECLARACION_EXPERIENCIA_LABORAL.E_OBSERVACIONES], T1.[DECLARACION_EXPERIENCIA_LABORAL.E_OBSERVACIONES_MARCADO], T1.[DECLARACION_EXPERIENCIA_LABORAL.V_OBSERVACIONES_TESTADO], T1.[DECLARACION_EXPERIENCIA_LABORAL.NID_ESTADO_TESTADO])
    FROM (
        SELECT 
            T.VID_NOMBRE AS [DECLARACION_EXPERIENCIA_LABORAL.VID_NOMBRE], 
            T.VID_FECHA AS [DECLARACION_EXPERIENCIA_LABORAL.VID_FECHA], 
            T.VID_HOMOCLAVE AS [DECLARACION_EXPERIENCIA_LABORAL.VID_HOMOCLAVE], 
            T.NID_DECLARACION AS [DECLARACION_EXPERIENCIA_LABORAL.NID_DECLARACION], 
            T.NID_EXPERIENCIA_LABORAL AS [DECLARACION_EXPERIENCIA_LABORAL.NID_EXPERIENCIA_LABORAL], 
            T.NID_AMBITO_SECTOR AS [DECLARACION_EXPERIENCIA_LABORAL.NID_AMBITO_SECTOR], 
            T.NID_NIVEL_GOBIERNO AS [DECLARACION_EXPERIENCIA_LABORAL.NID_NIVEL_GOBIERNO], 
            T.NID_AMBITO_PUBLICO AS [DECLARACION_EXPERIENCIA_LABORAL.NID_AMBITO_PUBLICO], 
            T.V_NOMBRE AS [DECLARACION_EXPERIENCIA_LABORAL.V_NOMBRE], 
            T.V_RFC AS [DECLARACION_EXPERIENCIA_LABORAL.V_RFC], 
            T.V_AREA_ADSCRIPCION AS [DECLARACION_EXPERIENCIA_LABORAL.V_AREA_ADSCRIPCION], 
            T.V_PUESTO AS [DECLARACION_EXPERIENCIA_LABORAL.V_PUESTO], 
            T.V_FUNCION_PRINCIPAL AS [DECLARACION_EXPERIENCIA_LABORAL.V_FUNCION_PRINCIPAL], 
            T.NID_SECTOR AS [DECLARACION_EXPERIENCIA_LABORAL.NID_SECTOR], 
            T.V_SECTOR AS [DECLARACION_EXPERIENCIA_LABORAL.V_SECTOR], 
            T.F_INGRESO AS [DECLARACION_EXPERIENCIA_LABORAL.F_INGRESO], 
            T.F_EGRESO AS [DECLARACION_EXPERIENCIA_LABORAL.F_EGRESO], 
            T.NID_PAIS AS [DECLARACION_EXPERIENCIA_LABORAL.NID_PAIS], 
            T.E_OBSERVACIONES AS [DECLARACION_EXPERIENCIA_LABORAL.E_OBSERVACIONES], 
            T.E_OBSERVACIONES_MARCADO AS [DECLARACION_EXPERIENCIA_LABORAL.E_OBSERVACIONES_MARCADO], 
            T.V_OBSERVACIONES_TESTADO AS [DECLARACION_EXPERIENCIA_LABORAL.V_OBSERVACIONES_TESTADO], 
            T.NID_ESTADO_TESTADO AS [DECLARACION_EXPERIENCIA_LABORAL.NID_ESTADO_TESTADO], 
            True AS _from0
        FROM ModelDeclaraStoreContainer.DECLARACION_EXPERIENCIA_LABORAL AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for cnxDeclara.DECLARACION_INGRESOS.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView206()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing DECLARACION_INGRESOS
        [ModelDeclara.DECLARACION_INGRESOS](T1.[DECLARACION_INGRESOS.VID_NOMBRE], T1.[DECLARACION_INGRESOS.VID_FECHA], T1.[DECLARACION_INGRESOS.VID_HOMOCLAVE], T1.[DECLARACION_INGRESOS.NID_DECLARACION], T1.[DECLARACION_INGRESOS.NID_INGRESO], T1.[DECLARACION_INGRESOS.V_CONCEPTO], T1.[DECLARACION_INGRESOS.M_DECLARANTE], T1.[DECLARACION_INGRESOS.M_DEPENDIENTE], T1.[DECLARACION_INGRESOS.M_SUMA], T1.[DECLARACION_INGRESOS.N_NIVEL])
    FROM (
        SELECT 
            T.VID_NOMBRE AS [DECLARACION_INGRESOS.VID_NOMBRE], 
            T.VID_FECHA AS [DECLARACION_INGRESOS.VID_FECHA], 
            T.VID_HOMOCLAVE AS [DECLARACION_INGRESOS.VID_HOMOCLAVE], 
            T.NID_DECLARACION AS [DECLARACION_INGRESOS.NID_DECLARACION], 
            T.NID_INGRESO AS [DECLARACION_INGRESOS.NID_INGRESO], 
            T.V_CONCEPTO AS [DECLARACION_INGRESOS.V_CONCEPTO], 
            T.M_DECLARANTE AS [DECLARACION_INGRESOS.M_DECLARANTE], 
            T.M_DEPENDIENTE AS [DECLARACION_INGRESOS.M_DEPENDIENTE], 
            T.M_SUMA AS [DECLARACION_INGRESOS.M_SUMA], 
            T.N_NIVEL AS [DECLARACION_INGRESOS.N_NIVEL], 
            True AS _from0
        FROM ModelDeclaraStoreContainer.DECLARACION_INGRESOS AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for cnxDeclara.DECLARACION_REGIMEN_MATRIMONIAL.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView207()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing DECLARACION_REGIMEN_MATRIMONIAL
        [ModelDeclara.DECLARACION_REGIMEN_MATRIMONIAL](T1.[DECLARACION_REGIMEN_MATRIMONIAL.VID_NOMBRE], T1.[DECLARACION_REGIMEN_MATRIMONIAL.VID_FECHA], T1.[DECLARACION_REGIMEN_MATRIMONIAL.VID_HOMOCLAVE], T1.[DECLARACION_REGIMEN_MATRIMONIAL.NID_DECLARACION], T1.[DECLARACION_REGIMEN_MATRIMONIAL.NID_REGIMEN], T1.[DECLARACION_REGIMEN_MATRIMONIAL.NID_REGIMEN_MATRIMONIAL])
    FROM (
        SELECT 
            T.VID_NOMBRE AS [DECLARACION_REGIMEN_MATRIMONIAL.VID_NOMBRE], 
            T.VID_FECHA AS [DECLARACION_REGIMEN_MATRIMONIAL.VID_FECHA], 
            T.VID_HOMOCLAVE AS [DECLARACION_REGIMEN_MATRIMONIAL.VID_HOMOCLAVE], 
            T.NID_DECLARACION AS [DECLARACION_REGIMEN_MATRIMONIAL.NID_DECLARACION], 
            T.NID_REGIMEN AS [DECLARACION_REGIMEN_MATRIMONIAL.NID_REGIMEN], 
            T.NID_REGIMEN_MATRIMONIAL AS [DECLARACION_REGIMEN_MATRIMONIAL.NID_REGIMEN_MATRIMONIAL], 
            True AS _from0
        FROM ModelDeclaraStoreContainer.DECLARACION_REGIMEN_MATRIMONIAL AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for cnxDeclara.DECLARACION_RESTRICCIONES.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView208()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing DECLARACION_RESTRICCIONES
        [ModelDeclara.DECLARACION_RESTRICCIONES](T1.[DECLARACION_RESTRICCIONES.VID_NOMBRE], T1.[DECLARACION_RESTRICCIONES.VID_FECHA], T1.[DECLARACION_RESTRICCIONES.VID_HOMOCLAVE], T1.[DECLARACION_RESTRICCIONES.NID_DECLARACION], T1.[DECLARACION_RESTRICCIONES.NID_RESTRICCION], T1.[DECLARACION_RESTRICCIONES.L_RESPUESTA], T1.[DECLARACION_RESTRICCIONES.L_AUTO])
    FROM (
        SELECT 
            T.VID_NOMBRE AS [DECLARACION_RESTRICCIONES.VID_NOMBRE], 
            T.VID_FECHA AS [DECLARACION_RESTRICCIONES.VID_FECHA], 
            T.VID_HOMOCLAVE AS [DECLARACION_RESTRICCIONES.VID_HOMOCLAVE], 
            T.NID_DECLARACION AS [DECLARACION_RESTRICCIONES.NID_DECLARACION], 
            T.NID_RESTRICCION AS [DECLARACION_RESTRICCIONES.NID_RESTRICCION], 
            T.L_RESPUESTA AS [DECLARACION_RESTRICCIONES.L_RESPUESTA], 
            T.L_AUTO AS [DECLARACION_RESTRICCIONES.L_AUTO], 
            True AS _from0
        FROM ModelDeclaraStoreContainer.DECLARACION_RESTRICCIONES AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for cnxDeclara.H_PATRIMONIO.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView209()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing H_PATRIMONIO
        [ModelDeclara.H_PATRIMONIO](T1.[H_PATRIMONIO.VID_NOMBRE], T1.[H_PATRIMONIO.VID_FECHA], T1.[H_PATRIMONIO.VID_HOMOCLAVE], T1.[H_PATRIMONIO.NID_PATRIMONIO], T1.[H_PATRIMONIO.NID_HISTORICO], T1.[H_PATRIMONIO.NID_TIPO], T1.[H_PATRIMONIO.M_VALOR], T1.[H_PATRIMONIO.NID_DEC_INCOR], T1.[H_PATRIMONIO.F_INCORPORACION], T1.[H_PATRIMONIO.NID_DEC_ULT_MOD], T1.[H_PATRIMONIO.F_MODIFICACION], T1.[H_PATRIMONIO.L_ACTIVO], T1.[H_PATRIMONIO.F_REGISTRO])
    FROM (
        SELECT 
            T.VID_NOMBRE AS [H_PATRIMONIO.VID_NOMBRE], 
            T.VID_FECHA AS [H_PATRIMONIO.VID_FECHA], 
            T.VID_HOMOCLAVE AS [H_PATRIMONIO.VID_HOMOCLAVE], 
            T.NID_PATRIMONIO AS [H_PATRIMONIO.NID_PATRIMONIO], 
            T.NID_HISTORICO AS [H_PATRIMONIO.NID_HISTORICO], 
            T.NID_TIPO AS [H_PATRIMONIO.NID_TIPO], 
            T.M_VALOR AS [H_PATRIMONIO.M_VALOR], 
            T.NID_DEC_INCOR AS [H_PATRIMONIO.NID_DEC_INCOR], 
            T.F_INCORPORACION AS [H_PATRIMONIO.F_INCORPORACION], 
            T.NID_DEC_ULT_MOD AS [H_PATRIMONIO.NID_DEC_ULT_MOD], 
            T.F_MODIFICACION AS [H_PATRIMONIO.F_MODIFICACION], 
            T.L_ACTIVO AS [H_PATRIMONIO.L_ACTIVO], 
            T.F_REGISTRO AS [H_PATRIMONIO.F_REGISTRO], 
            True AS _from0
        FROM ModelDeclaraStoreContainer.H_PATRIMONIO AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for cnxDeclara.H_PATRIMONIO_ADEUDO.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView210()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing H_PATRIMONIO_ADEUDO
        [ModelDeclara.H_PATRIMONIO_ADEUDO](T1.[H_PATRIMONIO_ADEUDO.VID_NOMBRE], T1.[H_PATRIMONIO_ADEUDO.VID_FECHA], T1.[H_PATRIMONIO_ADEUDO.VID_HOMOCLAVE], T1.[H_PATRIMONIO_ADEUDO.NID_PATRIMONIO], T1.[H_PATRIMONIO_ADEUDO.NID_HISTORICO], T1.[H_PATRIMONIO_ADEUDO.NID_PAIS], T1.[H_PATRIMONIO_ADEUDO.CID_ENTIDAD_FEDERATIVA], T1.[H_PATRIMONIO_ADEUDO.NID_INSTITUCION], T1.[H_PATRIMONIO_ADEUDO.NID_TIPO_ADEUDO], T1.[H_PATRIMONIO_ADEUDO.M_ORIGINAL], T1.[H_PATRIMONIO_ADEUDO.M_SALDO], T1.[H_PATRIMONIO_ADEUDO.E_CUENTA])
    FROM (
        SELECT 
            T.VID_NOMBRE AS [H_PATRIMONIO_ADEUDO.VID_NOMBRE], 
            T.VID_FECHA AS [H_PATRIMONIO_ADEUDO.VID_FECHA], 
            T.VID_HOMOCLAVE AS [H_PATRIMONIO_ADEUDO.VID_HOMOCLAVE], 
            T.NID_PATRIMONIO AS [H_PATRIMONIO_ADEUDO.NID_PATRIMONIO], 
            T.NID_HISTORICO AS [H_PATRIMONIO_ADEUDO.NID_HISTORICO], 
            T.NID_PAIS AS [H_PATRIMONIO_ADEUDO.NID_PAIS], 
            T.CID_ENTIDAD_FEDERATIVA AS [H_PATRIMONIO_ADEUDO.CID_ENTIDAD_FEDERATIVA], 
            T.NID_INSTITUCION AS [H_PATRIMONIO_ADEUDO.NID_INSTITUCION], 
            T.NID_TIPO_ADEUDO AS [H_PATRIMONIO_ADEUDO.NID_TIPO_ADEUDO], 
            T.M_ORIGINAL AS [H_PATRIMONIO_ADEUDO.M_ORIGINAL], 
            T.M_SALDO AS [H_PATRIMONIO_ADEUDO.M_SALDO], 
            T.E_CUENTA AS [H_PATRIMONIO_ADEUDO.E_CUENTA], 
            True AS _from0
        FROM ModelDeclaraStoreContainer.H_PATRIMONIO_ADEUDO AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for cnxDeclara.H_PATRIMONIO_COPROPIETARIO.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView211()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing H_PATRIMONIO_COPROPIETARIO
        [ModelDeclara.H_PATRIMONIO_COPROPIETARIO](T1.[H_PATRIMONIO_COPROPIETARIO.VID_NOMBRE], T1.[H_PATRIMONIO_COPROPIETARIO.VID_FECHA], T1.[H_PATRIMONIO_COPROPIETARIO.VID_HOMOCLAVE], T1.[H_PATRIMONIO_COPROPIETARIO.NID_PATRIMONIO], T1.[H_PATRIMONIO_COPROPIETARIO.NID_HISTORICO], T1.[H_PATRIMONIO_COPROPIETARIO.NID_COPROPIETARIO], T1.[H_PATRIMONIO_COPROPIETARIO.CID_TIPO_PERSONA], T1.[H_PATRIMONIO_COPROPIETARIO.V_NOMBRE], T1.[H_PATRIMONIO_COPROPIETARIO.V_RFC])
    FROM (
        SELECT 
            T.VID_NOMBRE AS [H_PATRIMONIO_COPROPIETARIO.VID_NOMBRE], 
            T.VID_FECHA AS [H_PATRIMONIO_COPROPIETARIO.VID_FECHA], 
            T.VID_HOMOCLAVE AS [H_PATRIMONIO_COPROPIETARIO.VID_HOMOCLAVE], 
            T.NID_PATRIMONIO AS [H_PATRIMONIO_COPROPIETARIO.NID_PATRIMONIO], 
            T.NID_HISTORICO AS [H_PATRIMONIO_COPROPIETARIO.NID_HISTORICO], 
            T.NID_COPROPIETARIO AS [H_PATRIMONIO_COPROPIETARIO.NID_COPROPIETARIO], 
            T.CID_TIPO_PERSONA AS [H_PATRIMONIO_COPROPIETARIO.CID_TIPO_PERSONA], 
            T.V_NOMBRE AS [H_PATRIMONIO_COPROPIETARIO.V_NOMBRE], 
            T.V_RFC AS [H_PATRIMONIO_COPROPIETARIO.V_RFC], 
            True AS _from0
        FROM ModelDeclaraStoreContainer.H_PATRIMONIO_COPROPIETARIO AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for cnxDeclara.H_PATRIMONIO_DEPENDIENTES.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView212()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing H_PATRIMONIO_DEPENDIENTES
        [ModelDeclara.H_PATRIMONIO_DEPENDIENTES](T1.[H_PATRIMONIO_DEPENDIENTES.VID_NOMBRE], T1.[H_PATRIMONIO_DEPENDIENTES.VID_FECHA], T1.[H_PATRIMONIO_DEPENDIENTES.VID_HOMOCLAVE], T1.[H_PATRIMONIO_DEPENDIENTES.NID_DEPENDIENTE], T1.[H_PATRIMONIO_DEPENDIENTES.NID_HISTORICO], T1.[H_PATRIMONIO_DEPENDIENTES.NID_TIPO_DEPENDIENTE], T1.[H_PATRIMONIO_DEPENDIENTES.E_NOMBRE], T1.[H_PATRIMONIO_DEPENDIENTES.E_PRIMER_A], T1.[H_PATRIMONIO_DEPENDIENTES.E_SEGUNDO_A], T1.[H_PATRIMONIO_DEPENDIENTES.F_NACIMIENTO], T1.[H_PATRIMONIO_DEPENDIENTES.E_RFC], T1.[H_PATRIMONIO_DEPENDIENTES.L_DEPENDE_ECO], T1.[H_PATRIMONIO_DEPENDIENTES.V_DOMICILIO], T1.[H_PATRIMONIO_DEPENDIENTES.L_ACTIVO])
    FROM (
        SELECT 
            T.VID_NOMBRE AS [H_PATRIMONIO_DEPENDIENTES.VID_NOMBRE], 
            T.VID_FECHA AS [H_PATRIMONIO_DEPENDIENTES.VID_FECHA], 
            T.VID_HOMOCLAVE AS [H_PATRIMONIO_DEPENDIENTES.VID_HOMOCLAVE], 
            T.NID_DEPENDIENTE AS [H_PATRIMONIO_DEPENDIENTES.NID_DEPENDIENTE], 
            T.NID_HISTORICO AS [H_PATRIMONIO_DEPENDIENTES.NID_HISTORICO], 
            T.NID_TIPO_DEPENDIENTE AS [H_PATRIMONIO_DEPENDIENTES.NID_TIPO_DEPENDIENTE], 
            T.E_NOMBRE AS [H_PATRIMONIO_DEPENDIENTES.E_NOMBRE], 
            T.E_PRIMER_A AS [H_PATRIMONIO_DEPENDIENTES.E_PRIMER_A], 
            T.E_SEGUNDO_A AS [H_PATRIMONIO_DEPENDIENTES.E_SEGUNDO_A], 
            T.F_NACIMIENTO AS [H_PATRIMONIO_DEPENDIENTES.F_NACIMIENTO], 
            T.E_RFC AS [H_PATRIMONIO_DEPENDIENTES.E_RFC], 
            T.L_DEPENDE_ECO AS [H_PATRIMONIO_DEPENDIENTES.L_DEPENDE_ECO], 
            T.V_DOMICILIO AS [H_PATRIMONIO_DEPENDIENTES.V_DOMICILIO], 
            T.L_ACTIVO AS [H_PATRIMONIO_DEPENDIENTES.L_ACTIVO], 
            True AS _from0
        FROM ModelDeclaraStoreContainer.H_PATRIMONIO_DEPENDIENTES AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for cnxDeclara.H_PATRIMONIO_FORMA_ADQUISICION.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView213()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing H_PATRIMONIO_FORMA_ADQUISICION
        [ModelDeclara.H_PATRIMONIO_FORMA_ADQUISICION](T1.[H_PATRIMONIO_FORMA_ADQUISICION.VID_NOMBRE], T1.[H_PATRIMONIO_FORMA_ADQUISICION.VID_FECHA], T1.[H_PATRIMONIO_FORMA_ADQUISICION.VID_HOMOCLAVE], T1.[H_PATRIMONIO_FORMA_ADQUISICION.NID_PATRIMONIO], T1.[H_PATRIMONIO_FORMA_ADQUISICION.NID_HISTORICO], T1.[H_PATRIMONIO_FORMA_ADQUISICION.NID_FORMA_ADQUISICION], T1.[H_PATRIMONIO_FORMA_ADQUISICION.M_DONACION])
    FROM (
        SELECT 
            T.VID_NOMBRE AS [H_PATRIMONIO_FORMA_ADQUISICION.VID_NOMBRE], 
            T.VID_FECHA AS [H_PATRIMONIO_FORMA_ADQUISICION.VID_FECHA], 
            T.VID_HOMOCLAVE AS [H_PATRIMONIO_FORMA_ADQUISICION.VID_HOMOCLAVE], 
            T.NID_PATRIMONIO AS [H_PATRIMONIO_FORMA_ADQUISICION.NID_PATRIMONIO], 
            T.NID_HISTORICO AS [H_PATRIMONIO_FORMA_ADQUISICION.NID_HISTORICO], 
            T.NID_FORMA_ADQUISICION AS [H_PATRIMONIO_FORMA_ADQUISICION.NID_FORMA_ADQUISICION], 
            T.M_DONACION AS [H_PATRIMONIO_FORMA_ADQUISICION.M_DONACION], 
            True AS _from0
        FROM ModelDeclaraStoreContainer.H_PATRIMONIO_FORMA_ADQUISICION AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for cnxDeclara.H_PATRIMONIO_INMUEBLE.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView214()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing H_PATRIMONIO_INMUEBLE
        [ModelDeclara.H_PATRIMONIO_INMUEBLE](T1.[H_PATRIMONIO_INMUEBLE.VID_NOMBRE], T1.[H_PATRIMONIO_INMUEBLE.VID_FECHA], T1.[H_PATRIMONIO_INMUEBLE.VID_HOMOCLAVE], T1.[H_PATRIMONIO_INMUEBLE.NID_PATRIMONIO], T1.[H_PATRIMONIO_INMUEBLE.NID_HISTORICO], T1.[H_PATRIMONIO_INMUEBLE.NID_TIPO], T1.[H_PATRIMONIO_INMUEBLE.F_ADQUISICION], T1.[H_PATRIMONIO_INMUEBLE.NID_USO], T1.[H_PATRIMONIO_INMUEBLE.E_UBICACION], T1.[H_PATRIMONIO_INMUEBLE.N_TERRENO], T1.[H_PATRIMONIO_INMUEBLE.N_CONSTRUCCION], T1.[H_PATRIMONIO_INMUEBLE.M_VALOR_INMUEBLE])
    FROM (
        SELECT 
            T.VID_NOMBRE AS [H_PATRIMONIO_INMUEBLE.VID_NOMBRE], 
            T.VID_FECHA AS [H_PATRIMONIO_INMUEBLE.VID_FECHA], 
            T.VID_HOMOCLAVE AS [H_PATRIMONIO_INMUEBLE.VID_HOMOCLAVE], 
            T.NID_PATRIMONIO AS [H_PATRIMONIO_INMUEBLE.NID_PATRIMONIO], 
            T.NID_HISTORICO AS [H_PATRIMONIO_INMUEBLE.NID_HISTORICO], 
            T.NID_TIPO AS [H_PATRIMONIO_INMUEBLE.NID_TIPO], 
            T.F_ADQUISICION AS [H_PATRIMONIO_INMUEBLE.F_ADQUISICION], 
            T.NID_USO AS [H_PATRIMONIO_INMUEBLE.NID_USO], 
            T.E_UBICACION AS [H_PATRIMONIO_INMUEBLE.E_UBICACION], 
            T.N_TERRENO AS [H_PATRIMONIO_INMUEBLE.N_TERRENO], 
            T.N_CONSTRUCCION AS [H_PATRIMONIO_INMUEBLE.N_CONSTRUCCION], 
            T.M_VALOR_INMUEBLE AS [H_PATRIMONIO_INMUEBLE.M_VALOR_INMUEBLE], 
            True AS _from0
        FROM ModelDeclaraStoreContainer.H_PATRIMONIO_INMUEBLE AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for cnxDeclara.H_PATRIMONIO_INVERSION.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView215()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing H_PATRIMONIO_INVERSION
        [ModelDeclara.H_PATRIMONIO_INVERSION](T1.[H_PATRIMONIO_INVERSION.VID_NOMBRE], T1.[H_PATRIMONIO_INVERSION.VID_FECHA], T1.[H_PATRIMONIO_INVERSION.VID_HOMOCLAVE], T1.[H_PATRIMONIO_INVERSION.NID_PATRIMONIO], T1.[H_PATRIMONIO_INVERSION.NID_HISTORICO], T1.[H_PATRIMONIO_INVERSION.NID_TIPO_INVERSION], T1.[H_PATRIMONIO_INVERSION.NID_SUBTIPO_INVERSION], T1.[H_PATRIMONIO_INVERSION.NID_INSTITUCION], T1.[H_PATRIMONIO_INVERSION.E_CUENTA], T1.[H_PATRIMONIO_INVERSION.V_CUENTA_CORTO], T1.[H_PATRIMONIO_INVERSION.V_OTRO], T1.[H_PATRIMONIO_INVERSION.M_SALDO], T1.[H_PATRIMONIO_INVERSION.NID_PAIS], T1.[H_PATRIMONIO_INVERSION.CID_ENTIDAD_FEDERATIVA], T1.[H_PATRIMONIO_INVERSION.V_LUGAR])
    FROM (
        SELECT 
            T.VID_NOMBRE AS [H_PATRIMONIO_INVERSION.VID_NOMBRE], 
            T.VID_FECHA AS [H_PATRIMONIO_INVERSION.VID_FECHA], 
            T.VID_HOMOCLAVE AS [H_PATRIMONIO_INVERSION.VID_HOMOCLAVE], 
            T.NID_PATRIMONIO AS [H_PATRIMONIO_INVERSION.NID_PATRIMONIO], 
            T.NID_HISTORICO AS [H_PATRIMONIO_INVERSION.NID_HISTORICO], 
            T.NID_TIPO_INVERSION AS [H_PATRIMONIO_INVERSION.NID_TIPO_INVERSION], 
            T.NID_SUBTIPO_INVERSION AS [H_PATRIMONIO_INVERSION.NID_SUBTIPO_INVERSION], 
            T.NID_INSTITUCION AS [H_PATRIMONIO_INVERSION.NID_INSTITUCION], 
            T.E_CUENTA AS [H_PATRIMONIO_INVERSION.E_CUENTA], 
            T.V_CUENTA_CORTO AS [H_PATRIMONIO_INVERSION.V_CUENTA_CORTO], 
            T.V_OTRO AS [H_PATRIMONIO_INVERSION.V_OTRO], 
            T.M_SALDO AS [H_PATRIMONIO_INVERSION.M_SALDO], 
            T.NID_PAIS AS [H_PATRIMONIO_INVERSION.NID_PAIS], 
            T.CID_ENTIDAD_FEDERATIVA AS [H_PATRIMONIO_INVERSION.CID_ENTIDAD_FEDERATIVA], 
            T.V_LUGAR AS [H_PATRIMONIO_INVERSION.V_LUGAR], 
            True AS _from0
        FROM ModelDeclaraStoreContainer.H_PATRIMONIO_INVERSION AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for cnxDeclara.H_PATRIMONIO_MUEBLE.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView216()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing H_PATRIMONIO_MUEBLE
        [ModelDeclara.H_PATRIMONIO_MUEBLE](T1.[H_PATRIMONIO_MUEBLE.VID_NOMBRE], T1.[H_PATRIMONIO_MUEBLE.VID_FECHA], T1.[H_PATRIMONIO_MUEBLE.VID_HOMOCLAVE], T1.[H_PATRIMONIO_MUEBLE.NID_PATRIMONIO], T1.[H_PATRIMONIO_MUEBLE.NID_HISTORICO], T1.[H_PATRIMONIO_MUEBLE.NID_TIPO], T1.[H_PATRIMONIO_MUEBLE.E_ESPECIFICACION], T1.[H_PATRIMONIO_MUEBLE.M_VALOR], T1.[H_PATRIMONIO_MUEBLE.F_ADQUISICION])
    FROM (
        SELECT 
            T.VID_NOMBRE AS [H_PATRIMONIO_MUEBLE.VID_NOMBRE], 
            T.VID_FECHA AS [H_PATRIMONIO_MUEBLE.VID_FECHA], 
            T.VID_HOMOCLAVE AS [H_PATRIMONIO_MUEBLE.VID_HOMOCLAVE], 
            T.NID_PATRIMONIO AS [H_PATRIMONIO_MUEBLE.NID_PATRIMONIO], 
            T.NID_HISTORICO AS [H_PATRIMONIO_MUEBLE.NID_HISTORICO], 
            T.NID_TIPO AS [H_PATRIMONIO_MUEBLE.NID_TIPO], 
            T.E_ESPECIFICACION AS [H_PATRIMONIO_MUEBLE.E_ESPECIFICACION], 
            T.M_VALOR AS [H_PATRIMONIO_MUEBLE.M_VALOR], 
            T.F_ADQUISICION AS [H_PATRIMONIO_MUEBLE.F_ADQUISICION], 
            True AS _from0
        FROM ModelDeclaraStoreContainer.H_PATRIMONIO_MUEBLE AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for cnxDeclara.H_PATRIMONIO_TITULAR.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView217()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing H_PATRIMONIO_TITULAR
        [ModelDeclara.H_PATRIMONIO_TITULAR](T1.[H_PATRIMONIO_TITULAR.VID_NOMBRE], T1.[H_PATRIMONIO_TITULAR.VID_FECHA], T1.[H_PATRIMONIO_TITULAR.VID_HOMOCLAVE], T1.[H_PATRIMONIO_TITULAR.NID_PATRIMONIO], T1.[H_PATRIMONIO_TITULAR.NID_DEPENDIENTE], T1.[H_PATRIMONIO_TITULAR.NID_HISTORICO], T1.[H_PATRIMONIO_TITULAR.L_DIF])
    FROM (
        SELECT 
            T.VID_NOMBRE AS [H_PATRIMONIO_TITULAR.VID_NOMBRE], 
            T.VID_FECHA AS [H_PATRIMONIO_TITULAR.VID_FECHA], 
            T.VID_HOMOCLAVE AS [H_PATRIMONIO_TITULAR.VID_HOMOCLAVE], 
            T.NID_PATRIMONIO AS [H_PATRIMONIO_TITULAR.NID_PATRIMONIO], 
            T.NID_DEPENDIENTE AS [H_PATRIMONIO_TITULAR.NID_DEPENDIENTE], 
            T.NID_HISTORICO AS [H_PATRIMONIO_TITULAR.NID_HISTORICO], 
            T.L_DIF AS [H_PATRIMONIO_TITULAR.L_DIF], 
            True AS _from0
        FROM ModelDeclaraStoreContainer.H_PATRIMONIO_TITULAR AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for cnxDeclara.H_PATRIMONIO_VEHICULO.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView218()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing H_PATRIMONIO_VEHICULO
        [ModelDeclara.H_PATRIMONIO_VEHICULO](T1.[H_PATRIMONIO_VEHICULO.VID_NOMBRE], T1.[H_PATRIMONIO_VEHICULO.VID_FECHA], T1.[H_PATRIMONIO_VEHICULO.VID_HOMOCLAVE], T1.[H_PATRIMONIO_VEHICULO.NID_PATRIMONIO], T1.[H_PATRIMONIO_VEHICULO.NID_HISTORICO], T1.[H_PATRIMONIO_VEHICULO.NID_MARCA], T1.[H_PATRIMONIO_VEHICULO.C_MODELO], T1.[H_PATRIMONIO_VEHICULO.V_DESCRIPCION], T1.[H_PATRIMONIO_VEHICULO.F_ADQUISICION], T1.[H_PATRIMONIO_VEHICULO.NID_USO], T1.[H_PATRIMONIO_VEHICULO.M_VALOR_VEHICULO], T1.[H_PATRIMONIO_VEHICULO.NID_TIPO_VEHICULO])
    FROM (
        SELECT 
            T.VID_NOMBRE AS [H_PATRIMONIO_VEHICULO.VID_NOMBRE], 
            T.VID_FECHA AS [H_PATRIMONIO_VEHICULO.VID_FECHA], 
            T.VID_HOMOCLAVE AS [H_PATRIMONIO_VEHICULO.VID_HOMOCLAVE], 
            T.NID_PATRIMONIO AS [H_PATRIMONIO_VEHICULO.NID_PATRIMONIO], 
            T.NID_HISTORICO AS [H_PATRIMONIO_VEHICULO.NID_HISTORICO], 
            T.NID_MARCA AS [H_PATRIMONIO_VEHICULO.NID_MARCA], 
            T.C_MODELO AS [H_PATRIMONIO_VEHICULO.C_MODELO], 
            T.V_DESCRIPCION AS [H_PATRIMONIO_VEHICULO.V_DESCRIPCION], 
            T.F_ADQUISICION AS [H_PATRIMONIO_VEHICULO.F_ADQUISICION], 
            T.NID_USO AS [H_PATRIMONIO_VEHICULO.NID_USO], 
            T.M_VALOR_VEHICULO AS [H_PATRIMONIO_VEHICULO.M_VALOR_VEHICULO], 
            T.NID_TIPO_VEHICULO AS [H_PATRIMONIO_VEHICULO.NID_TIPO_VEHICULO], 
            True AS _from0
        FROM ModelDeclaraStoreContainer.H_PATRIMONIO_VEHICULO AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for cnxDeclara.MODIFICACION.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView219()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing MODIFICACION
        [ModelDeclara.MODIFICACION](T1.[MODIFICACION.VID_NOMBRE], T1.[MODIFICACION.VID_FECHA], T1.[MODIFICACION.VID_HOMOCLAVE], T1.[MODIFICACION.NID_DECLARACION], T1.[MODIFICACION.L_PRESENTO_DEC], T1.[MODIFICACION.F_INICIO], T1.[MODIFICACION.F_FIN])
    FROM (
        SELECT 
            T.VID_NOMBRE AS [MODIFICACION.VID_NOMBRE], 
            T.VID_FECHA AS [MODIFICACION.VID_FECHA], 
            T.VID_HOMOCLAVE AS [MODIFICACION.VID_HOMOCLAVE], 
            T.NID_DECLARACION AS [MODIFICACION.NID_DECLARACION], 
            T.L_PRESENTO_DEC AS [MODIFICACION.L_PRESENTO_DEC], 
            T.F_INICIO AS [MODIFICACION.F_INICIO], 
            T.F_FIN AS [MODIFICACION.F_FIN], 
            True AS _from0
        FROM ModelDeclaraStoreContainer.MODIFICACION AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for cnxDeclara.MODIFICACION_ADEUDO.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView220()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing MODIFICACION_ADEUDO
        [ModelDeclara.MODIFICACION_ADEUDO](T1.[MODIFICACION_ADEUDO.VID_NOMBRE], T1.[MODIFICACION_ADEUDO.VID_FECHA], T1.[MODIFICACION_ADEUDO.VID_HOMOCLAVE], T1.[MODIFICACION_ADEUDO.NID_DECLARACION], T1.[MODIFICACION_ADEUDO.NID_PATRIMONIO], T1.[MODIFICACION_ADEUDO.M_PAGOS], T1.[MODIFICACION_ADEUDO.M_SALDOS], T1.[MODIFICACION_ADEUDO.L_CANCELADO], T1.[MODIFICACION_ADEUDO.L_MODIFICADO])
    FROM (
        SELECT 
            T.VID_NOMBRE AS [MODIFICACION_ADEUDO.VID_NOMBRE], 
            T.VID_FECHA AS [MODIFICACION_ADEUDO.VID_FECHA], 
            T.VID_HOMOCLAVE AS [MODIFICACION_ADEUDO.VID_HOMOCLAVE], 
            T.NID_DECLARACION AS [MODIFICACION_ADEUDO.NID_DECLARACION], 
            T.NID_PATRIMONIO AS [MODIFICACION_ADEUDO.NID_PATRIMONIO], 
            T.M_PAGOS AS [MODIFICACION_ADEUDO.M_PAGOS], 
            T.M_SALDOS AS [MODIFICACION_ADEUDO.M_SALDOS], 
            T.L_CANCELADO AS [MODIFICACION_ADEUDO.L_CANCELADO], 
            T.L_MODIFICADO AS [MODIFICACION_ADEUDO.L_MODIFICADO], 
            True AS _from0
        FROM ModelDeclaraStoreContainer.MODIFICACION_ADEUDO AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for cnxDeclara.MODIFICACION_ADEUDO_TITULAR.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView221()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing MODIFICACION_ADEUDO_TITULAR
        [ModelDeclara.MODIFICACION_ADEUDO_TITULAR](T1.[MODIFICACION_ADEUDO_TITULAR.VID_NOMBRE], T1.[MODIFICACION_ADEUDO_TITULAR.VID_FECHA], T1.[MODIFICACION_ADEUDO_TITULAR.VID_HOMOCLAVE], T1.[MODIFICACION_ADEUDO_TITULAR.NID_DECLARACION], T1.[MODIFICACION_ADEUDO_TITULAR.NID_PATRIMONIO], T1.[MODIFICACION_ADEUDO_TITULAR.NID_DEPENDIENTE], T1.[MODIFICACION_ADEUDO_TITULAR.L_DIF])
    FROM (
        SELECT 
            T.VID_NOMBRE AS [MODIFICACION_ADEUDO_TITULAR.VID_NOMBRE], 
            T.VID_FECHA AS [MODIFICACION_ADEUDO_TITULAR.VID_FECHA], 
            T.VID_HOMOCLAVE AS [MODIFICACION_ADEUDO_TITULAR.VID_HOMOCLAVE], 
            T.NID_DECLARACION AS [MODIFICACION_ADEUDO_TITULAR.NID_DECLARACION], 
            T.NID_PATRIMONIO AS [MODIFICACION_ADEUDO_TITULAR.NID_PATRIMONIO], 
            T.NID_DEPENDIENTE AS [MODIFICACION_ADEUDO_TITULAR.NID_DEPENDIENTE], 
            T.L_DIF AS [MODIFICACION_ADEUDO_TITULAR.L_DIF], 
            True AS _from0
        FROM ModelDeclaraStoreContainer.MODIFICACION_ADEUDO_TITULAR AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for cnxDeclara.MODIFICACION_BAJA.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView222()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing MODIFICACION_BAJA
        [ModelDeclara.MODIFICACION_BAJA](T1.[MODIFICACION_BAJA.VID_NOMBRE], T1.[MODIFICACION_BAJA.VID_FECHA], T1.[MODIFICACION_BAJA.VID_HOMOCLAVE], T1.[MODIFICACION_BAJA.NID_DECLARACION], T1.[MODIFICACION_BAJA.NID_PATRIMONIO], T1.[MODIFICACION_BAJA.NID_TIPO_BAJA], T1.[MODIFICACION_BAJA.F_BAJA])
    FROM (
        SELECT 
            T.VID_NOMBRE AS [MODIFICACION_BAJA.VID_NOMBRE], 
            T.VID_FECHA AS [MODIFICACION_BAJA.VID_FECHA], 
            T.VID_HOMOCLAVE AS [MODIFICACION_BAJA.VID_HOMOCLAVE], 
            T.NID_DECLARACION AS [MODIFICACION_BAJA.NID_DECLARACION], 
            T.NID_PATRIMONIO AS [MODIFICACION_BAJA.NID_PATRIMONIO], 
            T.NID_TIPO_BAJA AS [MODIFICACION_BAJA.NID_TIPO_BAJA], 
            T.F_BAJA AS [MODIFICACION_BAJA.F_BAJA], 
            True AS _from0
        FROM ModelDeclaraStoreContainer.MODIFICACION_BAJA AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for cnxDeclara.MODIFICACION_BAJA_SINIESTRO.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView223()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing MODIFICACION_BAJA_SINIESTRO
        [ModelDeclara.MODIFICACION_BAJA_SINIESTRO](T1.[MODIFICACION_BAJA_SINIESTRO.VID_NOMBRE], T1.[MODIFICACION_BAJA_SINIESTRO.VID_FECHA], T1.[MODIFICACION_BAJA_SINIESTRO.VID_HOMOCLAVE], T1.[MODIFICACION_BAJA_SINIESTRO.NID_DECLARACION], T1.[MODIFICACION_BAJA_SINIESTRO.NID_PATRIMONIO], T1.[MODIFICACION_BAJA_SINIESTRO.L_POLIZA], T1.[MODIFICACION_BAJA_SINIESTRO.M_RECUPERADO])
    FROM (
        SELECT 
            T.VID_NOMBRE AS [MODIFICACION_BAJA_SINIESTRO.VID_NOMBRE], 
            T.VID_FECHA AS [MODIFICACION_BAJA_SINIESTRO.VID_FECHA], 
            T.VID_HOMOCLAVE AS [MODIFICACION_BAJA_SINIESTRO.VID_HOMOCLAVE], 
            T.NID_DECLARACION AS [MODIFICACION_BAJA_SINIESTRO.NID_DECLARACION], 
            T.NID_PATRIMONIO AS [MODIFICACION_BAJA_SINIESTRO.NID_PATRIMONIO], 
            T.L_POLIZA AS [MODIFICACION_BAJA_SINIESTRO.L_POLIZA], 
            T.M_RECUPERADO AS [MODIFICACION_BAJA_SINIESTRO.M_RECUPERADO], 
            True AS _from0
        FROM ModelDeclaraStoreContainer.MODIFICACION_BAJA_SINIESTRO AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for cnxDeclara.MODIFICACION_BAJA_VENTA.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView224()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing MODIFICACION_BAJA_VENTA
        [ModelDeclara.MODIFICACION_BAJA_VENTA](T1.[MODIFICACION_BAJA_VENTA.VID_NOMBRE], T1.[MODIFICACION_BAJA_VENTA.VID_FECHA], T1.[MODIFICACION_BAJA_VENTA.VID_HOMOCLAVE], T1.[MODIFICACION_BAJA_VENTA.NID_DECLARACION], T1.[MODIFICACION_BAJA_VENTA.NID_PATRIMONIO], T1.[MODIFICACION_BAJA_VENTA.NID_TIPO_VENTA], T1.[MODIFICACION_BAJA_VENTA.M_IMPORTE_VENTA], T1.[MODIFICACION_BAJA_VENTA.E_BENIFICIARIO])
    FROM (
        SELECT 
            T.VID_NOMBRE AS [MODIFICACION_BAJA_VENTA.VID_NOMBRE], 
            T.VID_FECHA AS [MODIFICACION_BAJA_VENTA.VID_FECHA], 
            T.VID_HOMOCLAVE AS [MODIFICACION_BAJA_VENTA.VID_HOMOCLAVE], 
            T.NID_DECLARACION AS [MODIFICACION_BAJA_VENTA.NID_DECLARACION], 
            T.NID_PATRIMONIO AS [MODIFICACION_BAJA_VENTA.NID_PATRIMONIO], 
            T.NID_TIPO_VENTA AS [MODIFICACION_BAJA_VENTA.NID_TIPO_VENTA], 
            T.M_IMPORTE_VENTA AS [MODIFICACION_BAJA_VENTA.M_IMPORTE_VENTA], 
            T.E_BENIFICIARIO AS [MODIFICACION_BAJA_VENTA.E_BENIFICIARIO], 
            True AS _from0
        FROM ModelDeclaraStoreContainer.MODIFICACION_BAJA_VENTA AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for cnxDeclara.MODIFICACION_DONACION.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView225()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing MODIFICACION_DONACION
        [ModelDeclara.MODIFICACION_DONACION](T1.[MODIFICACION_DONACION.VID_NOMBRE], T1.[MODIFICACION_DONACION.VID_FECHA], T1.[MODIFICACION_DONACION.VID_HOMOCLAVE], T1.[MODIFICACION_DONACION.NID_DECLARACION], T1.[MODIFICACION_DONACION.NID_PATRIMONIO], T1.[MODIFICACION_DONACION.E_ESPECIFICA], T1.[MODIFICACION_DONACION.E_BENIFICIARIO])
    FROM (
        SELECT 
            T.VID_NOMBRE AS [MODIFICACION_DONACION.VID_NOMBRE], 
            T.VID_FECHA AS [MODIFICACION_DONACION.VID_FECHA], 
            T.VID_HOMOCLAVE AS [MODIFICACION_DONACION.VID_HOMOCLAVE], 
            T.NID_DECLARACION AS [MODIFICACION_DONACION.NID_DECLARACION], 
            T.NID_PATRIMONIO AS [MODIFICACION_DONACION.NID_PATRIMONIO], 
            T.E_ESPECIFICA AS [MODIFICACION_DONACION.E_ESPECIFICA], 
            T.E_BENIFICIARIO AS [MODIFICACION_DONACION.E_BENIFICIARIO], 
            True AS _from0
        FROM ModelDeclaraStoreContainer.MODIFICACION_DONACION AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for cnxDeclara.MODIFICACION_GASTO.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView226()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing MODIFICACION_GASTO
        [ModelDeclara.MODIFICACION_GASTO](T1.[MODIFICACION_GASTO.VID_NOMBRE], T1.[MODIFICACION_GASTO.VID_FECHA], T1.[MODIFICACION_GASTO.VID_HOMOCLAVE], T1.[MODIFICACION_GASTO.NID_DECLARACION], T1.[MODIFICACION_GASTO.NID_GASTO], T1.[MODIFICACION_GASTO.NID_TIPO_GASTO], T1.[MODIFICACION_GASTO.V_GASTO], T1.[MODIFICACION_GASTO.M_GASTO], T1.[MODIFICACION_GASTO.L_AUTOGENERADO], T1.[MODIFICACION_GASTO.NID_PATRIMONIO_ASC])
    FROM (
        SELECT 
            T.VID_NOMBRE AS [MODIFICACION_GASTO.VID_NOMBRE], 
            T.VID_FECHA AS [MODIFICACION_GASTO.VID_FECHA], 
            T.VID_HOMOCLAVE AS [MODIFICACION_GASTO.VID_HOMOCLAVE], 
            T.NID_DECLARACION AS [MODIFICACION_GASTO.NID_DECLARACION], 
            T.NID_GASTO AS [MODIFICACION_GASTO.NID_GASTO], 
            T.NID_TIPO_GASTO AS [MODIFICACION_GASTO.NID_TIPO_GASTO], 
            T.V_GASTO AS [MODIFICACION_GASTO.V_GASTO], 
            T.M_GASTO AS [MODIFICACION_GASTO.M_GASTO], 
            T.L_AUTOGENERADO AS [MODIFICACION_GASTO.L_AUTOGENERADO], 
            T.NID_PATRIMONIO_ASC AS [MODIFICACION_GASTO.NID_PATRIMONIO_ASC], 
            True AS _from0
        FROM ModelDeclaraStoreContainer.MODIFICACION_GASTO AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for cnxDeclara.MODIFICACION_INGRESOS.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView227()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing MODIFICACION_INGRESOS
        [ModelDeclara.MODIFICACION_INGRESOS](T1.[MODIFICACION_INGRESOS.VID_NOMBRE], T1.[MODIFICACION_INGRESOS.VID_FECHA], T1.[MODIFICACION_INGRESOS.VID_HOMOCLAVE], T1.[MODIFICACION_INGRESOS.NID_DECLARACION], T1.[MODIFICACION_INGRESOS.NID_INGRESO], T1.[MODIFICACION_INGRESOS.E_ESPECIFICAR], T1.[MODIFICACION_INGRESOS.E_ESPECIFICAR_COMPLEMENTO], T1.[MODIFICACION_INGRESOS.M_INGRESO], T1.[MODIFICACION_INGRESOS.C_TITULAR])
    FROM (
        SELECT 
            T.VID_NOMBRE AS [MODIFICACION_INGRESOS.VID_NOMBRE], 
            T.VID_FECHA AS [MODIFICACION_INGRESOS.VID_FECHA], 
            T.VID_HOMOCLAVE AS [MODIFICACION_INGRESOS.VID_HOMOCLAVE], 
            T.NID_DECLARACION AS [MODIFICACION_INGRESOS.NID_DECLARACION], 
            T.NID_INGRESO AS [MODIFICACION_INGRESOS.NID_INGRESO], 
            T.E_ESPECIFICAR AS [MODIFICACION_INGRESOS.E_ESPECIFICAR], 
            T.E_ESPECIFICAR_COMPLEMENTO AS [MODIFICACION_INGRESOS.E_ESPECIFICAR_COMPLEMENTO], 
            T.M_INGRESO AS [MODIFICACION_INGRESOS.M_INGRESO], 
            T.C_TITULAR AS [MODIFICACION_INGRESOS.C_TITULAR], 
            True AS _from0
        FROM ModelDeclaraStoreContainer.MODIFICACION_INGRESOS AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for cnxDeclara.MODIFICACION_INMUEBLE.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView228()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing MODIFICACION_INMUEBLE
        [ModelDeclara.MODIFICACION_INMUEBLE](T1.[MODIFICACION_INMUEBLE.VID_NOMBRE], T1.[MODIFICACION_INMUEBLE.VID_FECHA], T1.[MODIFICACION_INMUEBLE.VID_HOMOCLAVE], T1.[MODIFICACION_INMUEBLE.NID_DECLARACION], T1.[MODIFICACION_INMUEBLE.NID_PATRIMONIO], T1.[MODIFICACION_INMUEBLE.NID_TIPO], T1.[MODIFICACION_INMUEBLE.F_ADQUISICION], T1.[MODIFICACION_INMUEBLE.NID_USO], T1.[MODIFICACION_INMUEBLE.E_UBICACION], T1.[MODIFICACION_INMUEBLE.N_TERRENO], T1.[MODIFICACION_INMUEBLE.N_CONSTRUCCION], T1.[MODIFICACION_INMUEBLE.M_VALOR_INMUEBLE], T1.[MODIFICACION_INMUEBLE.L_MODIFICADO])
    FROM (
        SELECT 
            T.VID_NOMBRE AS [MODIFICACION_INMUEBLE.VID_NOMBRE], 
            T.VID_FECHA AS [MODIFICACION_INMUEBLE.VID_FECHA], 
            T.VID_HOMOCLAVE AS [MODIFICACION_INMUEBLE.VID_HOMOCLAVE], 
            T.NID_DECLARACION AS [MODIFICACION_INMUEBLE.NID_DECLARACION], 
            T.NID_PATRIMONIO AS [MODIFICACION_INMUEBLE.NID_PATRIMONIO], 
            T.NID_TIPO AS [MODIFICACION_INMUEBLE.NID_TIPO], 
            T.F_ADQUISICION AS [MODIFICACION_INMUEBLE.F_ADQUISICION], 
            T.NID_USO AS [MODIFICACION_INMUEBLE.NID_USO], 
            T.E_UBICACION AS [MODIFICACION_INMUEBLE.E_UBICACION], 
            T.N_TERRENO AS [MODIFICACION_INMUEBLE.N_TERRENO], 
            T.N_CONSTRUCCION AS [MODIFICACION_INMUEBLE.N_CONSTRUCCION], 
            T.M_VALOR_INMUEBLE AS [MODIFICACION_INMUEBLE.M_VALOR_INMUEBLE], 
            T.L_MODIFICADO AS [MODIFICACION_INMUEBLE.L_MODIFICADO], 
            True AS _from0
        FROM ModelDeclaraStoreContainer.MODIFICACION_INMUEBLE AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for cnxDeclara.MODIFICACION_INMUEBLE_ADEUDO.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView229()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing MODIFICACION_INMUEBLE_ADEUDO
        [ModelDeclara.MODIFICACION_INMUEBLE_ADEUDO](T1.[MODIFICACION_INMUEBLE_ADEUDO.VID_NOMBRE], T1.[MODIFICACION_INMUEBLE_ADEUDO.VID_FECHA], T1.[MODIFICACION_INMUEBLE_ADEUDO.VID_HOMOCLAVE], T1.[MODIFICACION_INMUEBLE_ADEUDO.NID_DECLARACION], T1.[MODIFICACION_INMUEBLE_ADEUDO.NID_PATRIMONIO], T1.[MODIFICACION_INMUEBLE_ADEUDO.NID_PATRIMONIO_ADEUDO], T1.[MODIFICACION_INMUEBLE_ADEUDO.L_DIF])
    FROM (
        SELECT 
            T.VID_NOMBRE AS [MODIFICACION_INMUEBLE_ADEUDO.VID_NOMBRE], 
            T.VID_FECHA AS [MODIFICACION_INMUEBLE_ADEUDO.VID_FECHA], 
            T.VID_HOMOCLAVE AS [MODIFICACION_INMUEBLE_ADEUDO.VID_HOMOCLAVE], 
            T.NID_DECLARACION AS [MODIFICACION_INMUEBLE_ADEUDO.NID_DECLARACION], 
            T.NID_PATRIMONIO AS [MODIFICACION_INMUEBLE_ADEUDO.NID_PATRIMONIO], 
            T.NID_PATRIMONIO_ADEUDO AS [MODIFICACION_INMUEBLE_ADEUDO.NID_PATRIMONIO_ADEUDO], 
            T.L_DIF AS [MODIFICACION_INMUEBLE_ADEUDO.L_DIF], 
            True AS _from0
        FROM ModelDeclaraStoreContainer.MODIFICACION_INMUEBLE_ADEUDO AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for cnxDeclara.MODIFICACION_INMUEBLE_AMPLIACION.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView230()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing MODIFICACION_INMUEBLE_AMPLIACION
        [ModelDeclara.MODIFICACION_INMUEBLE_AMPLIACION](T1.[MODIFICACION_INMUEBLE_AMPLIACION.VID_NOMBRE], T1.[MODIFICACION_INMUEBLE_AMPLIACION.VID_FECHA], T1.[MODIFICACION_INMUEBLE_AMPLIACION.VID_HOMOCLAVE], T1.[MODIFICACION_INMUEBLE_AMPLIACION.NID_DECLARACION], T1.[MODIFICACION_INMUEBLE_AMPLIACION.NID_PATRIMONIO], T1.[MODIFICACION_INMUEBLE_AMPLIACION.NID_AMPLIACION], T1.[MODIFICACION_INMUEBLE_AMPLIACION.F_AMPLIACION], T1.[MODIFICACION_INMUEBLE_AMPLIACION.M_AMPLIACION], T1.[MODIFICACION_INMUEBLE_AMPLIACION.N_AMPLIACION])
    FROM (
        SELECT 
            T.VID_NOMBRE AS [MODIFICACION_INMUEBLE_AMPLIACION.VID_NOMBRE], 
            T.VID_FECHA AS [MODIFICACION_INMUEBLE_AMPLIACION.VID_FECHA], 
            T.VID_HOMOCLAVE AS [MODIFICACION_INMUEBLE_AMPLIACION.VID_HOMOCLAVE], 
            T.NID_DECLARACION AS [MODIFICACION_INMUEBLE_AMPLIACION.NID_DECLARACION], 
            T.NID_PATRIMONIO AS [MODIFICACION_INMUEBLE_AMPLIACION.NID_PATRIMONIO], 
            T.NID_AMPLIACION AS [MODIFICACION_INMUEBLE_AMPLIACION.NID_AMPLIACION], 
            T.F_AMPLIACION AS [MODIFICACION_INMUEBLE_AMPLIACION.F_AMPLIACION], 
            T.M_AMPLIACION AS [MODIFICACION_INMUEBLE_AMPLIACION.M_AMPLIACION], 
            T.N_AMPLIACION AS [MODIFICACION_INMUEBLE_AMPLIACION.N_AMPLIACION], 
            True AS _from0
        FROM ModelDeclaraStoreContainer.MODIFICACION_INMUEBLE_AMPLIACION AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for cnxDeclara.MODIFICACION_INMUEBLE_CONSTRUCCION.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView231()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing MODIFICACION_INMUEBLE_CONSTRUCCION
        [ModelDeclara.MODIFICACION_INMUEBLE_CONSTRUCCION](T1.[MODIFICACION_INMUEBLE_CONSTRUCCION.VID_NOMBRE], T1.[MODIFICACION_INMUEBLE_CONSTRUCCION.VID_FECHA], T1.[MODIFICACION_INMUEBLE_CONSTRUCCION.VID_HOMOCLAVE], T1.[MODIFICACION_INMUEBLE_CONSTRUCCION.NID_DECLARACION], T1.[MODIFICACION_INMUEBLE_CONSTRUCCION.NID_PATRIMONIO], T1.[MODIFICACION_INMUEBLE_CONSTRUCCION.NID_CONSTRUCCION], T1.[MODIFICACION_INMUEBLE_CONSTRUCCION.NID_TIPO], T1.[MODIFICACION_INMUEBLE_CONSTRUCCION.F_CONSTRUCCION], T1.[MODIFICACION_INMUEBLE_CONSTRUCCION.M_CONSTRUCCION], T1.[MODIFICACION_INMUEBLE_CONSTRUCCION.M_VALOR_FINAL], T1.[MODIFICACION_INMUEBLE_CONSTRUCCION.NID_USO], T1.[MODIFICACION_INMUEBLE_CONSTRUCCION.E_UBICACION], T1.[MODIFICACION_INMUEBLE_CONSTRUCCION.N_CONSTRUCCION], T1.[MODIFICACION_INMUEBLE_CONSTRUCCION.N_TERRENO], T1.[MODIFICACION_INMUEBLE_CONSTRUCCION.NID_PATRIMONIO_NUEVO])
    FROM (
        SELECT 
            T.VID_NOMBRE AS [MODIFICACION_INMUEBLE_CONSTRUCCION.VID_NOMBRE], 
            T.VID_FECHA AS [MODIFICACION_INMUEBLE_CONSTRUCCION.VID_FECHA], 
            T.VID_HOMOCLAVE AS [MODIFICACION_INMUEBLE_CONSTRUCCION.VID_HOMOCLAVE], 
            T.NID_DECLARACION AS [MODIFICACION_INMUEBLE_CONSTRUCCION.NID_DECLARACION], 
            T.NID_PATRIMONIO AS [MODIFICACION_INMUEBLE_CONSTRUCCION.NID_PATRIMONIO], 
            T.NID_CONSTRUCCION AS [MODIFICACION_INMUEBLE_CONSTRUCCION.NID_CONSTRUCCION], 
            T.NID_TIPO AS [MODIFICACION_INMUEBLE_CONSTRUCCION.NID_TIPO], 
            T.F_CONSTRUCCION AS [MODIFICACION_INMUEBLE_CONSTRUCCION.F_CONSTRUCCION], 
            T.M_CONSTRUCCION AS [MODIFICACION_INMUEBLE_CONSTRUCCION.M_CONSTRUCCION], 
            T.M_VALOR_FINAL AS [MODIFICACION_INMUEBLE_CONSTRUCCION.M_VALOR_FINAL], 
            T.NID_USO AS [MODIFICACION_INMUEBLE_CONSTRUCCION.NID_USO], 
            T.E_UBICACION AS [MODIFICACION_INMUEBLE_CONSTRUCCION.E_UBICACION], 
            T.N_CONSTRUCCION AS [MODIFICACION_INMUEBLE_CONSTRUCCION.N_CONSTRUCCION], 
            T.N_TERRENO AS [MODIFICACION_INMUEBLE_CONSTRUCCION.N_TERRENO], 
            T.NID_PATRIMONIO_NUEVO AS [MODIFICACION_INMUEBLE_CONSTRUCCION.NID_PATRIMONIO_NUEVO], 
            True AS _from0
        FROM ModelDeclaraStoreContainer.MODIFICACION_INMUEBLE_CONSTRUCCION AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for cnxDeclara.MODIFICACION_INMUEBLE_TITULA.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView232()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing MODIFICACION_INMUEBLE_TITULA
        [ModelDeclara.MODIFICACION_INMUEBLE_TITULA](T1.[MODIFICACION_INMUEBLE_TITULA.VID_NOMBRE], T1.[MODIFICACION_INMUEBLE_TITULA.VID_FECHA], T1.[MODIFICACION_INMUEBLE_TITULA.VID_HOMOCLAVE], T1.[MODIFICACION_INMUEBLE_TITULA.NID_DECLARACION], T1.[MODIFICACION_INMUEBLE_TITULA.NID_PATRIMONIO], T1.[MODIFICACION_INMUEBLE_TITULA.NID_DEPENDIENTE], T1.[MODIFICACION_INMUEBLE_TITULA.L_DIF])
    FROM (
        SELECT 
            T.VID_NOMBRE AS [MODIFICACION_INMUEBLE_TITULA.VID_NOMBRE], 
            T.VID_FECHA AS [MODIFICACION_INMUEBLE_TITULA.VID_FECHA], 
            T.VID_HOMOCLAVE AS [MODIFICACION_INMUEBLE_TITULA.VID_HOMOCLAVE], 
            T.NID_DECLARACION AS [MODIFICACION_INMUEBLE_TITULA.NID_DECLARACION], 
            T.NID_PATRIMONIO AS [MODIFICACION_INMUEBLE_TITULA.NID_PATRIMONIO], 
            T.NID_DEPENDIENTE AS [MODIFICACION_INMUEBLE_TITULA.NID_DEPENDIENTE], 
            T.L_DIF AS [MODIFICACION_INMUEBLE_TITULA.L_DIF], 
            True AS _from0
        FROM ModelDeclaraStoreContainer.MODIFICACION_INMUEBLE_TITULA AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for cnxDeclara.MODIFICACION_INVERSION.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView233()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing MODIFICACION_INVERSION
        [ModelDeclara.MODIFICACION_INVERSION](T1.[MODIFICACION_INVERSION.VID_NOMBRE], T1.[MODIFICACION_INVERSION.VID_FECHA], T1.[MODIFICACION_INVERSION.VID_HOMOCLAVE], T1.[MODIFICACION_INVERSION.NID_DECLARACION], T1.[MODIFICACION_INVERSION.NID_PATRIMONIO], T1.[MODIFICACION_INVERSION.M_SALDO_ANTERIOR], T1.[MODIFICACION_INVERSION.M_SALDO_ACTUAL], T1.[MODIFICACION_INVERSION.L_CANCELADA], T1.[MODIFICACION_INVERSION.L_MODIFICADA])
    FROM (
        SELECT 
            T.VID_NOMBRE AS [MODIFICACION_INVERSION.VID_NOMBRE], 
            T.VID_FECHA AS [MODIFICACION_INVERSION.VID_FECHA], 
            T.VID_HOMOCLAVE AS [MODIFICACION_INVERSION.VID_HOMOCLAVE], 
            T.NID_DECLARACION AS [MODIFICACION_INVERSION.NID_DECLARACION], 
            T.NID_PATRIMONIO AS [MODIFICACION_INVERSION.NID_PATRIMONIO], 
            T.M_SALDO_ANTERIOR AS [MODIFICACION_INVERSION.M_SALDO_ANTERIOR], 
            T.M_SALDO_ACTUAL AS [MODIFICACION_INVERSION.M_SALDO_ACTUAL], 
            T.L_CANCELADA AS [MODIFICACION_INVERSION.L_CANCELADA], 
            T.L_MODIFICADA AS [MODIFICACION_INVERSION.L_MODIFICADA], 
            True AS _from0
        FROM ModelDeclaraStoreContainer.MODIFICACION_INVERSION AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for cnxDeclara.MODIFICACION_INVERSION_TITU.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView234()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing MODIFICACION_INVERSION_TITU
        [ModelDeclara.MODIFICACION_INVERSION_TITU](T1.[MODIFICACION_INVERSION_TITU.VID_NOMBRE], T1.[MODIFICACION_INVERSION_TITU.VID_FECHA], T1.[MODIFICACION_INVERSION_TITU.VID_HOMOCLAVE], T1.[MODIFICACION_INVERSION_TITU.NID_DECLARACION], T1.[MODIFICACION_INVERSION_TITU.NID_PATRIMONIO], T1.[MODIFICACION_INVERSION_TITU.NID_DEPENDIENTE], T1.[MODIFICACION_INVERSION_TITU.L_DIF])
    FROM (
        SELECT 
            T.VID_NOMBRE AS [MODIFICACION_INVERSION_TITU.VID_NOMBRE], 
            T.VID_FECHA AS [MODIFICACION_INVERSION_TITU.VID_FECHA], 
            T.VID_HOMOCLAVE AS [MODIFICACION_INVERSION_TITU.VID_HOMOCLAVE], 
            T.NID_DECLARACION AS [MODIFICACION_INVERSION_TITU.NID_DECLARACION], 
            T.NID_PATRIMONIO AS [MODIFICACION_INVERSION_TITU.NID_PATRIMONIO], 
            T.NID_DEPENDIENTE AS [MODIFICACION_INVERSION_TITU.NID_DEPENDIENTE], 
            T.L_DIF AS [MODIFICACION_INVERSION_TITU.L_DIF], 
            True AS _from0
        FROM ModelDeclaraStoreContainer.MODIFICACION_INVERSION_TITU AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for cnxDeclara.MODIFICACION_MUEBLE.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView235()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing MODIFICACION_MUEBLE
        [ModelDeclara.MODIFICACION_MUEBLE](T1.[MODIFICACION_MUEBLE.VID_NOMBRE], T1.[MODIFICACION_MUEBLE.VID_FECHA], T1.[MODIFICACION_MUEBLE.VID_HOMOCLAVE], T1.[MODIFICACION_MUEBLE.NID_DECLARACION], T1.[MODIFICACION_MUEBLE.NID_PATRIMONIO], T1.[MODIFICACION_MUEBLE.NID_TIPO], T1.[MODIFICACION_MUEBLE.E_ESPECIFICACION], T1.[MODIFICACION_MUEBLE.M_VALOR], T1.[MODIFICACION_MUEBLE.L_MODIFICADO], T1.[MODIFICACION_MUEBLE.F_ADQUISICION])
    FROM (
        SELECT 
            T.VID_NOMBRE AS [MODIFICACION_MUEBLE.VID_NOMBRE], 
            T.VID_FECHA AS [MODIFICACION_MUEBLE.VID_FECHA], 
            T.VID_HOMOCLAVE AS [MODIFICACION_MUEBLE.VID_HOMOCLAVE], 
            T.NID_DECLARACION AS [MODIFICACION_MUEBLE.NID_DECLARACION], 
            T.NID_PATRIMONIO AS [MODIFICACION_MUEBLE.NID_PATRIMONIO], 
            T.NID_TIPO AS [MODIFICACION_MUEBLE.NID_TIPO], 
            T.E_ESPECIFICACION AS [MODIFICACION_MUEBLE.E_ESPECIFICACION], 
            T.M_VALOR AS [MODIFICACION_MUEBLE.M_VALOR], 
            T.L_MODIFICADO AS [MODIFICACION_MUEBLE.L_MODIFICADO], 
            T.F_ADQUISICION AS [MODIFICACION_MUEBLE.F_ADQUISICION], 
            True AS _from0
        FROM ModelDeclaraStoreContainer.MODIFICACION_MUEBLE AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for cnxDeclara.MODIFICACION_MUEBLE_TITULAR.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView236()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing MODIFICACION_MUEBLE_TITULAR
        [ModelDeclara.MODIFICACION_MUEBLE_TITULAR](T1.[MODIFICACION_MUEBLE_TITULAR.VID_NOMBRE], T1.[MODIFICACION_MUEBLE_TITULAR.VID_FECHA], T1.[MODIFICACION_MUEBLE_TITULAR.VID_HOMOCLAVE], T1.[MODIFICACION_MUEBLE_TITULAR.NID_DECLARACION], T1.[MODIFICACION_MUEBLE_TITULAR.NID_PATRIMONIO], T1.[MODIFICACION_MUEBLE_TITULAR.NID_DEPENDIENTE], T1.[MODIFICACION_MUEBLE_TITULAR.L_DIF])
    FROM (
        SELECT 
            T.VID_NOMBRE AS [MODIFICACION_MUEBLE_TITULAR.VID_NOMBRE], 
            T.VID_FECHA AS [MODIFICACION_MUEBLE_TITULAR.VID_FECHA], 
            T.VID_HOMOCLAVE AS [MODIFICACION_MUEBLE_TITULAR.VID_HOMOCLAVE], 
            T.NID_DECLARACION AS [MODIFICACION_MUEBLE_TITULAR.NID_DECLARACION], 
            T.NID_PATRIMONIO AS [MODIFICACION_MUEBLE_TITULAR.NID_PATRIMONIO], 
            T.NID_DEPENDIENTE AS [MODIFICACION_MUEBLE_TITULAR.NID_DEPENDIENTE], 
            T.L_DIF AS [MODIFICACION_MUEBLE_TITULAR.L_DIF], 
            True AS _from0
        FROM ModelDeclaraStoreContainer.MODIFICACION_MUEBLE_TITULAR AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for cnxDeclara.MODIFICACION_TARJETA.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView237()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing MODIFICACION_TARJETA
        [ModelDeclara.MODIFICACION_TARJETA](T1.[MODIFICACION_TARJETA.VID_NOMBRE], T1.[MODIFICACION_TARJETA.VID_FECHA], T1.[MODIFICACION_TARJETA.VID_HOMOCLAVE], T1.[MODIFICACION_TARJETA.NID_DECLARACION], T1.[MODIFICACION_TARJETA.E_NUMERO], T1.[MODIFICACION_TARJETA.NID_INSTITUCION], T1.[MODIFICACION_TARJETA.V_NUMERO_CORTO], T1.[MODIFICACION_TARJETA.M_PAGOS], T1.[MODIFICACION_TARJETA.M_SALDO], T1.[MODIFICACION_TARJETA.E_NUMERO_ASOCIACION], T1.[MODIFICACION_TARJETA.L_ACTIVA])
    FROM (
        SELECT 
            T.VID_NOMBRE AS [MODIFICACION_TARJETA.VID_NOMBRE], 
            T.VID_FECHA AS [MODIFICACION_TARJETA.VID_FECHA], 
            T.VID_HOMOCLAVE AS [MODIFICACION_TARJETA.VID_HOMOCLAVE], 
            T.NID_DECLARACION AS [MODIFICACION_TARJETA.NID_DECLARACION], 
            T.E_NUMERO AS [MODIFICACION_TARJETA.E_NUMERO], 
            T.NID_INSTITUCION AS [MODIFICACION_TARJETA.NID_INSTITUCION], 
            T.V_NUMERO_CORTO AS [MODIFICACION_TARJETA.V_NUMERO_CORTO], 
            T.M_PAGOS AS [MODIFICACION_TARJETA.M_PAGOS], 
            T.M_SALDO AS [MODIFICACION_TARJETA.M_SALDO], 
            T.E_NUMERO_ASOCIACION AS [MODIFICACION_TARJETA.E_NUMERO_ASOCIACION], 
            T.L_ACTIVA AS [MODIFICACION_TARJETA.L_ACTIVA], 
            True AS _from0
        FROM ModelDeclaraStoreContainer.MODIFICACION_TARJETA AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for cnxDeclara.MODIFICACION_TARJETA_TITU.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView238()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing MODIFICACION_TARJETA_TITU
        [ModelDeclara.MODIFICACION_TARJETA_TITU](T1.[MODIFICACION_TARJETA_TITU.VID_NOMBRE], T1.[MODIFICACION_TARJETA_TITU.VID_FECHA], T1.[MODIFICACION_TARJETA_TITU.VID_HOMOCLAVE], T1.[MODIFICACION_TARJETA_TITU.NID_DECLARACION], T1.[MODIFICACION_TARJETA_TITU.E_NUMERO], T1.[MODIFICACION_TARJETA_TITU.NID_DEPENDIENTE], T1.[MODIFICACION_TARJETA_TITU.L_DIF])
    FROM (
        SELECT 
            T.VID_NOMBRE AS [MODIFICACION_TARJETA_TITU.VID_NOMBRE], 
            T.VID_FECHA AS [MODIFICACION_TARJETA_TITU.VID_FECHA], 
            T.VID_HOMOCLAVE AS [MODIFICACION_TARJETA_TITU.VID_HOMOCLAVE], 
            T.NID_DECLARACION AS [MODIFICACION_TARJETA_TITU.NID_DECLARACION], 
            T.E_NUMERO AS [MODIFICACION_TARJETA_TITU.E_NUMERO], 
            T.NID_DEPENDIENTE AS [MODIFICACION_TARJETA_TITU.NID_DEPENDIENTE], 
            T.L_DIF AS [MODIFICACION_TARJETA_TITU.L_DIF], 
            True AS _from0
        FROM ModelDeclaraStoreContainer.MODIFICACION_TARJETA_TITU AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for cnxDeclara.MODIFICACION_VEHICULO.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView239()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing MODIFICACION_VEHICULO
        [ModelDeclara.MODIFICACION_VEHICULO](T1.[MODIFICACION_VEHICULO.VID_NOMBRE], T1.[MODIFICACION_VEHICULO.VID_FECHA], T1.[MODIFICACION_VEHICULO.VID_HOMOCLAVE], T1.[MODIFICACION_VEHICULO.NID_DECLARACION], T1.[MODIFICACION_VEHICULO.NID_PATRIMONIO], T1.[MODIFICACION_VEHICULO.NID_MARCA], T1.[MODIFICACION_VEHICULO.C_MODELO], T1.[MODIFICACION_VEHICULO.V_DESCRIPCION], T1.[MODIFICACION_VEHICULO.F_ADQUISICION], T1.[MODIFICACION_VEHICULO.NID_USO], T1.[MODIFICACION_VEHICULO.M_VALOR_VEHICULO], T1.[MODIFICACION_VEHICULO.L_MODIFICADO])
    FROM (
        SELECT 
            T.VID_NOMBRE AS [MODIFICACION_VEHICULO.VID_NOMBRE], 
            T.VID_FECHA AS [MODIFICACION_VEHICULO.VID_FECHA], 
            T.VID_HOMOCLAVE AS [MODIFICACION_VEHICULO.VID_HOMOCLAVE], 
            T.NID_DECLARACION AS [MODIFICACION_VEHICULO.NID_DECLARACION], 
            T.NID_PATRIMONIO AS [MODIFICACION_VEHICULO.NID_PATRIMONIO], 
            T.NID_MARCA AS [MODIFICACION_VEHICULO.NID_MARCA], 
            T.C_MODELO AS [MODIFICACION_VEHICULO.C_MODELO], 
            T.V_DESCRIPCION AS [MODIFICACION_VEHICULO.V_DESCRIPCION], 
            T.F_ADQUISICION AS [MODIFICACION_VEHICULO.F_ADQUISICION], 
            T.NID_USO AS [MODIFICACION_VEHICULO.NID_USO], 
            T.M_VALOR_VEHICULO AS [MODIFICACION_VEHICULO.M_VALOR_VEHICULO], 
            T.L_MODIFICADO AS [MODIFICACION_VEHICULO.L_MODIFICADO], 
            True AS _from0
        FROM ModelDeclaraStoreContainer.MODIFICACION_VEHICULO AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for cnxDeclara.MODIFICACION_VEHICULO_ADEU.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView240()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing MODIFICACION_VEHICULO_ADEU
        [ModelDeclara.MODIFICACION_VEHICULO_ADEU](T1.[MODIFICACION_VEHICULO_ADEU.VID_NOMBRE], T1.[MODIFICACION_VEHICULO_ADEU.VID_FECHA], T1.[MODIFICACION_VEHICULO_ADEU.VID_HOMOCLAVE], T1.[MODIFICACION_VEHICULO_ADEU.NID_DECLARACION], T1.[MODIFICACION_VEHICULO_ADEU.NID_PATRIMONIO], T1.[MODIFICACION_VEHICULO_ADEU.NID_PATRIMONIO_ADEUDO])
    FROM (
        SELECT 
            T.VID_NOMBRE AS [MODIFICACION_VEHICULO_ADEU.VID_NOMBRE], 
            T.VID_FECHA AS [MODIFICACION_VEHICULO_ADEU.VID_FECHA], 
            T.VID_HOMOCLAVE AS [MODIFICACION_VEHICULO_ADEU.VID_HOMOCLAVE], 
            T.NID_DECLARACION AS [MODIFICACION_VEHICULO_ADEU.NID_DECLARACION], 
            T.NID_PATRIMONIO AS [MODIFICACION_VEHICULO_ADEU.NID_PATRIMONIO], 
            T.NID_PATRIMONIO_ADEUDO AS [MODIFICACION_VEHICULO_ADEU.NID_PATRIMONIO_ADEUDO], 
            True AS _from0
        FROM ModelDeclaraStoreContainer.MODIFICACION_VEHICULO_ADEU AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for cnxDeclara.MODIFICACION_VEHICULO_TITU.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView241()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing MODIFICACION_VEHICULO_TITU
        [ModelDeclara.MODIFICACION_VEHICULO_TITU](T1.[MODIFICACION_VEHICULO_TITU.VID_NOMBRE], T1.[MODIFICACION_VEHICULO_TITU.VID_FECHA], T1.[MODIFICACION_VEHICULO_TITU.VID_HOMOCLAVE], T1.[MODIFICACION_VEHICULO_TITU.NID_DECLARACION], T1.[MODIFICACION_VEHICULO_TITU.NID_PATRIMONIO], T1.[MODIFICACION_VEHICULO_TITU.NID_DEPENDIENTE], T1.[MODIFICACION_VEHICULO_TITU.L_DIF])
    FROM (
        SELECT 
            T.VID_NOMBRE AS [MODIFICACION_VEHICULO_TITU.VID_NOMBRE], 
            T.VID_FECHA AS [MODIFICACION_VEHICULO_TITU.VID_FECHA], 
            T.VID_HOMOCLAVE AS [MODIFICACION_VEHICULO_TITU.VID_HOMOCLAVE], 
            T.NID_DECLARACION AS [MODIFICACION_VEHICULO_TITU.NID_DECLARACION], 
            T.NID_PATRIMONIO AS [MODIFICACION_VEHICULO_TITU.NID_PATRIMONIO], 
            T.NID_DEPENDIENTE AS [MODIFICACION_VEHICULO_TITU.NID_DEPENDIENTE], 
            T.L_DIF AS [MODIFICACION_VEHICULO_TITU.L_DIF], 
            True AS _from0
        FROM ModelDeclaraStoreContainer.MODIFICACION_VEHICULO_TITU AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for cnxDeclara.PATRIMONIO.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView242()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing PATRIMONIO
        [ModelDeclara.PATRIMONIO](T1.[PATRIMONIO.VID_NOMBRE], T1.[PATRIMONIO.VID_FECHA], T1.[PATRIMONIO.VID_HOMOCLAVE], T1.[PATRIMONIO.NID_PATRIMONIO], T1.[PATRIMONIO.NID_TIPO], T1.[PATRIMONIO.M_VALOR], T1.[PATRIMONIO.NID_DEC_INCOR], T1.[PATRIMONIO.F_INCORPORACION], T1.[PATRIMONIO.NID_DEC_ULT_MOD], T1.[PATRIMONIO.F_MODIFICACION], T1.[PATRIMONIO.L_ACTIVO], T1.[PATRIMONIO.F_REGISTRO])
    FROM (
        SELECT 
            T.VID_NOMBRE AS [PATRIMONIO.VID_NOMBRE], 
            T.VID_FECHA AS [PATRIMONIO.VID_FECHA], 
            T.VID_HOMOCLAVE AS [PATRIMONIO.VID_HOMOCLAVE], 
            T.NID_PATRIMONIO AS [PATRIMONIO.NID_PATRIMONIO], 
            T.NID_TIPO AS [PATRIMONIO.NID_TIPO], 
            T.M_VALOR AS [PATRIMONIO.M_VALOR], 
            T.NID_DEC_INCOR AS [PATRIMONIO.NID_DEC_INCOR], 
            T.F_INCORPORACION AS [PATRIMONIO.F_INCORPORACION], 
            T.NID_DEC_ULT_MOD AS [PATRIMONIO.NID_DEC_ULT_MOD], 
            T.F_MODIFICACION AS [PATRIMONIO.F_MODIFICACION], 
            T.L_ACTIVO AS [PATRIMONIO.L_ACTIVO], 
            T.F_REGISTRO AS [PATRIMONIO.F_REGISTRO], 
            True AS _from0
        FROM ModelDeclaraStoreContainer.PATRIMONIO AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for cnxDeclara.PATRIMONIO_ADEUDO.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView243()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing PATRIMONIO_ADEUDO
        [ModelDeclara.PATRIMONIO_ADEUDO](T1.[PATRIMONIO_ADEUDO.VID_NOMBRE], T1.[PATRIMONIO_ADEUDO.VID_FECHA], T1.[PATRIMONIO_ADEUDO.VID_HOMOCLAVE], T1.[PATRIMONIO_ADEUDO.NID_PATRIMONIO], T1.[PATRIMONIO_ADEUDO.NID_PAIS], T1.[PATRIMONIO_ADEUDO.CID_ENTIDAD_FEDERATIVA], T1.[PATRIMONIO_ADEUDO.V_LUGAR], T1.[PATRIMONIO_ADEUDO.NID_INSTITUCION], T1.[PATRIMONIO_ADEUDO.V_OTRA], T1.[PATRIMONIO_ADEUDO.NID_TIPO_ADEUDO], T1.[PATRIMONIO_ADEUDO.F_ADEUDO], T1.[PATRIMONIO_ADEUDO.M_ORIGINAL], T1.[PATRIMONIO_ADEUDO.M_SALDO], T1.[PATRIMONIO_ADEUDO.E_CUENTA])
    FROM (
        SELECT 
            T.VID_NOMBRE AS [PATRIMONIO_ADEUDO.VID_NOMBRE], 
            T.VID_FECHA AS [PATRIMONIO_ADEUDO.VID_FECHA], 
            T.VID_HOMOCLAVE AS [PATRIMONIO_ADEUDO.VID_HOMOCLAVE], 
            T.NID_PATRIMONIO AS [PATRIMONIO_ADEUDO.NID_PATRIMONIO], 
            T.NID_PAIS AS [PATRIMONIO_ADEUDO.NID_PAIS], 
            T.CID_ENTIDAD_FEDERATIVA AS [PATRIMONIO_ADEUDO.CID_ENTIDAD_FEDERATIVA], 
            T.V_LUGAR AS [PATRIMONIO_ADEUDO.V_LUGAR], 
            T.NID_INSTITUCION AS [PATRIMONIO_ADEUDO.NID_INSTITUCION], 
            T.V_OTRA AS [PATRIMONIO_ADEUDO.V_OTRA], 
            T.NID_TIPO_ADEUDO AS [PATRIMONIO_ADEUDO.NID_TIPO_ADEUDO], 
            T.F_ADEUDO AS [PATRIMONIO_ADEUDO.F_ADEUDO], 
            T.M_ORIGINAL AS [PATRIMONIO_ADEUDO.M_ORIGINAL], 
            T.M_SALDO AS [PATRIMONIO_ADEUDO.M_SALDO], 
            T.E_CUENTA AS [PATRIMONIO_ADEUDO.E_CUENTA], 
            True AS _from0
        FROM ModelDeclaraStoreContainer.PATRIMONIO_ADEUDO AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for cnxDeclara.PATRIMONIO_COPROPIETARIO.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView244()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing PATRIMONIO_COPROPIETARIO
        [ModelDeclara.PATRIMONIO_COPROPIETARIO](T1.[PATRIMONIO_COPROPIETARIO.VID_NOMBRE], T1.[PATRIMONIO_COPROPIETARIO.VID_FECHA], T1.[PATRIMONIO_COPROPIETARIO.VID_HOMOCLAVE], T1.[PATRIMONIO_COPROPIETARIO.NID_PATRIMONIO], T1.[PATRIMONIO_COPROPIETARIO.NID_COPROPIETARIO], T1.[PATRIMONIO_COPROPIETARIO.CID_TIPO_PERSONA], T1.[PATRIMONIO_COPROPIETARIO.V_NOMBRE], T1.[PATRIMONIO_COPROPIETARIO.V_RFC])
    FROM (
        SELECT 
            T.VID_NOMBRE AS [PATRIMONIO_COPROPIETARIO.VID_NOMBRE], 
            T.VID_FECHA AS [PATRIMONIO_COPROPIETARIO.VID_FECHA], 
            T.VID_HOMOCLAVE AS [PATRIMONIO_COPROPIETARIO.VID_HOMOCLAVE], 
            T.NID_PATRIMONIO AS [PATRIMONIO_COPROPIETARIO.NID_PATRIMONIO], 
            T.NID_COPROPIETARIO AS [PATRIMONIO_COPROPIETARIO.NID_COPROPIETARIO], 
            T.CID_TIPO_PERSONA AS [PATRIMONIO_COPROPIETARIO.CID_TIPO_PERSONA], 
            T.V_NOMBRE AS [PATRIMONIO_COPROPIETARIO.V_NOMBRE], 
            T.V_RFC AS [PATRIMONIO_COPROPIETARIO.V_RFC], 
            True AS _from0
        FROM ModelDeclaraStoreContainer.PATRIMONIO_COPROPIETARIO AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for cnxDeclara.PATRIMONIO_DEPENDIENTES.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView245()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing PATRIMONIO_DEPENDIENTES
        [ModelDeclara.PATRIMONIO_DEPENDIENTES](T1.[PATRIMONIO_DEPENDIENTES.VID_NOMBRE], T1.[PATRIMONIO_DEPENDIENTES.VID_FECHA], T1.[PATRIMONIO_DEPENDIENTES.VID_HOMOCLAVE], T1.[PATRIMONIO_DEPENDIENTES.NID_DEPENDIENTE], T1.[PATRIMONIO_DEPENDIENTES.NID_TIPO_DEPENDIENTE], T1.[PATRIMONIO_DEPENDIENTES.E_NOMBRE], T1.[PATRIMONIO_DEPENDIENTES.E_PRIMER_A], T1.[PATRIMONIO_DEPENDIENTES.E_SEGUNDO_A], T1.[PATRIMONIO_DEPENDIENTES.F_NACIMIENTO], T1.[PATRIMONIO_DEPENDIENTES.E_RFC], T1.[PATRIMONIO_DEPENDIENTES.L_DEPENDE_ECO], T1.[PATRIMONIO_DEPENDIENTES.V_DOMICILIO], T1.[PATRIMONIO_DEPENDIENTES.L_ACTIVO])
    FROM (
        SELECT 
            T.VID_NOMBRE AS [PATRIMONIO_DEPENDIENTES.VID_NOMBRE], 
            T.VID_FECHA AS [PATRIMONIO_DEPENDIENTES.VID_FECHA], 
            T.VID_HOMOCLAVE AS [PATRIMONIO_DEPENDIENTES.VID_HOMOCLAVE], 
            T.NID_DEPENDIENTE AS [PATRIMONIO_DEPENDIENTES.NID_DEPENDIENTE], 
            T.NID_TIPO_DEPENDIENTE AS [PATRIMONIO_DEPENDIENTES.NID_TIPO_DEPENDIENTE], 
            T.E_NOMBRE AS [PATRIMONIO_DEPENDIENTES.E_NOMBRE], 
            T.E_PRIMER_A AS [PATRIMONIO_DEPENDIENTES.E_PRIMER_A], 
            T.E_SEGUNDO_A AS [PATRIMONIO_DEPENDIENTES.E_SEGUNDO_A], 
            T.F_NACIMIENTO AS [PATRIMONIO_DEPENDIENTES.F_NACIMIENTO], 
            T.E_RFC AS [PATRIMONIO_DEPENDIENTES.E_RFC], 
            T.L_DEPENDE_ECO AS [PATRIMONIO_DEPENDIENTES.L_DEPENDE_ECO], 
            T.V_DOMICILIO AS [PATRIMONIO_DEPENDIENTES.V_DOMICILIO], 
            T.L_ACTIVO AS [PATRIMONIO_DEPENDIENTES.L_ACTIVO], 
            True AS _from0
        FROM ModelDeclaraStoreContainer.PATRIMONIO_DEPENDIENTES AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for cnxDeclara.PATRIMONIO_FORMA_ADQUISICION.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView246()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing PATRIMONIO_FORMA_ADQUISICION
        [ModelDeclara.PATRIMONIO_FORMA_ADQUISICION](T1.[PATRIMONIO_FORMA_ADQUISICION.VID_NOMBRE], T1.[PATRIMONIO_FORMA_ADQUISICION.VID_FECHA], T1.[PATRIMONIO_FORMA_ADQUISICION.VID_HOMOCLAVE], T1.[PATRIMONIO_FORMA_ADQUISICION.NID_PATRIMONIO], T1.[PATRIMONIO_FORMA_ADQUISICION.NID_FORMA_ADQUISICION], T1.[PATRIMONIO_FORMA_ADQUISICION.M_DONACION])
    FROM (
        SELECT 
            T.VID_NOMBRE AS [PATRIMONIO_FORMA_ADQUISICION.VID_NOMBRE], 
            T.VID_FECHA AS [PATRIMONIO_FORMA_ADQUISICION.VID_FECHA], 
            T.VID_HOMOCLAVE AS [PATRIMONIO_FORMA_ADQUISICION.VID_HOMOCLAVE], 
            T.NID_PATRIMONIO AS [PATRIMONIO_FORMA_ADQUISICION.NID_PATRIMONIO], 
            T.NID_FORMA_ADQUISICION AS [PATRIMONIO_FORMA_ADQUISICION.NID_FORMA_ADQUISICION], 
            T.M_DONACION AS [PATRIMONIO_FORMA_ADQUISICION.M_DONACION], 
            True AS _from0
        FROM ModelDeclaraStoreContainer.PATRIMONIO_FORMA_ADQUISICION AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for cnxDeclara.PATRIMONIO_INMUEBLE.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView247()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing PATRIMONIO_INMUEBLE
        [ModelDeclara.PATRIMONIO_INMUEBLE](T1.[PATRIMONIO_INMUEBLE.VID_NOMBRE], T1.[PATRIMONIO_INMUEBLE.VID_FECHA], T1.[PATRIMONIO_INMUEBLE.VID_HOMOCLAVE], T1.[PATRIMONIO_INMUEBLE.NID_PATRIMONIO], T1.[PATRIMONIO_INMUEBLE.NID_TIPO], T1.[PATRIMONIO_INMUEBLE.F_ADQUISICION], T1.[PATRIMONIO_INMUEBLE.NID_USO], T1.[PATRIMONIO_INMUEBLE.E_UBICACION], T1.[PATRIMONIO_INMUEBLE.N_TERRENO], T1.[PATRIMONIO_INMUEBLE.N_CONSTRUCCION], T1.[PATRIMONIO_INMUEBLE.M_VALOR_INMUEBLE])
    FROM (
        SELECT 
            T.VID_NOMBRE AS [PATRIMONIO_INMUEBLE.VID_NOMBRE], 
            T.VID_FECHA AS [PATRIMONIO_INMUEBLE.VID_FECHA], 
            T.VID_HOMOCLAVE AS [PATRIMONIO_INMUEBLE.VID_HOMOCLAVE], 
            T.NID_PATRIMONIO AS [PATRIMONIO_INMUEBLE.NID_PATRIMONIO], 
            T.NID_TIPO AS [PATRIMONIO_INMUEBLE.NID_TIPO], 
            T.F_ADQUISICION AS [PATRIMONIO_INMUEBLE.F_ADQUISICION], 
            T.NID_USO AS [PATRIMONIO_INMUEBLE.NID_USO], 
            T.E_UBICACION AS [PATRIMONIO_INMUEBLE.E_UBICACION], 
            T.N_TERRENO AS [PATRIMONIO_INMUEBLE.N_TERRENO], 
            T.N_CONSTRUCCION AS [PATRIMONIO_INMUEBLE.N_CONSTRUCCION], 
            T.M_VALOR_INMUEBLE AS [PATRIMONIO_INMUEBLE.M_VALOR_INMUEBLE], 
            True AS _from0
        FROM ModelDeclaraStoreContainer.PATRIMONIO_INMUEBLE AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for cnxDeclara.PATRIMONIO_INMUEBLE_ADEUDO.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView248()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing PATRIMONIO_INMUEBLE_ADEUDO
        [ModelDeclara.PATRIMONIO_INMUEBLE_ADEUDO](T1.[PATRIMONIO_INMUEBLE_ADEUDO.VID_NOMBRE], T1.[PATRIMONIO_INMUEBLE_ADEUDO.VID_FECHA], T1.[PATRIMONIO_INMUEBLE_ADEUDO.VID_HOMOCLAVE], T1.[PATRIMONIO_INMUEBLE_ADEUDO.NID_PATRIMONIO], T1.[PATRIMONIO_INMUEBLE_ADEUDO.NID_PATRIMONIO_ADEUDO], T1.[PATRIMONIO_INMUEBLE_ADEUDO.L_DIF])
    FROM (
        SELECT 
            T.VID_NOMBRE AS [PATRIMONIO_INMUEBLE_ADEUDO.VID_NOMBRE], 
            T.VID_FECHA AS [PATRIMONIO_INMUEBLE_ADEUDO.VID_FECHA], 
            T.VID_HOMOCLAVE AS [PATRIMONIO_INMUEBLE_ADEUDO.VID_HOMOCLAVE], 
            T.NID_PATRIMONIO AS [PATRIMONIO_INMUEBLE_ADEUDO.NID_PATRIMONIO], 
            T.NID_PATRIMONIO_ADEUDO AS [PATRIMONIO_INMUEBLE_ADEUDO.NID_PATRIMONIO_ADEUDO], 
            T.L_DIF AS [PATRIMONIO_INMUEBLE_ADEUDO.L_DIF], 
            True AS _from0
        FROM ModelDeclaraStoreContainer.PATRIMONIO_INMUEBLE_ADEUDO AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for cnxDeclara.PATRIMONIO_INVERSION.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView249()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing PATRIMONIO_INVERSION
        [ModelDeclara.PATRIMONIO_INVERSION](T1.[PATRIMONIO_INVERSION.VID_NOMBRE], T1.[PATRIMONIO_INVERSION.VID_FECHA], T1.[PATRIMONIO_INVERSION.VID_HOMOCLAVE], T1.[PATRIMONIO_INVERSION.NID_PATRIMONIO], T1.[PATRIMONIO_INVERSION.NID_TIPO_INVERSION], T1.[PATRIMONIO_INVERSION.NID_SUBTIPO_INVERSION], T1.[PATRIMONIO_INVERSION.NID_INSTITUCION], T1.[PATRIMONIO_INVERSION.E_CUENTA], T1.[PATRIMONIO_INVERSION.V_CUENTA_CORTO], T1.[PATRIMONIO_INVERSION.V_OTRO], T1.[PATRIMONIO_INVERSION.M_SALDO], T1.[PATRIMONIO_INVERSION.NID_PAIS], T1.[PATRIMONIO_INVERSION.CID_ENTIDAD_FEDERATIVA], T1.[PATRIMONIO_INVERSION.V_LUGAR])
    FROM (
        SELECT 
            T.VID_NOMBRE AS [PATRIMONIO_INVERSION.VID_NOMBRE], 
            T.VID_FECHA AS [PATRIMONIO_INVERSION.VID_FECHA], 
            T.VID_HOMOCLAVE AS [PATRIMONIO_INVERSION.VID_HOMOCLAVE], 
            T.NID_PATRIMONIO AS [PATRIMONIO_INVERSION.NID_PATRIMONIO], 
            T.NID_TIPO_INVERSION AS [PATRIMONIO_INVERSION.NID_TIPO_INVERSION], 
            T.NID_SUBTIPO_INVERSION AS [PATRIMONIO_INVERSION.NID_SUBTIPO_INVERSION], 
            T.NID_INSTITUCION AS [PATRIMONIO_INVERSION.NID_INSTITUCION], 
            T.E_CUENTA AS [PATRIMONIO_INVERSION.E_CUENTA], 
            T.V_CUENTA_CORTO AS [PATRIMONIO_INVERSION.V_CUENTA_CORTO], 
            T.V_OTRO AS [PATRIMONIO_INVERSION.V_OTRO], 
            T.M_SALDO AS [PATRIMONIO_INVERSION.M_SALDO], 
            T.NID_PAIS AS [PATRIMONIO_INVERSION.NID_PAIS], 
            T.CID_ENTIDAD_FEDERATIVA AS [PATRIMONIO_INVERSION.CID_ENTIDAD_FEDERATIVA], 
            T.V_LUGAR AS [PATRIMONIO_INVERSION.V_LUGAR], 
            True AS _from0
        FROM ModelDeclaraStoreContainer.PATRIMONIO_INVERSION AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for cnxDeclara.PATRIMONIO_MUEBLE.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView250()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing PATRIMONIO_MUEBLE
        [ModelDeclara.PATRIMONIO_MUEBLE](T1.[PATRIMONIO_MUEBLE.VID_NOMBRE], T1.[PATRIMONIO_MUEBLE.VID_FECHA], T1.[PATRIMONIO_MUEBLE.VID_HOMOCLAVE], T1.[PATRIMONIO_MUEBLE.NID_PATRIMONIO], T1.[PATRIMONIO_MUEBLE.NID_TIPO], T1.[PATRIMONIO_MUEBLE.E_ESPECIFICACION], T1.[PATRIMONIO_MUEBLE.M_VALOR], T1.[PATRIMONIO_MUEBLE.F_ADQUISICION])
    FROM (
        SELECT 
            T.VID_NOMBRE AS [PATRIMONIO_MUEBLE.VID_NOMBRE], 
            T.VID_FECHA AS [PATRIMONIO_MUEBLE.VID_FECHA], 
            T.VID_HOMOCLAVE AS [PATRIMONIO_MUEBLE.VID_HOMOCLAVE], 
            T.NID_PATRIMONIO AS [PATRIMONIO_MUEBLE.NID_PATRIMONIO], 
            T.NID_TIPO AS [PATRIMONIO_MUEBLE.NID_TIPO], 
            T.E_ESPECIFICACION AS [PATRIMONIO_MUEBLE.E_ESPECIFICACION], 
            T.M_VALOR AS [PATRIMONIO_MUEBLE.M_VALOR], 
            T.F_ADQUISICION AS [PATRIMONIO_MUEBLE.F_ADQUISICION], 
            True AS _from0
        FROM ModelDeclaraStoreContainer.PATRIMONIO_MUEBLE AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for cnxDeclara.PATRIMONIO_TARJETA.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView251()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing PATRIMONIO_TARJETA
        [ModelDeclara.PATRIMONIO_TARJETA](T1.[PATRIMONIO_TARJETA.VID_NOMBRE], T1.[PATRIMONIO_TARJETA.VID_FECHA], T1.[PATRIMONIO_TARJETA.VID_HOMOCLAVE], T1.[PATRIMONIO_TARJETA.NID_PATRIMONIO], T1.[PATRIMONIO_TARJETA.NID_INSTITUCION], T1.[PATRIMONIO_TARJETA.M_SALDO], T1.[PATRIMONIO_TARJETA.NID_PAIS], T1.[PATRIMONIO_TARJETA.CID_ENTIDAD_FEDERATIVA], T1.[PATRIMONIO_TARJETA.NID_TIPO_ADEUDO], T1.[PATRIMONIO_TARJETA.V_LUGAR], T1.[PATRIMONIO_TARJETA.V_OTRA], T1.[PATRIMONIO_TARJETA.M_ORIGINAL], T1.[PATRIMONIO_TARJETA.E_CUENTA])
    FROM (
        SELECT 
            T.VID_NOMBRE AS [PATRIMONIO_TARJETA.VID_NOMBRE], 
            T.VID_FECHA AS [PATRIMONIO_TARJETA.VID_FECHA], 
            T.VID_HOMOCLAVE AS [PATRIMONIO_TARJETA.VID_HOMOCLAVE], 
            T.NID_PATRIMONIO AS [PATRIMONIO_TARJETA.NID_PATRIMONIO], 
            T.NID_INSTITUCION AS [PATRIMONIO_TARJETA.NID_INSTITUCION], 
            T.M_SALDO AS [PATRIMONIO_TARJETA.M_SALDO], 
            T.NID_PAIS AS [PATRIMONIO_TARJETA.NID_PAIS], 
            T.CID_ENTIDAD_FEDERATIVA AS [PATRIMONIO_TARJETA.CID_ENTIDAD_FEDERATIVA], 
            T.NID_TIPO_ADEUDO AS [PATRIMONIO_TARJETA.NID_TIPO_ADEUDO], 
            T.V_LUGAR AS [PATRIMONIO_TARJETA.V_LUGAR], 
            T.V_OTRA AS [PATRIMONIO_TARJETA.V_OTRA], 
            T.M_ORIGINAL AS [PATRIMONIO_TARJETA.M_ORIGINAL], 
            T.E_CUENTA AS [PATRIMONIO_TARJETA.E_CUENTA], 
            True AS _from0
        FROM ModelDeclaraStoreContainer.PATRIMONIO_TARJETA AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for cnxDeclara.PATRIMONIO_TITULAR.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView252()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing PATRIMONIO_TITULAR
        [ModelDeclara.PATRIMONIO_TITULAR](T1.[PATRIMONIO_TITULAR.VID_NOMBRE], T1.[PATRIMONIO_TITULAR.VID_FECHA], T1.[PATRIMONIO_TITULAR.VID_HOMOCLAVE], T1.[PATRIMONIO_TITULAR.NID_PATRIMONIO], T1.[PATRIMONIO_TITULAR.NID_DEPENDIENTE], T1.[PATRIMONIO_TITULAR.L_DIF])
    FROM (
        SELECT 
            T.VID_NOMBRE AS [PATRIMONIO_TITULAR.VID_NOMBRE], 
            T.VID_FECHA AS [PATRIMONIO_TITULAR.VID_FECHA], 
            T.VID_HOMOCLAVE AS [PATRIMONIO_TITULAR.VID_HOMOCLAVE], 
            T.NID_PATRIMONIO AS [PATRIMONIO_TITULAR.NID_PATRIMONIO], 
            T.NID_DEPENDIENTE AS [PATRIMONIO_TITULAR.NID_DEPENDIENTE], 
            T.L_DIF AS [PATRIMONIO_TITULAR.L_DIF], 
            True AS _from0
        FROM ModelDeclaraStoreContainer.PATRIMONIO_TITULAR AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for cnxDeclara.PATRIMONIO_VEHICULO.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView253()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing PATRIMONIO_VEHICULO
        [ModelDeclara.PATRIMONIO_VEHICULO](T1.[PATRIMONIO_VEHICULO.VID_NOMBRE], T1.[PATRIMONIO_VEHICULO.VID_FECHA], T1.[PATRIMONIO_VEHICULO.VID_HOMOCLAVE], T1.[PATRIMONIO_VEHICULO.NID_PATRIMONIO], T1.[PATRIMONIO_VEHICULO.NID_MARCA], T1.[PATRIMONIO_VEHICULO.C_MODELO], T1.[PATRIMONIO_VEHICULO.V_DESCRIPCION], T1.[PATRIMONIO_VEHICULO.F_ADQUISICION], T1.[PATRIMONIO_VEHICULO.NID_USO], T1.[PATRIMONIO_VEHICULO.M_VALOR_VEHICULO], T1.[PATRIMONIO_VEHICULO.NID_TIPO_VEHICULO])
    FROM (
        SELECT 
            T.VID_NOMBRE AS [PATRIMONIO_VEHICULO.VID_NOMBRE], 
            T.VID_FECHA AS [PATRIMONIO_VEHICULO.VID_FECHA], 
            T.VID_HOMOCLAVE AS [PATRIMONIO_VEHICULO.VID_HOMOCLAVE], 
            T.NID_PATRIMONIO AS [PATRIMONIO_VEHICULO.NID_PATRIMONIO], 
            T.NID_MARCA AS [PATRIMONIO_VEHICULO.NID_MARCA], 
            T.C_MODELO AS [PATRIMONIO_VEHICULO.C_MODELO], 
            T.V_DESCRIPCION AS [PATRIMONIO_VEHICULO.V_DESCRIPCION], 
            T.F_ADQUISICION AS [PATRIMONIO_VEHICULO.F_ADQUISICION], 
            T.NID_USO AS [PATRIMONIO_VEHICULO.NID_USO], 
            T.M_VALOR_VEHICULO AS [PATRIMONIO_VEHICULO.M_VALOR_VEHICULO], 
            T.NID_TIPO_VEHICULO AS [PATRIMONIO_VEHICULO.NID_TIPO_VEHICULO], 
            True AS _from0
        FROM ModelDeclaraStoreContainer.PATRIMONIO_VEHICULO AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for cnxDeclara.PATRIMONIO_VEHICULO_ADEUDO.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView254()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing PATRIMONIO_VEHICULO_ADEUDO
        [ModelDeclara.PATRIMONIO_VEHICULO_ADEUDO](T1.[PATRIMONIO_VEHICULO_ADEUDO.VID_NOMBRE], T1.[PATRIMONIO_VEHICULO_ADEUDO.VID_FECHA], T1.[PATRIMONIO_VEHICULO_ADEUDO.VID_HOMOCLAVE], T1.[PATRIMONIO_VEHICULO_ADEUDO.NID_PATRIMONIO], T1.[PATRIMONIO_VEHICULO_ADEUDO.NID_PATRIMONIO_ADEUDO])
    FROM (
        SELECT 
            T.VID_NOMBRE AS [PATRIMONIO_VEHICULO_ADEUDO.VID_NOMBRE], 
            T.VID_FECHA AS [PATRIMONIO_VEHICULO_ADEUDO.VID_FECHA], 
            T.VID_HOMOCLAVE AS [PATRIMONIO_VEHICULO_ADEUDO.VID_HOMOCLAVE], 
            T.NID_PATRIMONIO AS [PATRIMONIO_VEHICULO_ADEUDO.NID_PATRIMONIO], 
            T.NID_PATRIMONIO_ADEUDO AS [PATRIMONIO_VEHICULO_ADEUDO.NID_PATRIMONIO_ADEUDO], 
            True AS _from0
        FROM ModelDeclaraStoreContainer.PATRIMONIO_VEHICULO_ADEUDO AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for cnxDeclara.USUARIO.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView255()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing USUARIO
        [ModelDeclara.USUARIO](T1.[USUARIO.VID_NOMBRE], T1.[USUARIO.VID_FECHA], T1.[USUARIO.VID_HOMOCLAVE], T1.[USUARIO.V_PASSWORD], T1.[USUARIO.V_NOMBRE], T1.[USUARIO.V_PRIMER_A], T1.[USUARIO.V_SEGUNDO_A], T1.[USUARIO.F_NACIMIENTO], T1.[USUARIO.V_ACUSE], T1.[USUARIO.L_ACTIVO], T1.[USUARIO.F_INGRESO_INSTITUTO], T1.[USUARIO.F_REGISTRO], T1.[USUARIO.NVO_INGRESO], T1.[USUARIO.OBL_DECLARACION])
    FROM (
        SELECT 
            T.VID_NOMBRE AS [USUARIO.VID_NOMBRE], 
            T.VID_FECHA AS [USUARIO.VID_FECHA], 
            T.VID_HOMOCLAVE AS [USUARIO.VID_HOMOCLAVE], 
            T.V_PASSWORD AS [USUARIO.V_PASSWORD], 
            T.V_NOMBRE AS [USUARIO.V_NOMBRE], 
            T.V_PRIMER_A AS [USUARIO.V_PRIMER_A], 
            T.V_SEGUNDO_A AS [USUARIO.V_SEGUNDO_A], 
            T.F_NACIMIENTO AS [USUARIO.F_NACIMIENTO], 
            T.V_ACUSE AS [USUARIO.V_ACUSE], 
            T.L_ACTIVO AS [USUARIO.L_ACTIVO], 
            T.F_INGRESO_INSTITUTO AS [USUARIO.F_INGRESO_INSTITUTO], 
            T.F_REGISTRO AS [USUARIO.F_REGISTRO], 
            T.NVO_INGRESO AS [USUARIO.NVO_INGRESO], 
            T.OBL_DECLARACION AS [USUARIO.OBL_DECLARACION], 
            True AS _from0
        FROM ModelDeclaraStoreContainer.USUARIO AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for cnxDeclara.USUARIO_CORREO.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView256()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing USUARIO_CORREO
        [ModelDeclara.USUARIO_CORREO](T1.[USUARIO_CORREO.VID_NOMBRE], T1.[USUARIO_CORREO.VID_FECHA], T1.[USUARIO_CORREO.VID_HOMOCLAVE], T1.[USUARIO_CORREO.V_CORREO], T1.[USUARIO_CORREO.L_PRINCIPAL], T1.[USUARIO_CORREO.L_ACTIVO], T1.[USUARIO_CORREO.L_CONFIRMADO], T1.[USUARIO_CORREO.N_CODIGO])
    FROM (
        SELECT 
            T.VID_NOMBRE AS [USUARIO_CORREO.VID_NOMBRE], 
            T.VID_FECHA AS [USUARIO_CORREO.VID_FECHA], 
            T.VID_HOMOCLAVE AS [USUARIO_CORREO.VID_HOMOCLAVE], 
            T.V_CORREO AS [USUARIO_CORREO.V_CORREO], 
            T.L_PRINCIPAL AS [USUARIO_CORREO.L_PRINCIPAL], 
            T.L_ACTIVO AS [USUARIO_CORREO.L_ACTIVO], 
            T.L_CONFIRMADO AS [USUARIO_CORREO.L_CONFIRMADO], 
            T.N_CODIGO AS [USUARIO_CORREO.N_CODIGO], 
            True AS _from0
        FROM ModelDeclaraStoreContainer.USUARIO_CORREO AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for cnxDeclara.USUARIO_DOMICILIO.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView257()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing USUARIO_DOMICILIO
        [ModelDeclara.USUARIO_DOMICILIO](T1.[USUARIO_DOMICILIO.VID_NOMBRE], T1.[USUARIO_DOMICILIO.VID_FECHA], T1.[USUARIO_DOMICILIO.VID_HOMOCLAVE], T1.[USUARIO_DOMICILIO.NID_DOMICILIO], T1.[USUARIO_DOMICILIO.NID_PAIS], T1.[USUARIO_DOMICILIO.CID_ENTIDAD_FEDERATIVA], T1.[USUARIO_DOMICILIO.CID_MUNICIPIO], T1.[USUARIO_DOMICILIO.C_CODIGO_POSTAL], T1.[USUARIO_DOMICILIO.E_DIRECCION], T1.[USUARIO_DOMICILIO.NID_TIPO_DOMICILIO], T1.[USUARIO_DOMICILIO.L_ACTIVO])
    FROM (
        SELECT 
            T.VID_NOMBRE AS [USUARIO_DOMICILIO.VID_NOMBRE], 
            T.VID_FECHA AS [USUARIO_DOMICILIO.VID_FECHA], 
            T.VID_HOMOCLAVE AS [USUARIO_DOMICILIO.VID_HOMOCLAVE], 
            T.NID_DOMICILIO AS [USUARIO_DOMICILIO.NID_DOMICILIO], 
            T.NID_PAIS AS [USUARIO_DOMICILIO.NID_PAIS], 
            T.CID_ENTIDAD_FEDERATIVA AS [USUARIO_DOMICILIO.CID_ENTIDAD_FEDERATIVA], 
            T.CID_MUNICIPIO AS [USUARIO_DOMICILIO.CID_MUNICIPIO], 
            T.C_CODIGO_POSTAL AS [USUARIO_DOMICILIO.C_CODIGO_POSTAL], 
            T.E_DIRECCION AS [USUARIO_DOMICILIO.E_DIRECCION], 
            T.NID_TIPO_DOMICILIO AS [USUARIO_DOMICILIO.NID_TIPO_DOMICILIO], 
            T.L_ACTIVO AS [USUARIO_DOMICILIO.L_ACTIVO], 
            True AS _from0
        FROM ModelDeclaraStoreContainer.USUARIO_DOMICILIO AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for cnxDeclara.USUARIO_REC_PASS.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView258()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing USUARIO_REC_PASS
        [ModelDeclara.USUARIO_REC_PASS](T1.[USUARIO_REC_PASS.VID_NOMBRE], T1.[USUARIO_REC_PASS.VID_FECHA], T1.[USUARIO_REC_PASS.VID_HOMOCLAVE], T1.[USUARIO_REC_PASS.V_CORREO], T1.[USUARIO_REC_PASS.N_USOS], T1.[USUARIO_REC_PASS.F_SOLICITUD])
    FROM (
        SELECT 
            T.VID_NOMBRE AS [USUARIO_REC_PASS.VID_NOMBRE], 
            T.VID_FECHA AS [USUARIO_REC_PASS.VID_FECHA], 
            T.VID_HOMOCLAVE AS [USUARIO_REC_PASS.VID_HOMOCLAVE], 
            T.V_CORREO AS [USUARIO_REC_PASS.V_CORREO], 
            T.N_USOS AS [USUARIO_REC_PASS.N_USOS], 
            T.F_SOLICITUD AS [USUARIO_REC_PASS.F_SOLICITUD], 
            True AS _from0
        FROM ModelDeclaraStoreContainer.USUARIO_REC_PASS AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for cnxDeclara.USUARIO_SESION.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView259()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing USUARIO_SESION
        [ModelDeclara.USUARIO_SESION](T1.[USUARIO_SESION.VID_NOMBRE], T1.[USUARIO_SESION.VID_FECHA], T1.[USUARIO_SESION.VID_HOMOCLAVE], T1.[USUARIO_SESION.NID_SESION], T1.[USUARIO_SESION.V_IP], T1.[USUARIO_SESION.V_MAQUINA_USUARIO], T1.[USUARIO_SESION.F_INICIO], T1.[USUARIO_SESION.F_FIN])
    FROM (
        SELECT 
            T.VID_NOMBRE AS [USUARIO_SESION.VID_NOMBRE], 
            T.VID_FECHA AS [USUARIO_SESION.VID_FECHA], 
            T.VID_HOMOCLAVE AS [USUARIO_SESION.VID_HOMOCLAVE], 
            T.NID_SESION AS [USUARIO_SESION.NID_SESION], 
            T.V_IP AS [USUARIO_SESION.V_IP], 
            T.V_MAQUINA_USUARIO AS [USUARIO_SESION.V_MAQUINA_USUARIO], 
            T.F_INICIO AS [USUARIO_SESION.F_INICIO], 
            T.F_FIN AS [USUARIO_SESION.F_FIN], 
            True AS _from0
        FROM ModelDeclaraStoreContainer.USUARIO_SESION AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ModelDeclaraStoreContainer.ALTA_ADEUDO_COPROPIETARIO.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView260()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing ALTA_ADEUDO_COPROPIETARIO
        [ModelDeclara.Store.ALTA_ADEUDO_COPROPIETARIO](T1.[ALTA_ADEUDO_COPROPIETARIO.VID_NOMBRE], T1.[ALTA_ADEUDO_COPROPIETARIO.VID_FECHA], T1.[ALTA_ADEUDO_COPROPIETARIO.VID_HOMOCLAVE], T1.[ALTA_ADEUDO_COPROPIETARIO.NID_DECLARACION], T1.[ALTA_ADEUDO_COPROPIETARIO.NID_ADEUDO], T1.[ALTA_ADEUDO_COPROPIETARIO.NID_COPROPIETARIO], T1.[ALTA_ADEUDO_COPROPIETARIO.CID_TIPO_PERSONA], T1.[ALTA_ADEUDO_COPROPIETARIO.V_NOMBRE], T1.[ALTA_ADEUDO_COPROPIETARIO.V_RFC])
    FROM (
        SELECT 
            T.VID_NOMBRE AS [ALTA_ADEUDO_COPROPIETARIO.VID_NOMBRE], 
            T.VID_FECHA AS [ALTA_ADEUDO_COPROPIETARIO.VID_FECHA], 
            T.VID_HOMOCLAVE AS [ALTA_ADEUDO_COPROPIETARIO.VID_HOMOCLAVE], 
            T.NID_DECLARACION AS [ALTA_ADEUDO_COPROPIETARIO.NID_DECLARACION], 
            T.NID_ADEUDO AS [ALTA_ADEUDO_COPROPIETARIO.NID_ADEUDO], 
            T.NID_COPROPIETARIO AS [ALTA_ADEUDO_COPROPIETARIO.NID_COPROPIETARIO], 
            T.CID_TIPO_PERSONA AS [ALTA_ADEUDO_COPROPIETARIO.CID_TIPO_PERSONA], 
            T.V_NOMBRE AS [ALTA_ADEUDO_COPROPIETARIO.V_NOMBRE], 
            T.V_RFC AS [ALTA_ADEUDO_COPROPIETARIO.V_RFC], 
            True AS _from0
        FROM cnxDeclara.ALTA_ADEUDO_COPROPIETARIO AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for cnxDeclara.ALTA_ADEUDO_COPROPIETARIO.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView261()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing ALTA_ADEUDO_COPROPIETARIO
        [ModelDeclara.ALTA_ADEUDO_COPROPIETARIO](T1.[ALTA_ADEUDO_COPROPIETARIO.VID_NOMBRE], T1.[ALTA_ADEUDO_COPROPIETARIO.VID_FECHA], T1.[ALTA_ADEUDO_COPROPIETARIO.VID_HOMOCLAVE], T1.[ALTA_ADEUDO_COPROPIETARIO.NID_DECLARACION], T1.[ALTA_ADEUDO_COPROPIETARIO.NID_ADEUDO], T1.[ALTA_ADEUDO_COPROPIETARIO.NID_COPROPIETARIO], T1.[ALTA_ADEUDO_COPROPIETARIO.CID_TIPO_PERSONA], T1.[ALTA_ADEUDO_COPROPIETARIO.V_NOMBRE], T1.[ALTA_ADEUDO_COPROPIETARIO.V_RFC])
    FROM (
        SELECT 
            T.VID_NOMBRE AS [ALTA_ADEUDO_COPROPIETARIO.VID_NOMBRE], 
            T.VID_FECHA AS [ALTA_ADEUDO_COPROPIETARIO.VID_FECHA], 
            T.VID_HOMOCLAVE AS [ALTA_ADEUDO_COPROPIETARIO.VID_HOMOCLAVE], 
            T.NID_DECLARACION AS [ALTA_ADEUDO_COPROPIETARIO.NID_DECLARACION], 
            T.NID_ADEUDO AS [ALTA_ADEUDO_COPROPIETARIO.NID_ADEUDO], 
            T.NID_COPROPIETARIO AS [ALTA_ADEUDO_COPROPIETARIO.NID_COPROPIETARIO], 
            T.CID_TIPO_PERSONA AS [ALTA_ADEUDO_COPROPIETARIO.CID_TIPO_PERSONA], 
            T.V_NOMBRE AS [ALTA_ADEUDO_COPROPIETARIO.V_NOMBRE], 
            T.V_RFC AS [ALTA_ADEUDO_COPROPIETARIO.V_RFC], 
            True AS _from0
        FROM ModelDeclaraStoreContainer.ALTA_ADEUDO_COPROPIETARIO AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ModelDeclaraStoreContainer.CAT_ACTIVIDAD_LABORAL.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView262()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing CAT_ACTIVIDAD_LABORAL
        [ModelDeclara.Store.CAT_ACTIVIDAD_LABORAL](T1.[CAT_ACTIVIDAD_LABORAL.NID_ACTIVIDAD_LABORAL], T1.[CAT_ACTIVIDAD_LABORAL.V_ACTIVIDAD_LABORAL])
    FROM (
        SELECT 
            T.NID_ACTIVIDAD_LABORAL AS [CAT_ACTIVIDAD_LABORAL.NID_ACTIVIDAD_LABORAL], 
            T.V_ACTIVIDAD_LABORAL AS [CAT_ACTIVIDAD_LABORAL.V_ACTIVIDAD_LABORAL], 
            True AS _from0
        FROM cnxDeclara.CAT_ACTIVIDAD_LABORAL AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for cnxDeclara.CAT_ACTIVIDAD_LABORAL.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView263()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing CAT_ACTIVIDAD_LABORAL
        [ModelDeclara.CAT_ACTIVIDAD_LABORAL](T1.[CAT_ACTIVIDAD_LABORAL.NID_ACTIVIDAD_LABORAL], T1.[CAT_ACTIVIDAD_LABORAL.V_ACTIVIDAD_LABORAL])
    FROM (
        SELECT 
            T.NID_ACTIVIDAD_LABORAL AS [CAT_ACTIVIDAD_LABORAL.NID_ACTIVIDAD_LABORAL], 
            T.V_ACTIVIDAD_LABORAL AS [CAT_ACTIVIDAD_LABORAL.V_ACTIVIDAD_LABORAL], 
            True AS _from0
        FROM ModelDeclaraStoreContainer.CAT_ACTIVIDAD_LABORAL AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ModelDeclaraStoreContainer.CAT_APARTADO.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView264()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing CAT_APARTADO
        [ModelDeclara.Store.CAT_APARTADO](T1.[CAT_APARTADO.NID_APARTADO], T1.[CAT_APARTADO.V_APARTADO], T1.[CAT_APARTADO.NID_APARTADO_SUPERIOR], T1.[CAT_APARTADO.N_APARTADO], T1.[CAT_APARTADO.NID_TIPO_DECLARACION])
    FROM (
        SELECT 
            T.NID_APARTADO AS [CAT_APARTADO.NID_APARTADO], 
            T.V_APARTADO AS [CAT_APARTADO.V_APARTADO], 
            T.NID_APARTADO_SUPERIOR AS [CAT_APARTADO.NID_APARTADO_SUPERIOR], 
            T.N_APARTADO AS [CAT_APARTADO.N_APARTADO], 
            T.NID_TIPO_DECLARACION AS [CAT_APARTADO.NID_TIPO_DECLARACION], 
            True AS _from0
        FROM cnxDeclara.CAT_APARTADO AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for cnxDeclara.CAT_APARTADO.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView265()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing CAT_APARTADO
        [ModelDeclara.CAT_APARTADO](T1.[CAT_APARTADO.NID_APARTADO], T1.[CAT_APARTADO.V_APARTADO], T1.[CAT_APARTADO.NID_APARTADO_SUPERIOR], T1.[CAT_APARTADO.N_APARTADO], T1.[CAT_APARTADO.NID_TIPO_DECLARACION])
    FROM (
        SELECT 
            T.NID_APARTADO AS [CAT_APARTADO.NID_APARTADO], 
            T.V_APARTADO AS [CAT_APARTADO.V_APARTADO], 
            T.NID_APARTADO_SUPERIOR AS [CAT_APARTADO.NID_APARTADO_SUPERIOR], 
            T.N_APARTADO AS [CAT_APARTADO.N_APARTADO], 
            T.NID_TIPO_DECLARACION AS [CAT_APARTADO.NID_TIPO_DECLARACION], 
            True AS _from0
        FROM ModelDeclaraStoreContainer.CAT_APARTADO AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ModelDeclaraStoreContainer.CAT_BIEN_ENAJENADO.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView266()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing CAT_BIEN_ENAJENADO
        [ModelDeclara.Store.CAT_BIEN_ENAJENADO](T1.[CAT_BIEN_ENAJENADO.NID_BIEN_ENAJENADO], T1.[CAT_BIEN_ENAJENADO.V_BIEN_ENAJENADO])
    FROM (
        SELECT 
            T.NID_BIEN_ENAJENADO AS [CAT_BIEN_ENAJENADO.NID_BIEN_ENAJENADO], 
            T.V_BIEN_ENAJENADO AS [CAT_BIEN_ENAJENADO.V_BIEN_ENAJENADO], 
            True AS _from0
        FROM cnxDeclara.CAT_BIEN_ENAJENADO AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for cnxDeclara.CAT_BIEN_ENAJENADO.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView267()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing CAT_BIEN_ENAJENADO
        [ModelDeclara.CAT_BIEN_ENAJENADO](T1.[CAT_BIEN_ENAJENADO.NID_BIEN_ENAJENADO], T1.[CAT_BIEN_ENAJENADO.V_BIEN_ENAJENADO])
    FROM (
        SELECT 
            T.NID_BIEN_ENAJENADO AS [CAT_BIEN_ENAJENADO.NID_BIEN_ENAJENADO], 
            T.V_BIEN_ENAJENADO AS [CAT_BIEN_ENAJENADO.V_BIEN_ENAJENADO], 
            True AS _from0
        FROM ModelDeclaraStoreContainer.CAT_BIEN_ENAJENADO AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ModelDeclaraStoreContainer.CAT_CONFLICTO_PREGUNTA.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView268()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing CAT_CONFLICTO_PREGUNTA
        [ModelDeclara.Store.CAT_CONFLICTO_PREGUNTA](T1.[CAT_CONFLICTO_PREGUNTA.NID_RUBRO], T1.[CAT_CONFLICTO_PREGUNTA.NID_PREGUNTA], T1.[CAT_CONFLICTO_PREGUNTA.V_RUBRO], T1.[CAT_CONFLICTO_PREGUNTA.V_OPCIONES], T1.[CAT_CONFLICTO_PREGUNTA.C_INICIO], T1.[CAT_CONFLICTO_PREGUNTA.C_FIN], T1.[CAT_CONFLICTO_PREGUNTA.L_TESTADO])
    FROM (
        SELECT 
            T.NID_RUBRO AS [CAT_CONFLICTO_PREGUNTA.NID_RUBRO], 
            T.NID_PREGUNTA AS [CAT_CONFLICTO_PREGUNTA.NID_PREGUNTA], 
            T.V_RUBRO AS [CAT_CONFLICTO_PREGUNTA.V_RUBRO], 
            T.V_OPCIONES AS [CAT_CONFLICTO_PREGUNTA.V_OPCIONES], 
            T.C_INICIO AS [CAT_CONFLICTO_PREGUNTA.C_INICIO], 
            T.C_FIN AS [CAT_CONFLICTO_PREGUNTA.C_FIN], 
            T.L_TESTADO AS [CAT_CONFLICTO_PREGUNTA.L_TESTADO], 
            True AS _from0
        FROM cnxDeclara.CAT_CONFLICTO_PREGUNTA AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ModelDeclaraStoreContainer.CAT_CONFLICTO_RUBRO.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView269()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing CAT_CONFLICTO_RUBRO
        [ModelDeclara.Store.CAT_CONFLICTO_RUBRO](T1.[CAT_CONFLICTO_RUBRO.NID_RUBRO], T1.[CAT_CONFLICTO_RUBRO.V_RUBRO], T1.[CAT_CONFLICTO_RUBRO.C_INICIO], T1.[CAT_CONFLICTO_RUBRO.C_FIN])
    FROM (
        SELECT 
            T.NID_RUBRO AS [CAT_CONFLICTO_RUBRO.NID_RUBRO], 
            T.V_RUBRO AS [CAT_CONFLICTO_RUBRO.V_RUBRO], 
            T.C_INICIO AS [CAT_CONFLICTO_RUBRO.C_INICIO], 
            T.C_FIN AS [CAT_CONFLICTO_RUBRO.C_FIN], 
            True AS _from0
        FROM cnxDeclara.CAT_CONFLICTO_RUBRO AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ModelDeclaraStoreContainer.CAT_ESTADO_CONFLICTO.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView270()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing CAT_ESTADO_CONFLICTO
        [ModelDeclara.Store.CAT_ESTADO_CONFLICTO](T1.[CAT_ESTADO_CONFLICTO.NID_ESTADO_CONFLICTO], T1.[CAT_ESTADO_CONFLICTO.V_ESTADO_CONFLICTO])
    FROM (
        SELECT 
            T.NID_ESTADO_CONFLICTO AS [CAT_ESTADO_CONFLICTO.NID_ESTADO_CONFLICTO], 
            T.V_ESTADO_CONFLICTO AS [CAT_ESTADO_CONFLICTO.V_ESTADO_CONFLICTO], 
            True AS _from0
        FROM cnxDeclara.CAT_ESTADO_CONFLICTO AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ModelDeclaraStoreContainer.CONFLICTO.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView271()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing CONFLICTO
        [ModelDeclara.Store.CONFLICTO](T1.[CONFLICTO.VID_NOMBRE], T1.[CONFLICTO.VID_FECHA], T1.[CONFLICTO.VID_HOMOCLAVE], T1.[CONFLICTO.NID_CONFLICTO], T1.[CONFLICTO.NID_DEC_ASOS], T1.[CONFLICTO.NID_ESTADO_CONFLICTO])
    FROM (
        SELECT 
            T.VID_NOMBRE AS [CONFLICTO.VID_NOMBRE], 
            T.VID_FECHA AS [CONFLICTO.VID_FECHA], 
            T.VID_HOMOCLAVE AS [CONFLICTO.VID_HOMOCLAVE], 
            T.NID_CONFLICTO AS [CONFLICTO.NID_CONFLICTO], 
            T.NID_DEC_ASOS AS [CONFLICTO.NID_DEC_ASOS], 
            T.NID_ESTADO_CONFLICTO AS [CONFLICTO.NID_ESTADO_CONFLICTO], 
            True AS _from0
        FROM cnxDeclara.CONFLICTO AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ModelDeclaraStoreContainer.CONFLICTO_ENCABEZADO.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView272()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing CONFLICTO_ENCABEZADO
        [ModelDeclara.Store.CONFLICTO_ENCABEZADO](T1.[CONFLICTO_ENCABEZADO.VID_NOMBRE], T1.[CONFLICTO_ENCABEZADO.VID_FECHA], T1.[CONFLICTO_ENCABEZADO.VID_HOMOCLAVE], T1.[CONFLICTO_ENCABEZADO.NID_CONFLICTO], T1.[CONFLICTO_ENCABEZADO.NID_RUBRO], T1.[CONFLICTO_ENCABEZADO.NID_ENCABEZADO], T1.[CONFLICTO_ENCABEZADO.L_CONFLICTO])
    FROM (
        SELECT 
            T.VID_NOMBRE AS [CONFLICTO_ENCABEZADO.VID_NOMBRE], 
            T.VID_FECHA AS [CONFLICTO_ENCABEZADO.VID_FECHA], 
            T.VID_HOMOCLAVE AS [CONFLICTO_ENCABEZADO.VID_HOMOCLAVE], 
            T.NID_CONFLICTO AS [CONFLICTO_ENCABEZADO.NID_CONFLICTO], 
            T.NID_RUBRO AS [CONFLICTO_ENCABEZADO.NID_RUBRO], 
            T.NID_ENCABEZADO AS [CONFLICTO_ENCABEZADO.NID_ENCABEZADO], 
            T.L_CONFLICTO AS [CONFLICTO_ENCABEZADO.L_CONFLICTO], 
            True AS _from0
        FROM cnxDeclara.CONFLICTO_ENCABEZADO AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ModelDeclaraStoreContainer.CONFLICTO_RESPUESTA.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView273()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing CONFLICTO_RESPUESTA
        [ModelDeclara.Store.CONFLICTO_RESPUESTA](T1.[CONFLICTO_RESPUESTA.VID_NOMBRE], T1.[CONFLICTO_RESPUESTA.VID_FECHA], T1.[CONFLICTO_RESPUESTA.VID_HOMOCLAVE], T1.[CONFLICTO_RESPUESTA.NID_CONFLICTO], T1.[CONFLICTO_RESPUESTA.NID_RUBRO], T1.[CONFLICTO_RESPUESTA.NID_ENCABEZADO], T1.[CONFLICTO_RESPUESTA.NID_PREGUNTA], T1.[CONFLICTO_RESPUESTA.V_RESPUESTA])
    FROM (
        SELECT 
            T.VID_NOMBRE AS [CONFLICTO_RESPUESTA.VID_NOMBRE], 
            T.VID_FECHA AS [CONFLICTO_RESPUESTA.VID_FECHA], 
            T.VID_HOMOCLAVE AS [CONFLICTO_RESPUESTA.VID_HOMOCLAVE], 
            T.NID_CONFLICTO AS [CONFLICTO_RESPUESTA.NID_CONFLICTO], 
            T.NID_RUBRO AS [CONFLICTO_RESPUESTA.NID_RUBRO], 
            T.NID_ENCABEZADO AS [CONFLICTO_RESPUESTA.NID_ENCABEZADO], 
            T.NID_PREGUNTA AS [CONFLICTO_RESPUESTA.NID_PREGUNTA], 
            T.V_RESPUESTA AS [CONFLICTO_RESPUESTA.V_RESPUESTA], 
            True AS _from0
        FROM cnxDeclara.CONFLICTO_RESPUESTA AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ModelDeclaraStoreContainer.CONFLICTO_RUBRO.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView274()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing CONFLICTO_RUBRO
        [ModelDeclara.Store.CONFLICTO_RUBRO](T1.[CONFLICTO_RUBRO.VID_NOMBRE], T1.[CONFLICTO_RUBRO.VID_FECHA], T1.[CONFLICTO_RUBRO.VID_HOMOCLAVE], T1.[CONFLICTO_RUBRO.NID_CONFLICTO], T1.[CONFLICTO_RUBRO.NID_RUBRO], T1.[CONFLICTO_RUBRO.L_RESPUESTA])
    FROM (
        SELECT 
            T.VID_NOMBRE AS [CONFLICTO_RUBRO.VID_NOMBRE], 
            T.VID_FECHA AS [CONFLICTO_RUBRO.VID_FECHA], 
            T.VID_HOMOCLAVE AS [CONFLICTO_RUBRO.VID_HOMOCLAVE], 
            T.NID_CONFLICTO AS [CONFLICTO_RUBRO.NID_CONFLICTO], 
            T.NID_RUBRO AS [CONFLICTO_RUBRO.NID_RUBRO], 
            T.L_RESPUESTA AS [CONFLICTO_RUBRO.L_RESPUESTA], 
            True AS _from0
        FROM cnxDeclara.CONFLICTO_RUBRO AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for cnxDeclara.CAT_CONFLICTO_PREGUNTA.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView275()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing CAT_CONFLICTO_PREGUNTA
        [ModelDeclara.CAT_CONFLICTO_PREGUNTA](T1.[CAT_CONFLICTO_PREGUNTA.NID_RUBRO], T1.[CAT_CONFLICTO_PREGUNTA.NID_PREGUNTA], T1.[CAT_CONFLICTO_PREGUNTA.V_RUBRO], T1.[CAT_CONFLICTO_PREGUNTA.V_OPCIONES], T1.[CAT_CONFLICTO_PREGUNTA.C_INICIO], T1.[CAT_CONFLICTO_PREGUNTA.C_FIN], T1.[CAT_CONFLICTO_PREGUNTA.L_TESTADO])
    FROM (
        SELECT 
            T.NID_RUBRO AS [CAT_CONFLICTO_PREGUNTA.NID_RUBRO], 
            T.NID_PREGUNTA AS [CAT_CONFLICTO_PREGUNTA.NID_PREGUNTA], 
            T.V_RUBRO AS [CAT_CONFLICTO_PREGUNTA.V_RUBRO], 
            T.V_OPCIONES AS [CAT_CONFLICTO_PREGUNTA.V_OPCIONES], 
            T.C_INICIO AS [CAT_CONFLICTO_PREGUNTA.C_INICIO], 
            T.C_FIN AS [CAT_CONFLICTO_PREGUNTA.C_FIN], 
            T.L_TESTADO AS [CAT_CONFLICTO_PREGUNTA.L_TESTADO], 
            True AS _from0
        FROM ModelDeclaraStoreContainer.CAT_CONFLICTO_PREGUNTA AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for cnxDeclara.CAT_CONFLICTO_RUBRO.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView276()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing CAT_CONFLICTO_RUBRO
        [ModelDeclara.CAT_CONFLICTO_RUBRO](T1.[CAT_CONFLICTO_RUBRO.NID_RUBRO], T1.[CAT_CONFLICTO_RUBRO.V_RUBRO], T1.[CAT_CONFLICTO_RUBRO.C_INICIO], T1.[CAT_CONFLICTO_RUBRO.C_FIN])
    FROM (
        SELECT 
            T.NID_RUBRO AS [CAT_CONFLICTO_RUBRO.NID_RUBRO], 
            T.V_RUBRO AS [CAT_CONFLICTO_RUBRO.V_RUBRO], 
            T.C_INICIO AS [CAT_CONFLICTO_RUBRO.C_INICIO], 
            T.C_FIN AS [CAT_CONFLICTO_RUBRO.C_FIN], 
            True AS _from0
        FROM ModelDeclaraStoreContainer.CAT_CONFLICTO_RUBRO AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for cnxDeclara.CAT_ESTADO_CONFLICTO.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView277()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing CAT_ESTADO_CONFLICTO
        [ModelDeclara.CAT_ESTADO_CONFLICTO](T1.[CAT_ESTADO_CONFLICTO.NID_ESTADO_CONFLICTO], T1.[CAT_ESTADO_CONFLICTO.V_ESTADO_CONFLICTO])
    FROM (
        SELECT 
            T.NID_ESTADO_CONFLICTO AS [CAT_ESTADO_CONFLICTO.NID_ESTADO_CONFLICTO], 
            T.V_ESTADO_CONFLICTO AS [CAT_ESTADO_CONFLICTO.V_ESTADO_CONFLICTO], 
            True AS _from0
        FROM ModelDeclaraStoreContainer.CAT_ESTADO_CONFLICTO AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for cnxDeclara.CONFLICTO.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView278()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing CONFLICTO
        [ModelDeclara.CONFLICTO](T1.[CONFLICTO.VID_NOMBRE], T1.[CONFLICTO.VID_FECHA], T1.[CONFLICTO.VID_HOMOCLAVE], T1.[CONFLICTO.NID_CONFLICTO], T1.[CONFLICTO.NID_DEC_ASOS], T1.[CONFLICTO.NID_ESTADO_CONFLICTO])
    FROM (
        SELECT 
            T.VID_NOMBRE AS [CONFLICTO.VID_NOMBRE], 
            T.VID_FECHA AS [CONFLICTO.VID_FECHA], 
            T.VID_HOMOCLAVE AS [CONFLICTO.VID_HOMOCLAVE], 
            T.NID_CONFLICTO AS [CONFLICTO.NID_CONFLICTO], 
            T.NID_DEC_ASOS AS [CONFLICTO.NID_DEC_ASOS], 
            T.NID_ESTADO_CONFLICTO AS [CONFLICTO.NID_ESTADO_CONFLICTO], 
            True AS _from0
        FROM ModelDeclaraStoreContainer.CONFLICTO AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for cnxDeclara.CONFLICTO_ENCABEZADO.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView279()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing CONFLICTO_ENCABEZADO
        [ModelDeclara.CONFLICTO_ENCABEZADO](T1.[CONFLICTO_ENCABEZADO.VID_NOMBRE], T1.[CONFLICTO_ENCABEZADO.VID_FECHA], T1.[CONFLICTO_ENCABEZADO.VID_HOMOCLAVE], T1.[CONFLICTO_ENCABEZADO.NID_CONFLICTO], T1.[CONFLICTO_ENCABEZADO.NID_RUBRO], T1.[CONFLICTO_ENCABEZADO.NID_ENCABEZADO], T1.[CONFLICTO_ENCABEZADO.L_CONFLICTO])
    FROM (
        SELECT 
            T.VID_NOMBRE AS [CONFLICTO_ENCABEZADO.VID_NOMBRE], 
            T.VID_FECHA AS [CONFLICTO_ENCABEZADO.VID_FECHA], 
            T.VID_HOMOCLAVE AS [CONFLICTO_ENCABEZADO.VID_HOMOCLAVE], 
            T.NID_CONFLICTO AS [CONFLICTO_ENCABEZADO.NID_CONFLICTO], 
            T.NID_RUBRO AS [CONFLICTO_ENCABEZADO.NID_RUBRO], 
            T.NID_ENCABEZADO AS [CONFLICTO_ENCABEZADO.NID_ENCABEZADO], 
            T.L_CONFLICTO AS [CONFLICTO_ENCABEZADO.L_CONFLICTO], 
            True AS _from0
        FROM ModelDeclaraStoreContainer.CONFLICTO_ENCABEZADO AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for cnxDeclara.CONFLICTO_RESPUESTA.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView280()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing CONFLICTO_RESPUESTA
        [ModelDeclara.CONFLICTO_RESPUESTA](T1.[CONFLICTO_RESPUESTA.VID_NOMBRE], T1.[CONFLICTO_RESPUESTA.VID_FECHA], T1.[CONFLICTO_RESPUESTA.VID_HOMOCLAVE], T1.[CONFLICTO_RESPUESTA.NID_CONFLICTO], T1.[CONFLICTO_RESPUESTA.NID_RUBRO], T1.[CONFLICTO_RESPUESTA.NID_ENCABEZADO], T1.[CONFLICTO_RESPUESTA.NID_PREGUNTA], T1.[CONFLICTO_RESPUESTA.V_RESPUESTA])
    FROM (
        SELECT 
            T.VID_NOMBRE AS [CONFLICTO_RESPUESTA.VID_NOMBRE], 
            T.VID_FECHA AS [CONFLICTO_RESPUESTA.VID_FECHA], 
            T.VID_HOMOCLAVE AS [CONFLICTO_RESPUESTA.VID_HOMOCLAVE], 
            T.NID_CONFLICTO AS [CONFLICTO_RESPUESTA.NID_CONFLICTO], 
            T.NID_RUBRO AS [CONFLICTO_RESPUESTA.NID_RUBRO], 
            T.NID_ENCABEZADO AS [CONFLICTO_RESPUESTA.NID_ENCABEZADO], 
            T.NID_PREGUNTA AS [CONFLICTO_RESPUESTA.NID_PREGUNTA], 
            T.V_RESPUESTA AS [CONFLICTO_RESPUESTA.V_RESPUESTA], 
            True AS _from0
        FROM ModelDeclaraStoreContainer.CONFLICTO_RESPUESTA AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for cnxDeclara.CONFLICTO_RUBRO.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView281()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing CONFLICTO_RUBRO
        [ModelDeclara.CONFLICTO_RUBRO](T1.[CONFLICTO_RUBRO.VID_NOMBRE], T1.[CONFLICTO_RUBRO.VID_FECHA], T1.[CONFLICTO_RUBRO.VID_HOMOCLAVE], T1.[CONFLICTO_RUBRO.NID_CONFLICTO], T1.[CONFLICTO_RUBRO.NID_RUBRO], T1.[CONFLICTO_RUBRO.L_RESPUESTA])
    FROM (
        SELECT 
            T.VID_NOMBRE AS [CONFLICTO_RUBRO.VID_NOMBRE], 
            T.VID_FECHA AS [CONFLICTO_RUBRO.VID_FECHA], 
            T.VID_HOMOCLAVE AS [CONFLICTO_RUBRO.VID_HOMOCLAVE], 
            T.NID_CONFLICTO AS [CONFLICTO_RUBRO.NID_CONFLICTO], 
            T.NID_RUBRO AS [CONFLICTO_RUBRO.NID_RUBRO], 
            T.L_RESPUESTA AS [CONFLICTO_RUBRO.L_RESPUESTA], 
            True AS _from0
        FROM ModelDeclaraStoreContainer.CONFLICTO_RUBRO AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ModelDeclaraStoreContainer.CAT_DENOMINACION.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView282()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing CAT_DENOMINACION
        [ModelDeclara.Store.CAT_DENOMINACION](T1.[CAT_DENOMINACION.NID_DENOMINACION], T1.[CAT_DENOMINACION.V_DENOMINACION])
    FROM (
        SELECT 
            T.NID_DENOMINACION AS [CAT_DENOMINACION.NID_DENOMINACION], 
            T.V_DENOMINACION AS [CAT_DENOMINACION.V_DENOMINACION], 
            True AS _from0
        FROM cnxDeclara.CAT_DENOMINACION AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for cnxDeclara.CAT_DENOMINACION.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView283()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing CAT_DENOMINACION
        [ModelDeclara.CAT_DENOMINACION](T1.[CAT_DENOMINACION.NID_DENOMINACION], T1.[CAT_DENOMINACION.V_DENOMINACION])
    FROM (
        SELECT 
            T.NID_DENOMINACION AS [CAT_DENOMINACION.NID_DENOMINACION], 
            T.V_DENOMINACION AS [CAT_DENOMINACION.V_DENOMINACION], 
            True AS _from0
        FROM ModelDeclaraStoreContainer.CAT_DENOMINACION AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ModelDeclaraStoreContainer.CAT_DIAS_FERIADOS.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView284()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing CAT_DIAS_FERIADOS
        [ModelDeclara.Store.CAT_DIAS_FERIADOS](T1.[CAT_DIAS_FERIADOS.NID_ANIO], T1.[CAT_DIAS_FERIADOS.NID_MES], T1.[CAT_DIAS_FERIADOS.NID_DIA], T1.[CAT_DIAS_FERIADOS.V_DIA])
    FROM (
        SELECT 
            T.NID_ANIO AS [CAT_DIAS_FERIADOS.NID_ANIO], 
            T.NID_MES AS [CAT_DIAS_FERIADOS.NID_MES], 
            T.NID_DIA AS [CAT_DIAS_FERIADOS.NID_DIA], 
            T.V_DIA AS [CAT_DIAS_FERIADOS.V_DIA], 
            True AS _from0
        FROM cnxDeclara.CAT_DIAS_FERIADOS AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for cnxDeclara.CAT_DIAS_FERIADOS.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView285()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing CAT_DIAS_FERIADOS
        [ModelDeclara.CAT_DIAS_FERIADOS](T1.[CAT_DIAS_FERIADOS.NID_ANIO], T1.[CAT_DIAS_FERIADOS.NID_MES], T1.[CAT_DIAS_FERIADOS.NID_DIA], T1.[CAT_DIAS_FERIADOS.V_DIA])
    FROM (
        SELECT 
            T.NID_ANIO AS [CAT_DIAS_FERIADOS.NID_ANIO], 
            T.NID_MES AS [CAT_DIAS_FERIADOS.NID_MES], 
            T.NID_DIA AS [CAT_DIAS_FERIADOS.NID_DIA], 
            T.V_DIA AS [CAT_DIAS_FERIADOS.V_DIA], 
            True AS _from0
        FROM ModelDeclaraStoreContainer.CAT_DIAS_FERIADOS AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ModelDeclaraStoreContainer.CAT_EGRESOS.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView286()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing CAT_EGRESOS
        [ModelDeclara.Store.CAT_EGRESOS](T1.[CAT_EGRESOS.NID_EGRESO], T1.[CAT_EGRESOS.V_EGRESO], T1.[CAT_EGRESOS.N_NIVEL])
    FROM (
        SELECT 
            T.NID_EGRESO AS [CAT_EGRESOS.NID_EGRESO], 
            T.V_EGRESO AS [CAT_EGRESOS.V_EGRESO], 
            T.N_NIVEL AS [CAT_EGRESOS.N_NIVEL], 
            True AS _from0
        FROM cnxDeclara.CAT_EGRESOS AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for cnxDeclara.CAT_EGRESOS.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView287()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing CAT_EGRESOS
        [ModelDeclara.CAT_EGRESOS](T1.[CAT_EGRESOS.NID_EGRESO], T1.[CAT_EGRESOS.V_EGRESO], T1.[CAT_EGRESOS.N_NIVEL])
    FROM (
        SELECT 
            T.NID_EGRESO AS [CAT_EGRESOS.NID_EGRESO], 
            T.V_EGRESO AS [CAT_EGRESOS.V_EGRESO], 
            T.N_NIVEL AS [CAT_EGRESOS.N_NIVEL], 
            True AS _from0
        FROM ModelDeclaraStoreContainer.CAT_EGRESOS AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ModelDeclaraStoreContainer.CAT_ESTADO_CIVIL.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView288()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing CAT_ESTADO_CIVIL
        [ModelDeclara.Store.CAT_ESTADO_CIVIL](T1.[CAT_ESTADO_CIVIL.NID_ESTADO_CIVIL], T1.[CAT_ESTADO_CIVIL.V_ESTADO_CIVIL])
    FROM (
        SELECT 
            T.NID_ESTADO_CIVIL AS [CAT_ESTADO_CIVIL.NID_ESTADO_CIVIL], 
            T.V_ESTADO_CIVIL AS [CAT_ESTADO_CIVIL.V_ESTADO_CIVIL], 
            True AS _from0
        FROM cnxDeclara.CAT_ESTADO_CIVIL AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for cnxDeclara.CAT_ESTADO_CIVIL.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView289()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing CAT_ESTADO_CIVIL
        [ModelDeclara.CAT_ESTADO_CIVIL](T1.[CAT_ESTADO_CIVIL.NID_ESTADO_CIVIL], T1.[CAT_ESTADO_CIVIL.V_ESTADO_CIVIL])
    FROM (
        SELECT 
            T.NID_ESTADO_CIVIL AS [CAT_ESTADO_CIVIL.NID_ESTADO_CIVIL], 
            T.V_ESTADO_CIVIL AS [CAT_ESTADO_CIVIL.V_ESTADO_CIVIL], 
            True AS _from0
        FROM ModelDeclaraStoreContainer.CAT_ESTADO_CIVIL AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ModelDeclaraStoreContainer.CAT_GASTOS_DEFAULT.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView290()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing CAT_GASTOS_DEFAULT
        [ModelDeclara.Store.CAT_GASTOS_DEFAULT](T1.[CAT_GASTOS_DEFAULT.V_GASTO], T1.[CAT_GASTOS_DEFAULT.NID_TIPO_GASTO], T1.[CAT_GASTOS_DEFAULT.C_INICIO], T1.[CAT_GASTOS_DEFAULT.C_FIN])
    FROM (
        SELECT 
            T.V_GASTO AS [CAT_GASTOS_DEFAULT.V_GASTO], 
            T.NID_TIPO_GASTO AS [CAT_GASTOS_DEFAULT.NID_TIPO_GASTO], 
            T.C_INICIO AS [CAT_GASTOS_DEFAULT.C_INICIO], 
            T.C_FIN AS [CAT_GASTOS_DEFAULT.C_FIN], 
            True AS _from0
        FROM cnxDeclara.CAT_GASTOS_DEFAULT AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for cnxDeclara.CAT_GASTOS_DEFAULT.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView291()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing CAT_GASTOS_DEFAULT
        [ModelDeclara.CAT_GASTOS_DEFAULT](T1.[CAT_GASTOS_DEFAULT.V_GASTO], T1.[CAT_GASTOS_DEFAULT.NID_TIPO_GASTO], T1.[CAT_GASTOS_DEFAULT.C_INICIO], T1.[CAT_GASTOS_DEFAULT.C_FIN])
    FROM (
        SELECT 
            T.V_GASTO AS [CAT_GASTOS_DEFAULT.V_GASTO], 
            T.NID_TIPO_GASTO AS [CAT_GASTOS_DEFAULT.NID_TIPO_GASTO], 
            T.C_INICIO AS [CAT_GASTOS_DEFAULT.C_INICIO], 
            T.C_FIN AS [CAT_GASTOS_DEFAULT.C_FIN], 
            True AS _from0
        FROM ModelDeclaraStoreContainer.CAT_GASTOS_DEFAULT AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ModelDeclaraStoreContainer.CAT_INGRESOS.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView292()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing CAT_INGRESOS
        [ModelDeclara.Store.CAT_INGRESOS](T1.[CAT_INGRESOS.NID_INGRESO], T1.[CAT_INGRESOS.V_INGRESO], T1.[CAT_INGRESOS.N_NIVEL])
    FROM (
        SELECT 
            T.NID_INGRESO AS [CAT_INGRESOS.NID_INGRESO], 
            T.V_INGRESO AS [CAT_INGRESOS.V_INGRESO], 
            T.N_NIVEL AS [CAT_INGRESOS.N_NIVEL], 
            True AS _from0
        FROM cnxDeclara.CAT_INGRESOS AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for cnxDeclara.CAT_INGRESOS.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView293()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing CAT_INGRESOS
        [ModelDeclara.CAT_INGRESOS](T1.[CAT_INGRESOS.NID_INGRESO], T1.[CAT_INGRESOS.V_INGRESO], T1.[CAT_INGRESOS.N_NIVEL])
    FROM (
        SELECT 
            T.NID_INGRESO AS [CAT_INGRESOS.NID_INGRESO], 
            T.V_INGRESO AS [CAT_INGRESOS.V_INGRESO], 
            T.N_NIVEL AS [CAT_INGRESOS.N_NIVEL], 
            True AS _from0
        FROM ModelDeclaraStoreContainer.CAT_INGRESOS AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ModelDeclaraStoreContainer.CAT_INSTRUMENTO_RENDIMIENTO.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView294()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing CAT_INSTRUMENTO_RENDIMIENTO
        [ModelDeclara.Store.CAT_INSTRUMENTO_RENDIMIENTO](T1.[CAT_INSTRUMENTO_RENDIMIENTO.NID_INSTRUMENTO_RENDIMIENTO], T1.[CAT_INSTRUMENTO_RENDIMIENTO.V_INSTRUMENTO_RENDIMIENTO])
    FROM (
        SELECT 
            T.NID_INSTRUMENTO_RENDIMIENTO AS [CAT_INSTRUMENTO_RENDIMIENTO.NID_INSTRUMENTO_RENDIMIENTO], 
            T.V_INSTRUMENTO_RENDIMIENTO AS [CAT_INSTRUMENTO_RENDIMIENTO.V_INSTRUMENTO_RENDIMIENTO], 
            True AS _from0
        FROM cnxDeclara.CAT_INSTRUMENTO_RENDIMIENTO AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for cnxDeclara.CAT_INSTRUMENTO_RENDIMIENTO.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView295()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing CAT_INSTRUMENTO_RENDIMIENTO
        [ModelDeclara.CAT_INSTRUMENTO_RENDIMIENTO](T1.[CAT_INSTRUMENTO_RENDIMIENTO.NID_INSTRUMENTO_RENDIMIENTO], T1.[CAT_INSTRUMENTO_RENDIMIENTO.V_INSTRUMENTO_RENDIMIENTO])
    FROM (
        SELECT 
            T.NID_INSTRUMENTO_RENDIMIENTO AS [CAT_INSTRUMENTO_RENDIMIENTO.NID_INSTRUMENTO_RENDIMIENTO], 
            T.V_INSTRUMENTO_RENDIMIENTO AS [CAT_INSTRUMENTO_RENDIMIENTO.V_INSTRUMENTO_RENDIMIENTO], 
            True AS _from0
        FROM ModelDeclaraStoreContainer.CAT_INSTRUMENTO_RENDIMIENTO AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ModelDeclaraStoreContainer.CAT_PRIMER_NIVEL.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView296()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing CAT_PRIMER_NIVEL
        [ModelDeclara.Store.CAT_PRIMER_NIVEL](T1.[CAT_PRIMER_NIVEL.VID_PRIMER_NIVEL], T1.[CAT_PRIMER_NIVEL.V_PRIMER_NIVEL], T1.[CAT_PRIMER_NIVEL.C_INICIO], T1.[CAT_PRIMER_NIVEL.C_FIN])
    FROM (
        SELECT 
            T.VID_PRIMER_NIVEL AS [CAT_PRIMER_NIVEL.VID_PRIMER_NIVEL], 
            T.V_PRIMER_NIVEL AS [CAT_PRIMER_NIVEL.V_PRIMER_NIVEL], 
            T.C_INICIO AS [CAT_PRIMER_NIVEL.C_INICIO], 
            T.C_FIN AS [CAT_PRIMER_NIVEL.C_FIN], 
            True AS _from0
        FROM cnxDeclara.CAT_PRIMER_NIVEL AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for cnxDeclara.CAT_PRIMER_NIVEL.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView297()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing CAT_PRIMER_NIVEL
        [ModelDeclara.CAT_PRIMER_NIVEL](T1.[CAT_PRIMER_NIVEL.VID_PRIMER_NIVEL], T1.[CAT_PRIMER_NIVEL.V_PRIMER_NIVEL], T1.[CAT_PRIMER_NIVEL.C_INICIO], T1.[CAT_PRIMER_NIVEL.C_FIN])
    FROM (
        SELECT 
            T.VID_PRIMER_NIVEL AS [CAT_PRIMER_NIVEL.VID_PRIMER_NIVEL], 
            T.V_PRIMER_NIVEL AS [CAT_PRIMER_NIVEL.V_PRIMER_NIVEL], 
            T.C_INICIO AS [CAT_PRIMER_NIVEL.C_INICIO], 
            T.C_FIN AS [CAT_PRIMER_NIVEL.C_FIN], 
            True AS _from0
        FROM ModelDeclaraStoreContainer.CAT_PRIMER_NIVEL AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ModelDeclaraStoreContainer.CAT_RELACION_PAREJA.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView298()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing CAT_RELACION_PAREJA
        [ModelDeclara.Store.CAT_RELACION_PAREJA](T1.[CAT_RELACION_PAREJA.NID_RELACION_PAREJA], T1.[CAT_RELACION_PAREJA.V_RELACION_PAREJA])
    FROM (
        SELECT 
            T.NID_RELACION_PAREJA AS [CAT_RELACION_PAREJA.NID_RELACION_PAREJA], 
            T.V_RELACION_PAREJA AS [CAT_RELACION_PAREJA.V_RELACION_PAREJA], 
            True AS _from0
        FROM cnxDeclara.CAT_RELACION_PAREJA AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for cnxDeclara.CAT_RELACION_PAREJA.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView299()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing CAT_RELACION_PAREJA
        [ModelDeclara.CAT_RELACION_PAREJA](T1.[CAT_RELACION_PAREJA.NID_RELACION_PAREJA], T1.[CAT_RELACION_PAREJA.V_RELACION_PAREJA])
    FROM (
        SELECT 
            T.NID_RELACION_PAREJA AS [CAT_RELACION_PAREJA.NID_RELACION_PAREJA], 
            T.V_RELACION_PAREJA AS [CAT_RELACION_PAREJA.V_RELACION_PAREJA], 
            True AS _from0
        FROM ModelDeclaraStoreContainer.CAT_RELACION_PAREJA AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ModelDeclaraStoreContainer.CAT_SECCION_INGRESO.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView300()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing CAT_SECCION_INGRESO
        [ModelDeclara.Store.CAT_SECCION_INGRESO](T1.[CAT_SECCION_INGRESO.NID_SECCION], T1.[CAT_SECCION_INGRESO.NID_RUBRO], T1.[CAT_SECCION_INGRESO.V_RUBRO], T1.[CAT_SECCION_INGRESO.L_VIGENTE], T1.[CAT_SECCION_INGRESO.CID_TIPO], T1.[CAT_SECCION_INGRESO.NID_RUBRO_SUMA], T1.[CAT_SECCION_INGRESO.C_TITULAR], T1.[CAT_SECCION_INGRESO.V_CATALOGO])
    FROM (
        SELECT 
            T.NID_SECCION AS [CAT_SECCION_INGRESO.NID_SECCION], 
            T.NID_RUBRO AS [CAT_SECCION_INGRESO.NID_RUBRO], 
            T.V_RUBRO AS [CAT_SECCION_INGRESO.V_RUBRO], 
            T.L_VIGENTE AS [CAT_SECCION_INGRESO.L_VIGENTE], 
            T.CID_TIPO AS [CAT_SECCION_INGRESO.CID_TIPO], 
            T.NID_RUBRO_SUMA AS [CAT_SECCION_INGRESO.NID_RUBRO_SUMA], 
            T.C_TITULAR AS [CAT_SECCION_INGRESO.C_TITULAR], 
            T.V_CATALOGO AS [CAT_SECCION_INGRESO.V_CATALOGO], 
            True AS _from0
        FROM cnxDeclara.CAT_SECCION_INGRESO AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for cnxDeclara.CAT_SECCION_INGRESO.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView301()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing CAT_SECCION_INGRESO
        [ModelDeclara.CAT_SECCION_INGRESO](T1.[CAT_SECCION_INGRESO.NID_SECCION], T1.[CAT_SECCION_INGRESO.NID_RUBRO], T1.[CAT_SECCION_INGRESO.V_RUBRO], T1.[CAT_SECCION_INGRESO.L_VIGENTE], T1.[CAT_SECCION_INGRESO.CID_TIPO], T1.[CAT_SECCION_INGRESO.NID_RUBRO_SUMA], T1.[CAT_SECCION_INGRESO.C_TITULAR], T1.[CAT_SECCION_INGRESO.V_CATALOGO])
    FROM (
        SELECT 
            T.NID_SECCION AS [CAT_SECCION_INGRESO.NID_SECCION], 
            T.NID_RUBRO AS [CAT_SECCION_INGRESO.NID_RUBRO], 
            T.V_RUBRO AS [CAT_SECCION_INGRESO.V_RUBRO], 
            T.L_VIGENTE AS [CAT_SECCION_INGRESO.L_VIGENTE], 
            T.CID_TIPO AS [CAT_SECCION_INGRESO.CID_TIPO], 
            T.NID_RUBRO_SUMA AS [CAT_SECCION_INGRESO.NID_RUBRO_SUMA], 
            T.C_TITULAR AS [CAT_SECCION_INGRESO.C_TITULAR], 
            T.V_CATALOGO AS [CAT_SECCION_INGRESO.V_CATALOGO], 
            True AS _from0
        FROM ModelDeclaraStoreContainer.CAT_SECCION_INGRESO AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ModelDeclaraStoreContainer.CAT_TIPO_INVERSION.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView302()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing CAT_TIPO_INVERSION
        [ModelDeclara.Store.CAT_TIPO_INVERSION](T1.[CAT_TIPO_INVERSION.NID_TIPO_INVERSION], T1.[CAT_TIPO_INVERSION.V_TIPO_INVERSION], T1.[CAT_TIPO_INVERSION.L_ACTIVO])
    FROM (
        SELECT 
            T.NID_TIPO_INVERSION AS [CAT_TIPO_INVERSION.NID_TIPO_INVERSION], 
            T.V_TIPO_INVERSION AS [CAT_TIPO_INVERSION.V_TIPO_INVERSION], 
            T.L_ACTIVO AS [CAT_TIPO_INVERSION.L_ACTIVO], 
            True AS _from0
        FROM cnxDeclara.CAT_TIPO_INVERSION AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for cnxDeclara.CAT_TIPO_INVERSION.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView303()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing CAT_TIPO_INVERSION
        [ModelDeclara.CAT_TIPO_INVERSION](T1.[CAT_TIPO_INVERSION.NID_TIPO_INVERSION], T1.[CAT_TIPO_INVERSION.V_TIPO_INVERSION], T1.[CAT_TIPO_INVERSION.L_ACTIVO])
    FROM (
        SELECT 
            T.NID_TIPO_INVERSION AS [CAT_TIPO_INVERSION.NID_TIPO_INVERSION], 
            T.V_TIPO_INVERSION AS [CAT_TIPO_INVERSION.V_TIPO_INVERSION], 
            T.L_ACTIVO AS [CAT_TIPO_INVERSION.L_ACTIVO], 
            True AS _from0
        FROM ModelDeclaraStoreContainer.CAT_TIPO_INVERSION AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ModelDeclaraStoreContainer.CAT_TIPS.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView304()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing CAT_TIPS
        [ModelDeclara.Store.CAT_TIPS](T1.[CAT_TIPS.NID_TIP], T1.[CAT_TIPS.V_TIP])
    FROM (
        SELECT 
            T.NID_TIP AS [CAT_TIPS.NID_TIP], 
            T.V_TIP AS [CAT_TIPS.V_TIP], 
            True AS _from0
        FROM cnxDeclara.CAT_TIPS AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for cnxDeclara.CAT_TIPS.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView305()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing CAT_TIPS
        [ModelDeclara.CAT_TIPS](T1.[CAT_TIPS.NID_TIP], T1.[CAT_TIPS.V_TIP])
    FROM (
        SELECT 
            T.NID_TIP AS [CAT_TIPS.NID_TIP], 
            T.V_TIP AS [CAT_TIPS.V_TIP], 
            True AS _from0
        FROM ModelDeclaraStoreContainer.CAT_TIPS AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ModelDeclaraStoreContainer.CAT_TITULAR.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView306()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing CAT_TITULAR
        [ModelDeclara.Store.CAT_TITULAR](T1.[CAT_TITULAR.NID_TITULAR], T1.[CAT_TITULAR.V_TITULAR])
    FROM (
        SELECT 
            T.NID_TITULAR AS [CAT_TITULAR.NID_TITULAR], 
            T.V_TITULAR AS [CAT_TITULAR.V_TITULAR], 
            True AS _from0
        FROM cnxDeclara.CAT_TITULAR AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for cnxDeclara.CAT_TITULAR.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView307()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing CAT_TITULAR
        [ModelDeclara.CAT_TITULAR](T1.[CAT_TITULAR.NID_TITULAR], T1.[CAT_TITULAR.V_TITULAR])
    FROM (
        SELECT 
            T.NID_TITULAR AS [CAT_TITULAR.NID_TITULAR], 
            T.V_TITULAR AS [CAT_TITULAR.V_TITULAR], 
            True AS _from0
        FROM ModelDeclaraStoreContainer.CAT_TITULAR AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ModelDeclaraStoreContainer.DECLARACION_EXCEPCION_INICIAL.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView308()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing DECLARACION_EXCEPCION_INICIAL
        [ModelDeclara.Store.DECLARACION_EXCEPCION_INICIAL](T1.[DECLARACION_EXCEPCION_INICIAL.VID_NOMBRE], T1.[DECLARACION_EXCEPCION_INICIAL.VID_FECHA], T1.[DECLARACION_EXCEPCION_INICIAL.VID_HOMOCLAVE], T1.[DECLARACION_EXCEPCION_INICIAL.NID_DECLARACION], T1.[DECLARACION_EXCEPCION_INICIAL.L_EXCEPCION])
    FROM (
        SELECT 
            T.VID_NOMBRE AS [DECLARACION_EXCEPCION_INICIAL.VID_NOMBRE], 
            T.VID_FECHA AS [DECLARACION_EXCEPCION_INICIAL.VID_FECHA], 
            T.VID_HOMOCLAVE AS [DECLARACION_EXCEPCION_INICIAL.VID_HOMOCLAVE], 
            T.NID_DECLARACION AS [DECLARACION_EXCEPCION_INICIAL.NID_DECLARACION], 
            T.L_EXCEPCION AS [DECLARACION_EXCEPCION_INICIAL.L_EXCEPCION], 
            True AS _from0
        FROM cnxDeclara.DECLARACION_EXCEPCION_INICIAL AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for cnxDeclara.DECLARACION_EXCEPCION_INICIAL.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView309()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing DECLARACION_EXCEPCION_INICIAL
        [ModelDeclara.DECLARACION_EXCEPCION_INICIAL](T1.[DECLARACION_EXCEPCION_INICIAL.VID_NOMBRE], T1.[DECLARACION_EXCEPCION_INICIAL.VID_FECHA], T1.[DECLARACION_EXCEPCION_INICIAL.VID_HOMOCLAVE], T1.[DECLARACION_EXCEPCION_INICIAL.NID_DECLARACION], T1.[DECLARACION_EXCEPCION_INICIAL.L_EXCEPCION])
    FROM (
        SELECT 
            T.VID_NOMBRE AS [DECLARACION_EXCEPCION_INICIAL.VID_NOMBRE], 
            T.VID_FECHA AS [DECLARACION_EXCEPCION_INICIAL.VID_FECHA], 
            T.VID_HOMOCLAVE AS [DECLARACION_EXCEPCION_INICIAL.VID_HOMOCLAVE], 
            T.NID_DECLARACION AS [DECLARACION_EXCEPCION_INICIAL.NID_DECLARACION], 
            T.L_EXCEPCION AS [DECLARACION_EXCEPCION_INICIAL.L_EXCEPCION], 
            True AS _from0
        FROM ModelDeclaraStoreContainer.DECLARACION_EXCEPCION_INICIAL AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ModelDeclaraStoreContainer.DECLARACION_HISTORICO.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView310()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing DECLARACION_HISTORICO
        [ModelDeclara.Store.DECLARACION_HISTORICO](T1.[DECLARACION_HISTORICO.VID_NOMBRE], T1.[DECLARACION_HISTORICO.VID_FECHA], T1.[DECLARACION_HISTORICO.VID_HOMOCLAVE], T1.[DECLARACION_HISTORICO.NID_DECLARACION], T1.[DECLARACION_HISTORICO.NID_TIPO_DECLARACION], T1.[DECLARACION_HISTORICO.C_EJERCICIO], T1.[DECLARACION_HISTORICO.CID_SISTEMA], T1.[DECLARACION_HISTORICO.NID_ESTADO])
    FROM (
        SELECT 
            T.VID_NOMBRE AS [DECLARACION_HISTORICO.VID_NOMBRE], 
            T.VID_FECHA AS [DECLARACION_HISTORICO.VID_FECHA], 
            T.VID_HOMOCLAVE AS [DECLARACION_HISTORICO.VID_HOMOCLAVE], 
            T.NID_DECLARACION AS [DECLARACION_HISTORICO.NID_DECLARACION], 
            T.NID_TIPO_DECLARACION AS [DECLARACION_HISTORICO.NID_TIPO_DECLARACION], 
            T.C_EJERCICIO AS [DECLARACION_HISTORICO.C_EJERCICIO], 
            T.CID_SISTEMA AS [DECLARACION_HISTORICO.CID_SISTEMA], 
            T.NID_ESTADO AS [DECLARACION_HISTORICO.NID_ESTADO], 
            True AS _from0
        FROM cnxDeclara.DECLARACION_HISTORICO AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for cnxDeclara.DECLARACION_HISTORICO.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView311()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing DECLARACION_HISTORICO
        [ModelDeclara.DECLARACION_HISTORICO](T1.[DECLARACION_HISTORICO.VID_NOMBRE], T1.[DECLARACION_HISTORICO.VID_FECHA], T1.[DECLARACION_HISTORICO.VID_HOMOCLAVE], T1.[DECLARACION_HISTORICO.NID_DECLARACION], T1.[DECLARACION_HISTORICO.NID_TIPO_DECLARACION], T1.[DECLARACION_HISTORICO.C_EJERCICIO], T1.[DECLARACION_HISTORICO.CID_SISTEMA], T1.[DECLARACION_HISTORICO.NID_ESTADO])
    FROM (
        SELECT 
            T.VID_NOMBRE AS [DECLARACION_HISTORICO.VID_NOMBRE], 
            T.VID_FECHA AS [DECLARACION_HISTORICO.VID_FECHA], 
            T.VID_HOMOCLAVE AS [DECLARACION_HISTORICO.VID_HOMOCLAVE], 
            T.NID_DECLARACION AS [DECLARACION_HISTORICO.NID_DECLARACION], 
            T.NID_TIPO_DECLARACION AS [DECLARACION_HISTORICO.NID_TIPO_DECLARACION], 
            T.C_EJERCICIO AS [DECLARACION_HISTORICO.C_EJERCICIO], 
            T.CID_SISTEMA AS [DECLARACION_HISTORICO.CID_SISTEMA], 
            T.NID_ESTADO AS [DECLARACION_HISTORICO.NID_ESTADO], 
            True AS _from0
        FROM ModelDeclaraStoreContainer.DECLARACION_HISTORICO AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ModelDeclaraStoreContainer.DECLARACION_PERSONALES.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView312()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing DECLARACION_PERSONALES
        [ModelDeclara.Store.DECLARACION_PERSONALES](T1.[DECLARACION_PERSONALES.VID_NOMBRE], T1.[DECLARACION_PERSONALES.VID_FECHA], T1.[DECLARACION_PERSONALES.VID_HOMOCLAVE], T1.[DECLARACION_PERSONALES.NID_DECLARACION], T1.[DECLARACION_PERSONALES.C_GENERO], T1.[DECLARACION_PERSONALES.C_CURP], T1.[DECLARACION_PERSONALES.NID_PAIS], T1.[DECLARACION_PERSONALES.CID_ENTIDAD_FEDERATIVA], T1.[DECLARACION_PERSONALES.NID_NACIONALIDAD], T1.[DECLARACION_PERSONALES.NID_ESTADO_CIVIL], T1.[DECLARACION_PERSONALES.L_SERVIDOR_ANTERIOR], T1.[DECLARACION_PERSONALES.F_SERVIDOR_ANTERIOR_INICIO], T1.[DECLARACION_PERSONALES.F_SERVIDOR_ANTERIOR_FIN], T1.[DECLARACION_PERSONALES.E_OBSERVACIONES], T1.[DECLARACION_PERSONALES.E_OBSERVACIONES_MARCADO], T1.[DECLARACION_PERSONALES.V_OBSERVACIONES_TESTADO], T1.[DECLARACION_PERSONALES.NID_ESTADO_TESTADO])
    FROM (
        SELECT 
            T.VID_NOMBRE AS [DECLARACION_PERSONALES.VID_NOMBRE], 
            T.VID_FECHA AS [DECLARACION_PERSONALES.VID_FECHA], 
            T.VID_HOMOCLAVE AS [DECLARACION_PERSONALES.VID_HOMOCLAVE], 
            T.NID_DECLARACION AS [DECLARACION_PERSONALES.NID_DECLARACION], 
            T.C_GENERO AS [DECLARACION_PERSONALES.C_GENERO], 
            T.C_CURP AS [DECLARACION_PERSONALES.C_CURP], 
            T.NID_PAIS AS [DECLARACION_PERSONALES.NID_PAIS], 
            T.CID_ENTIDAD_FEDERATIVA AS [DECLARACION_PERSONALES.CID_ENTIDAD_FEDERATIVA], 
            T.NID_NACIONALIDAD AS [DECLARACION_PERSONALES.NID_NACIONALIDAD], 
            T.NID_ESTADO_CIVIL AS [DECLARACION_PERSONALES.NID_ESTADO_CIVIL], 
            T.L_SERVIDOR_ANTERIOR AS [DECLARACION_PERSONALES.L_SERVIDOR_ANTERIOR], 
            T.F_SERVIDOR_ANTERIOR_INICIO AS [DECLARACION_PERSONALES.F_SERVIDOR_ANTERIOR_INICIO], 
            T.F_SERVIDOR_ANTERIOR_FIN AS [DECLARACION_PERSONALES.F_SERVIDOR_ANTERIOR_FIN], 
            T.E_OBSERVACIONES AS [DECLARACION_PERSONALES.E_OBSERVACIONES], 
            T.E_OBSERVACIONES_MARCADO AS [DECLARACION_PERSONALES.E_OBSERVACIONES_MARCADO], 
            T.V_OBSERVACIONES_TESTADO AS [DECLARACION_PERSONALES.V_OBSERVACIONES_TESTADO], 
            T.NID_ESTADO_TESTADO AS [DECLARACION_PERSONALES.NID_ESTADO_TESTADO], 
            True AS _from0
        FROM cnxDeclara.DECLARACION_PERSONALES AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for cnxDeclara.DECLARACION_PERSONALES.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView313()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing DECLARACION_PERSONALES
        [ModelDeclara.DECLARACION_PERSONALES](T1.[DECLARACION_PERSONALES.VID_NOMBRE], T1.[DECLARACION_PERSONALES.VID_FECHA], T1.[DECLARACION_PERSONALES.VID_HOMOCLAVE], T1.[DECLARACION_PERSONALES.NID_DECLARACION], T1.[DECLARACION_PERSONALES.C_GENERO], T1.[DECLARACION_PERSONALES.C_CURP], T1.[DECLARACION_PERSONALES.NID_PAIS], T1.[DECLARACION_PERSONALES.CID_ENTIDAD_FEDERATIVA], T1.[DECLARACION_PERSONALES.NID_NACIONALIDAD], T1.[DECLARACION_PERSONALES.NID_ESTADO_CIVIL], T1.[DECLARACION_PERSONALES.L_SERVIDOR_ANTERIOR], T1.[DECLARACION_PERSONALES.F_SERVIDOR_ANTERIOR_INICIO], T1.[DECLARACION_PERSONALES.F_SERVIDOR_ANTERIOR_FIN], T1.[DECLARACION_PERSONALES.E_OBSERVACIONES], T1.[DECLARACION_PERSONALES.E_OBSERVACIONES_MARCADO], T1.[DECLARACION_PERSONALES.V_OBSERVACIONES_TESTADO], T1.[DECLARACION_PERSONALES.NID_ESTADO_TESTADO])
    FROM (
        SELECT 
            T.VID_NOMBRE AS [DECLARACION_PERSONALES.VID_NOMBRE], 
            T.VID_FECHA AS [DECLARACION_PERSONALES.VID_FECHA], 
            T.VID_HOMOCLAVE AS [DECLARACION_PERSONALES.VID_HOMOCLAVE], 
            T.NID_DECLARACION AS [DECLARACION_PERSONALES.NID_DECLARACION], 
            T.C_GENERO AS [DECLARACION_PERSONALES.C_GENERO], 
            T.C_CURP AS [DECLARACION_PERSONALES.C_CURP], 
            T.NID_PAIS AS [DECLARACION_PERSONALES.NID_PAIS], 
            T.CID_ENTIDAD_FEDERATIVA AS [DECLARACION_PERSONALES.CID_ENTIDAD_FEDERATIVA], 
            T.NID_NACIONALIDAD AS [DECLARACION_PERSONALES.NID_NACIONALIDAD], 
            T.NID_ESTADO_CIVIL AS [DECLARACION_PERSONALES.NID_ESTADO_CIVIL], 
            T.L_SERVIDOR_ANTERIOR AS [DECLARACION_PERSONALES.L_SERVIDOR_ANTERIOR], 
            T.F_SERVIDOR_ANTERIOR_INICIO AS [DECLARACION_PERSONALES.F_SERVIDOR_ANTERIOR_INICIO], 
            T.F_SERVIDOR_ANTERIOR_FIN AS [DECLARACION_PERSONALES.F_SERVIDOR_ANTERIOR_FIN], 
            T.E_OBSERVACIONES AS [DECLARACION_PERSONALES.E_OBSERVACIONES], 
            T.E_OBSERVACIONES_MARCADO AS [DECLARACION_PERSONALES.E_OBSERVACIONES_MARCADO], 
            T.V_OBSERVACIONES_TESTADO AS [DECLARACION_PERSONALES.V_OBSERVACIONES_TESTADO], 
            T.NID_ESTADO_TESTADO AS [DECLARACION_PERSONALES.NID_ESTADO_TESTADO], 
            True AS _from0
        FROM ModelDeclaraStoreContainer.DECLARACION_PERSONALES AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ModelDeclaraStoreContainer.H_HISTORICO.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView314()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing H_HISTORICO
        [ModelDeclara.Store.H_HISTORICO](T1.[H_HISTORICO.VID_NOMBRE], T1.[H_HISTORICO.VID_FECHA], T1.[H_HISTORICO.VID_HOMOCLAVE], T1.[H_HISTORICO.NID_HISTORICO])
    FROM (
        SELECT 
            T.VID_NOMBRE AS [H_HISTORICO.VID_NOMBRE], 
            T.VID_FECHA AS [H_HISTORICO.VID_FECHA], 
            T.VID_HOMOCLAVE AS [H_HISTORICO.VID_HOMOCLAVE], 
            T.NID_HISTORICO AS [H_HISTORICO.NID_HISTORICO], 
            True AS _from0
        FROM cnxDeclara.H_HISTORICO AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for cnxDeclara.H_HISTORICO.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView315()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing H_HISTORICO
        [ModelDeclara.H_HISTORICO](T1.[H_HISTORICO.VID_NOMBRE], T1.[H_HISTORICO.VID_FECHA], T1.[H_HISTORICO.VID_HOMOCLAVE], T1.[H_HISTORICO.NID_HISTORICO])
    FROM (
        SELECT 
            T.VID_NOMBRE AS [H_HISTORICO.VID_NOMBRE], 
            T.VID_FECHA AS [H_HISTORICO.VID_FECHA], 
            T.VID_HOMOCLAVE AS [H_HISTORICO.VID_HOMOCLAVE], 
            T.NID_HISTORICO AS [H_HISTORICO.NID_HISTORICO], 
            True AS _from0
        FROM ModelDeclaraStoreContainer.H_HISTORICO AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ModelDeclaraStoreContainer.H_PATRIMONIO_FLUJO.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView316()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing H_PATRIMONIO_FLUJO
        [ModelDeclara.Store.H_PATRIMONIO_FLUJO](T1.[H_PATRIMONIO_FLUJO.VID_NOMBRE], T1.[H_PATRIMONIO_FLUJO.VID_FECHA], T1.[H_PATRIMONIO_FLUJO.VID_HOMOCLAVE], T1.[H_PATRIMONIO_FLUJO.NID_HISTORICO], T1.[H_PATRIMONIO_FLUJO.M_INGRESOS], T1.[H_PATRIMONIO_FLUJO.M_EGRESOS])
    FROM (
        SELECT 
            T.VID_NOMBRE AS [H_PATRIMONIO_FLUJO.VID_NOMBRE], 
            T.VID_FECHA AS [H_PATRIMONIO_FLUJO.VID_FECHA], 
            T.VID_HOMOCLAVE AS [H_PATRIMONIO_FLUJO.VID_HOMOCLAVE], 
            T.NID_HISTORICO AS [H_PATRIMONIO_FLUJO.NID_HISTORICO], 
            T.M_INGRESOS AS [H_PATRIMONIO_FLUJO.M_INGRESOS], 
            T.M_EGRESOS AS [H_PATRIMONIO_FLUJO.M_EGRESOS], 
            True AS _from0
        FROM cnxDeclara.H_PATRIMONIO_FLUJO AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for cnxDeclara.H_PATRIMONIO_FLUJO.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView317()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing H_PATRIMONIO_FLUJO
        [ModelDeclara.H_PATRIMONIO_FLUJO](T1.[H_PATRIMONIO_FLUJO.VID_NOMBRE], T1.[H_PATRIMONIO_FLUJO.VID_FECHA], T1.[H_PATRIMONIO_FLUJO.VID_HOMOCLAVE], T1.[H_PATRIMONIO_FLUJO.NID_HISTORICO], T1.[H_PATRIMONIO_FLUJO.M_INGRESOS], T1.[H_PATRIMONIO_FLUJO.M_EGRESOS])
    FROM (
        SELECT 
            T.VID_NOMBRE AS [H_PATRIMONIO_FLUJO.VID_NOMBRE], 
            T.VID_FECHA AS [H_PATRIMONIO_FLUJO.VID_FECHA], 
            T.VID_HOMOCLAVE AS [H_PATRIMONIO_FLUJO.VID_HOMOCLAVE], 
            T.NID_HISTORICO AS [H_PATRIMONIO_FLUJO.NID_HISTORICO], 
            T.M_INGRESOS AS [H_PATRIMONIO_FLUJO.M_INGRESOS], 
            T.M_EGRESOS AS [H_PATRIMONIO_FLUJO.M_EGRESOS], 
            True AS _from0
        FROM ModelDeclaraStoreContainer.H_PATRIMONIO_FLUJO AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ModelDeclaraStoreContainer.H_PATRIMONIO_INMUEBLE_ADEUDO.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView318()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing H_PATRIMONIO_INMUEBLE_ADEUDO
        [ModelDeclara.Store.H_PATRIMONIO_INMUEBLE_ADEUDO](T1.[H_PATRIMONIO_INMUEBLE_ADEUDO.VID_NOMBRE], T1.[H_PATRIMONIO_INMUEBLE_ADEUDO.VID_FECHA], T1.[H_PATRIMONIO_INMUEBLE_ADEUDO.VID_HOMOCLAVE], T1.[H_PATRIMONIO_INMUEBLE_ADEUDO.NID_PATRIMONIO], T1.[H_PATRIMONIO_INMUEBLE_ADEUDO.NID_PATRIMONIO_ADEUDO], T1.[H_PATRIMONIO_INMUEBLE_ADEUDO.NID_HISTORICO], T1.[H_PATRIMONIO_INMUEBLE_ADEUDO.L_DIF])
    FROM (
        SELECT 
            T.VID_NOMBRE AS [H_PATRIMONIO_INMUEBLE_ADEUDO.VID_NOMBRE], 
            T.VID_FECHA AS [H_PATRIMONIO_INMUEBLE_ADEUDO.VID_FECHA], 
            T.VID_HOMOCLAVE AS [H_PATRIMONIO_INMUEBLE_ADEUDO.VID_HOMOCLAVE], 
            T.NID_PATRIMONIO AS [H_PATRIMONIO_INMUEBLE_ADEUDO.NID_PATRIMONIO], 
            T.NID_PATRIMONIO_ADEUDO AS [H_PATRIMONIO_INMUEBLE_ADEUDO.NID_PATRIMONIO_ADEUDO], 
            T.NID_HISTORICO AS [H_PATRIMONIO_INMUEBLE_ADEUDO.NID_HISTORICO], 
            T.L_DIF AS [H_PATRIMONIO_INMUEBLE_ADEUDO.L_DIF], 
            True AS _from0
        FROM cnxDeclara.H_PATRIMONIO_INMUEBLE_ADEUDO AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for cnxDeclara.H_PATRIMONIO_INMUEBLE_ADEUDO.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView319()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing H_PATRIMONIO_INMUEBLE_ADEUDO
        [ModelDeclara.H_PATRIMONIO_INMUEBLE_ADEUDO](T1.[H_PATRIMONIO_INMUEBLE_ADEUDO.VID_NOMBRE], T1.[H_PATRIMONIO_INMUEBLE_ADEUDO.VID_FECHA], T1.[H_PATRIMONIO_INMUEBLE_ADEUDO.VID_HOMOCLAVE], T1.[H_PATRIMONIO_INMUEBLE_ADEUDO.NID_PATRIMONIO], T1.[H_PATRIMONIO_INMUEBLE_ADEUDO.NID_PATRIMONIO_ADEUDO], T1.[H_PATRIMONIO_INMUEBLE_ADEUDO.NID_HISTORICO], T1.[H_PATRIMONIO_INMUEBLE_ADEUDO.L_DIF])
    FROM (
        SELECT 
            T.VID_NOMBRE AS [H_PATRIMONIO_INMUEBLE_ADEUDO.VID_NOMBRE], 
            T.VID_FECHA AS [H_PATRIMONIO_INMUEBLE_ADEUDO.VID_FECHA], 
            T.VID_HOMOCLAVE AS [H_PATRIMONIO_INMUEBLE_ADEUDO.VID_HOMOCLAVE], 
            T.NID_PATRIMONIO AS [H_PATRIMONIO_INMUEBLE_ADEUDO.NID_PATRIMONIO], 
            T.NID_PATRIMONIO_ADEUDO AS [H_PATRIMONIO_INMUEBLE_ADEUDO.NID_PATRIMONIO_ADEUDO], 
            T.NID_HISTORICO AS [H_PATRIMONIO_INMUEBLE_ADEUDO.NID_HISTORICO], 
            T.L_DIF AS [H_PATRIMONIO_INMUEBLE_ADEUDO.L_DIF], 
            True AS _from0
        FROM ModelDeclaraStoreContainer.H_PATRIMONIO_INMUEBLE_ADEUDO AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ModelDeclaraStoreContainer.H_PATRIMONIO_TARJETA.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView320()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing H_PATRIMONIO_TARJETA
        [ModelDeclara.Store.H_PATRIMONIO_TARJETA](T1.[H_PATRIMONIO_TARJETA.VID_NOMBRE], T1.[H_PATRIMONIO_TARJETA.VID_FECHA], T1.[H_PATRIMONIO_TARJETA.VID_HOMOCLAVE], T1.[H_PATRIMONIO_TARJETA.NID_PATRIMONIO], T1.[H_PATRIMONIO_TARJETA.NID_HISTORICO], T1.[H_PATRIMONIO_TARJETA.NID_INSTITUCION], T1.[H_PATRIMONIO_TARJETA.M_SALDO], T1.[H_PATRIMONIO_TARJETA.NID_PAIS], T1.[H_PATRIMONIO_TARJETA.CID_ENTIDAD_FEDERATIVA], T1.[H_PATRIMONIO_TARJETA.NID_TIPO_ADEUDO], T1.[H_PATRIMONIO_TARJETA.V_LUGAR], T1.[H_PATRIMONIO_TARJETA.V_OTRA], T1.[H_PATRIMONIO_TARJETA.M_ORIGINAL], T1.[H_PATRIMONIO_TARJETA.E_CUENTA])
    FROM (
        SELECT 
            T.VID_NOMBRE AS [H_PATRIMONIO_TARJETA.VID_NOMBRE], 
            T.VID_FECHA AS [H_PATRIMONIO_TARJETA.VID_FECHA], 
            T.VID_HOMOCLAVE AS [H_PATRIMONIO_TARJETA.VID_HOMOCLAVE], 
            T.NID_PATRIMONIO AS [H_PATRIMONIO_TARJETA.NID_PATRIMONIO], 
            T.NID_HISTORICO AS [H_PATRIMONIO_TARJETA.NID_HISTORICO], 
            T.NID_INSTITUCION AS [H_PATRIMONIO_TARJETA.NID_INSTITUCION], 
            T.M_SALDO AS [H_PATRIMONIO_TARJETA.M_SALDO], 
            T.NID_PAIS AS [H_PATRIMONIO_TARJETA.NID_PAIS], 
            T.CID_ENTIDAD_FEDERATIVA AS [H_PATRIMONIO_TARJETA.CID_ENTIDAD_FEDERATIVA], 
            T.NID_TIPO_ADEUDO AS [H_PATRIMONIO_TARJETA.NID_TIPO_ADEUDO], 
            T.V_LUGAR AS [H_PATRIMONIO_TARJETA.V_LUGAR], 
            T.V_OTRA AS [H_PATRIMONIO_TARJETA.V_OTRA], 
            T.M_ORIGINAL AS [H_PATRIMONIO_TARJETA.M_ORIGINAL], 
            T.E_CUENTA AS [H_PATRIMONIO_TARJETA.E_CUENTA], 
            True AS _from0
        FROM cnxDeclara.H_PATRIMONIO_TARJETA AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for cnxDeclara.H_PATRIMONIO_TARJETA.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView321()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing H_PATRIMONIO_TARJETA
        [ModelDeclara.H_PATRIMONIO_TARJETA](T1.[H_PATRIMONIO_TARJETA.VID_NOMBRE], T1.[H_PATRIMONIO_TARJETA.VID_FECHA], T1.[H_PATRIMONIO_TARJETA.VID_HOMOCLAVE], T1.[H_PATRIMONIO_TARJETA.NID_PATRIMONIO], T1.[H_PATRIMONIO_TARJETA.NID_HISTORICO], T1.[H_PATRIMONIO_TARJETA.NID_INSTITUCION], T1.[H_PATRIMONIO_TARJETA.M_SALDO], T1.[H_PATRIMONIO_TARJETA.NID_PAIS], T1.[H_PATRIMONIO_TARJETA.CID_ENTIDAD_FEDERATIVA], T1.[H_PATRIMONIO_TARJETA.NID_TIPO_ADEUDO], T1.[H_PATRIMONIO_TARJETA.V_LUGAR], T1.[H_PATRIMONIO_TARJETA.V_OTRA], T1.[H_PATRIMONIO_TARJETA.M_ORIGINAL], T1.[H_PATRIMONIO_TARJETA.E_CUENTA])
    FROM (
        SELECT 
            T.VID_NOMBRE AS [H_PATRIMONIO_TARJETA.VID_NOMBRE], 
            T.VID_FECHA AS [H_PATRIMONIO_TARJETA.VID_FECHA], 
            T.VID_HOMOCLAVE AS [H_PATRIMONIO_TARJETA.VID_HOMOCLAVE], 
            T.NID_PATRIMONIO AS [H_PATRIMONIO_TARJETA.NID_PATRIMONIO], 
            T.NID_HISTORICO AS [H_PATRIMONIO_TARJETA.NID_HISTORICO], 
            T.NID_INSTITUCION AS [H_PATRIMONIO_TARJETA.NID_INSTITUCION], 
            T.M_SALDO AS [H_PATRIMONIO_TARJETA.M_SALDO], 
            T.NID_PAIS AS [H_PATRIMONIO_TARJETA.NID_PAIS], 
            T.CID_ENTIDAD_FEDERATIVA AS [H_PATRIMONIO_TARJETA.CID_ENTIDAD_FEDERATIVA], 
            T.NID_TIPO_ADEUDO AS [H_PATRIMONIO_TARJETA.NID_TIPO_ADEUDO], 
            T.V_LUGAR AS [H_PATRIMONIO_TARJETA.V_LUGAR], 
            T.V_OTRA AS [H_PATRIMONIO_TARJETA.V_OTRA], 
            T.M_ORIGINAL AS [H_PATRIMONIO_TARJETA.M_ORIGINAL], 
            T.E_CUENTA AS [H_PATRIMONIO_TARJETA.E_CUENTA], 
            True AS _from0
        FROM ModelDeclaraStoreContainer.H_PATRIMONIO_TARJETA AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ModelDeclaraStoreContainer.H_PATRIMONIO_TITU.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView322()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing H_PATRIMONIO_TITU
        [ModelDeclara.Store.H_PATRIMONIO_TITU](T1.[H_PATRIMONIO_TITU.VID_NOMBRE], T1.[H_PATRIMONIO_TITU.VID_FECHA], T1.[H_PATRIMONIO_TITU.VID_HOMOCLAVE], T1.[H_PATRIMONIO_TITU.NID_DECLARACION], T1.[H_PATRIMONIO_TITU.E_NUMERO], T1.[H_PATRIMONIO_TITU.NID_DEPENDIENTE], T1.[H_PATRIMONIO_TITU.L_DIF], T1.[H_PATRIMONIO_TITU.H_HISTORICO])
    FROM (
        SELECT 
            T.VID_NOMBRE AS [H_PATRIMONIO_TITU.VID_NOMBRE], 
            T.VID_FECHA AS [H_PATRIMONIO_TITU.VID_FECHA], 
            T.VID_HOMOCLAVE AS [H_PATRIMONIO_TITU.VID_HOMOCLAVE], 
            T.NID_DECLARACION AS [H_PATRIMONIO_TITU.NID_DECLARACION], 
            T.E_NUMERO AS [H_PATRIMONIO_TITU.E_NUMERO], 
            T.NID_DEPENDIENTE AS [H_PATRIMONIO_TITU.NID_DEPENDIENTE], 
            T.L_DIF AS [H_PATRIMONIO_TITU.L_DIF], 
            T.H_HISTORICO AS [H_PATRIMONIO_TITU.H_HISTORICO], 
            True AS _from0
        FROM cnxDeclara.H_PATRIMONIO_TITU AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for cnxDeclara.H_PATRIMONIO_TITU.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView323()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing H_PATRIMONIO_TITU
        [ModelDeclara.H_PATRIMONIO_TITU](T1.[H_PATRIMONIO_TITU.VID_NOMBRE], T1.[H_PATRIMONIO_TITU.VID_FECHA], T1.[H_PATRIMONIO_TITU.VID_HOMOCLAVE], T1.[H_PATRIMONIO_TITU.NID_DECLARACION], T1.[H_PATRIMONIO_TITU.E_NUMERO], T1.[H_PATRIMONIO_TITU.NID_DEPENDIENTE], T1.[H_PATRIMONIO_TITU.L_DIF], T1.[H_PATRIMONIO_TITU.H_HISTORICO])
    FROM (
        SELECT 
            T.VID_NOMBRE AS [H_PATRIMONIO_TITU.VID_NOMBRE], 
            T.VID_FECHA AS [H_PATRIMONIO_TITU.VID_FECHA], 
            T.VID_HOMOCLAVE AS [H_PATRIMONIO_TITU.VID_HOMOCLAVE], 
            T.NID_DECLARACION AS [H_PATRIMONIO_TITU.NID_DECLARACION], 
            T.E_NUMERO AS [H_PATRIMONIO_TITU.E_NUMERO], 
            T.NID_DEPENDIENTE AS [H_PATRIMONIO_TITU.NID_DEPENDIENTE], 
            T.L_DIF AS [H_PATRIMONIO_TITU.L_DIF], 
            T.H_HISTORICO AS [H_PATRIMONIO_TITU.H_HISTORICO], 
            True AS _from0
        FROM ModelDeclaraStoreContainer.H_PATRIMONIO_TITU AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ModelDeclaraStoreContainer.H_PATRIMONIO_VEHICULO_ADEUDO.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView324()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing H_PATRIMONIO_VEHICULO_ADEUDO
        [ModelDeclara.Store.H_PATRIMONIO_VEHICULO_ADEUDO](T1.[H_PATRIMONIO_VEHICULO_ADEUDO.VID_NOMBRE], T1.[H_PATRIMONIO_VEHICULO_ADEUDO.VID_FECHA], T1.[H_PATRIMONIO_VEHICULO_ADEUDO.VID_HOMOCLAVE], T1.[H_PATRIMONIO_VEHICULO_ADEUDO.NID_PATRIMONIO], T1.[H_PATRIMONIO_VEHICULO_ADEUDO.NID_HISTORICO], T1.[H_PATRIMONIO_VEHICULO_ADEUDO.NID_PATRIMONIO_ADEUDO])
    FROM (
        SELECT 
            T.VID_NOMBRE AS [H_PATRIMONIO_VEHICULO_ADEUDO.VID_NOMBRE], 
            T.VID_FECHA AS [H_PATRIMONIO_VEHICULO_ADEUDO.VID_FECHA], 
            T.VID_HOMOCLAVE AS [H_PATRIMONIO_VEHICULO_ADEUDO.VID_HOMOCLAVE], 
            T.NID_PATRIMONIO AS [H_PATRIMONIO_VEHICULO_ADEUDO.NID_PATRIMONIO], 
            T.NID_HISTORICO AS [H_PATRIMONIO_VEHICULO_ADEUDO.NID_HISTORICO], 
            T.NID_PATRIMONIO_ADEUDO AS [H_PATRIMONIO_VEHICULO_ADEUDO.NID_PATRIMONIO_ADEUDO], 
            True AS _from0
        FROM cnxDeclara.H_PATRIMONIO_VEHICULO_ADEUDO AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for cnxDeclara.H_PATRIMONIO_VEHICULO_ADEUDO.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView325()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing H_PATRIMONIO_VEHICULO_ADEUDO
        [ModelDeclara.H_PATRIMONIO_VEHICULO_ADEUDO](T1.[H_PATRIMONIO_VEHICULO_ADEUDO.VID_NOMBRE], T1.[H_PATRIMONIO_VEHICULO_ADEUDO.VID_FECHA], T1.[H_PATRIMONIO_VEHICULO_ADEUDO.VID_HOMOCLAVE], T1.[H_PATRIMONIO_VEHICULO_ADEUDO.NID_PATRIMONIO], T1.[H_PATRIMONIO_VEHICULO_ADEUDO.NID_HISTORICO], T1.[H_PATRIMONIO_VEHICULO_ADEUDO.NID_PATRIMONIO_ADEUDO])
    FROM (
        SELECT 
            T.VID_NOMBRE AS [H_PATRIMONIO_VEHICULO_ADEUDO.VID_NOMBRE], 
            T.VID_FECHA AS [H_PATRIMONIO_VEHICULO_ADEUDO.VID_FECHA], 
            T.VID_HOMOCLAVE AS [H_PATRIMONIO_VEHICULO_ADEUDO.VID_HOMOCLAVE], 
            T.NID_PATRIMONIO AS [H_PATRIMONIO_VEHICULO_ADEUDO.NID_PATRIMONIO], 
            T.NID_HISTORICO AS [H_PATRIMONIO_VEHICULO_ADEUDO.NID_HISTORICO], 
            T.NID_PATRIMONIO_ADEUDO AS [H_PATRIMONIO_VEHICULO_ADEUDO.NID_PATRIMONIO_ADEUDO], 
            True AS _from0
        FROM ModelDeclaraStoreContainer.H_PATRIMONIO_VEHICULO_ADEUDO AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ModelDeclaraStoreContainer.PATRIMONIO_FLUJO.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView326()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing PATRIMONIO_FLUJO
        [ModelDeclara.Store.PATRIMONIO_FLUJO](T1.[PATRIMONIO_FLUJO.VID_NOMBRE], T1.[PATRIMONIO_FLUJO.VID_FECHA], T1.[PATRIMONIO_FLUJO.VID_HOMOCLAVE], T1.[PATRIMONIO_FLUJO.M_INGRESOS], T1.[PATRIMONIO_FLUJO.M_EGRESOS])
    FROM (
        SELECT 
            T.VID_NOMBRE AS [PATRIMONIO_FLUJO.VID_NOMBRE], 
            T.VID_FECHA AS [PATRIMONIO_FLUJO.VID_FECHA], 
            T.VID_HOMOCLAVE AS [PATRIMONIO_FLUJO.VID_HOMOCLAVE], 
            T.M_INGRESOS AS [PATRIMONIO_FLUJO.M_INGRESOS], 
            T.M_EGRESOS AS [PATRIMONIO_FLUJO.M_EGRESOS], 
            True AS _from0
        FROM cnxDeclara.PATRIMONIO_FLUJO AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for cnxDeclara.PATRIMONIO_FLUJO.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView327()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing PATRIMONIO_FLUJO
        [ModelDeclara.PATRIMONIO_FLUJO](T1.[PATRIMONIO_FLUJO.VID_NOMBRE], T1.[PATRIMONIO_FLUJO.VID_FECHA], T1.[PATRIMONIO_FLUJO.VID_HOMOCLAVE], T1.[PATRIMONIO_FLUJO.M_INGRESOS], T1.[PATRIMONIO_FLUJO.M_EGRESOS])
    FROM (
        SELECT 
            T.VID_NOMBRE AS [PATRIMONIO_FLUJO.VID_NOMBRE], 
            T.VID_FECHA AS [PATRIMONIO_FLUJO.VID_FECHA], 
            T.VID_HOMOCLAVE AS [PATRIMONIO_FLUJO.VID_HOMOCLAVE], 
            T.M_INGRESOS AS [PATRIMONIO_FLUJO.M_INGRESOS], 
            T.M_EGRESOS AS [PATRIMONIO_FLUJO.M_EGRESOS], 
            True AS _from0
        FROM ModelDeclaraStoreContainer.PATRIMONIO_FLUJO AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ModelDeclaraStoreContainer.CAT_CONFORME_A.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView328()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing CAT_CONFORME_A
        [ModelDeclara.Store.CAT_CONFORME_A](T1.[CAT_CONFORME_A.NID_TIPO], T1.[CAT_CONFORME_A.V_TIPO], T1.[CAT_CONFORME_A.L_ACTIVO])
    FROM (
        SELECT 
            T.NID_TIPO AS [CAT_CONFORME_A.NID_TIPO], 
            T.V_TIPO AS [CAT_CONFORME_A.V_TIPO], 
            T.L_ACTIVO AS [CAT_CONFORME_A.L_ACTIVO], 
            True AS _from0
        FROM cnxDeclara.CAT_CONFORME_A AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for cnxDeclara.CAT_CONFORME_A.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView329()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing CAT_CONFORME_A
        [ModelDeclara.CAT_CONFORME_A](T1.[CAT_CONFORME_A.NID_TIPO], T1.[CAT_CONFORME_A.V_TIPO], T1.[CAT_CONFORME_A.L_ACTIVO])
    FROM (
        SELECT 
            T.NID_TIPO AS [CAT_CONFORME_A.NID_TIPO], 
            T.V_TIPO AS [CAT_CONFORME_A.V_TIPO], 
            T.L_ACTIVO AS [CAT_CONFORME_A.L_ACTIVO], 
            True AS _from0
        FROM ModelDeclaraStoreContainer.CAT_CONFORME_A AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ModelDeclaraStoreContainer.CAT_MONEDA.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView330()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing CAT_MONEDA
        [ModelDeclara.Store.CAT_MONEDA](T1.[CAT_MONEDA.NID_MONEDA], T1.[CAT_MONEDA.V_CODIGO_MONEDA], T1.[CAT_MONEDA.V_MONEDA])
    FROM (
        SELECT 
            T.NID_MONEDA AS [CAT_MONEDA.NID_MONEDA], 
            T.V_CODIGO_MONEDA AS [CAT_MONEDA.V_CODIGO_MONEDA], 
            T.V_MONEDA AS [CAT_MONEDA.V_MONEDA], 
            True AS _from0
        FROM cnxDeclara.CAT_MONEDA AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for cnxDeclara.CAT_MONEDA.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView331()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing CAT_MONEDA
        [ModelDeclara.CAT_MONEDA](T1.[CAT_MONEDA.NID_MONEDA], T1.[CAT_MONEDA.V_CODIGO_MONEDA], T1.[CAT_MONEDA.V_MONEDA])
    FROM (
        SELECT 
            T.NID_MONEDA AS [CAT_MONEDA.NID_MONEDA], 
            T.V_CODIGO_MONEDA AS [CAT_MONEDA.V_CODIGO_MONEDA], 
            T.V_MONEDA AS [CAT_MONEDA.V_MONEDA], 
            True AS _from0
        FROM ModelDeclaraStoreContainer.CAT_MONEDA AS T
    ) AS T1");
        }
    }
}
