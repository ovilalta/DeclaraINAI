using System;
using System.Collections.Generic;
using MODELDeclara;
using Declara.Exceptions;
using Declara.DALD;
using Declara.BLL;

namespace Declara.BLLD
{
    public partial class blld_DECLARACION : bll_DECLARACION
    {

        #region *** Propiedades ***
//    new public String VID_NOMBRE => datos_DECLARACION.VID_NOMBRE;
//    new public String VID_FECHA => datos_DECLARACION.VID_FECHA;
//    new public String VID_HOMOCLAVE => datos_DECLARACION.VID_HOMOCLAVE;
//    new public Int32 NID_DECLARACION => datos_DECLARACION.NID_DECLARACION;
//    new public String C_EJERCICIO
//        {
//            get => datos_DECLARACION.C_EJERCICIO;
//            set => datos_DECLARACION.C_EJERCICIO = value;
//        }
//    new public Int32 NID_TIPO_DECLARACION
//        {
//            get => datos_DECLARACION.NID_TIPO_DECLARACION;
//            set => datos_DECLARACION.NID_TIPO_DECLARACION = value;
//        }
//    new public Int32 NID_ESTADO => datos_DECLARACION.NID_ESTADO;
//    new public String E_OBSERVACIONES
//        {
//            get => datos_DECLARACION.E_OBSERVACIONES;
//            set => datos_DECLARACION.E_OBSERVACIONES = value;
//        }
//    new public String E_OBSERVACIONES_MARCADO
//        {
//            get => datos_DECLARACION.E_OBSERVACIONES_MARCADO;
//            set => datos_DECLARACION.E_OBSERVACIONES_MARCADO = value;
//        }
//    new public String V_OBSERVACIONES_TESTADO
//        {
//            get => datos_DECLARACION.V_OBSERVACIONES_TESTADO;
//            set => datos_DECLARACION.V_OBSERVACIONES_TESTADO = value;
//        }
//    new public Int32 NID_ESTADO_TESTADO => datos_DECLARACION.NID_ESTADO_TESTADO;
//    new public Boolean L_AUTORIZA_PUBLICAR
//        {
//            get => datos_DECLARACION.L_AUTORIZA_PUBLICAR;
//            set => datos_DECLARACION.L_AUTORIZA_PUBLICAR = value;
//        }
//    new public DateTime F_REGISTRO => datos_DECLARACION.F_REGISTRO;
//    new public System.Nullable<DateTime> F_ENVIO
//        {
//            get => datos_DECLARACION.F_ENVIO;
//            set => datos_DECLARACION.F_ENVIO = value;
//        }
//    new public System.Nullable<Boolean> L_CONFLICTO
//        {
//            get => datos_DECLARACION.L_CONFLICTO;
//            set => datos_DECLARACION.L_CONFLICTO = value;
//        }
//    new public String V_HASH
//        {
//            get => datos_DECLARACION.V_HASH;
//            set => datos_DECLARACION.V_HASH = value;
//        }
        public String V_TIPO_DECLARACION => datos_DECLARACION.oCAT_TIPO_DECLARACION.V_TIPO_DECLARACION;
        public String V_ESTADO => datos_DECLARACION.oCAT_ESTADO_DECLARACION.V_ESTADO;
        public String V_ESTADO_TESTADO => datos_DECLARACION.oCAT_ESTADO_TESTADO.V_ESTADO_TESTADO;
        private Int32 NID_ESTADOInicial => 1;
        private Int32 NID_ESTADO_TESTADOInicial => 1;

        #endregion


        #region *** Constructores ***
        public blld_DECLARACION(String VID_NOMBRE, String VID_FECHA, String VID_HOMOCLAVE, Int32 NID_DECLARACION, String C_EJERCICIO, Int32 NID_TIPO_DECLARACION, String E_OBSERVACIONES, String E_OBSERVACIONES_MARCADO, String V_OBSERVACIONES_TESTADO, Boolean L_AUTORIZA_PUBLICAR, System.Nullable<DateTime> F_ENVIO, System.Nullable<Boolean> L_CONFLICTO, String V_HASH)
            : base()
        {
            ExistingPrimaryKeyException.ExistingPrimaryKeyConditions lOpcionesRegistroExistente = ExistingPrimaryKeyException.ExistingPrimaryKeyConditions.ThrowException;
            String _VID_NOMBRE = VID_NOMBRE; 
            String _VID_FECHA = VID_FECHA; 
            String _VID_HOMOCLAVE = VID_HOMOCLAVE; 
            Int32 _NID_DECLARACION = NID_DECLARACION; 
            this.C_EJERCICIO = C_EJERCICIO;
            this.NID_TIPO_DECLARACION = NID_TIPO_DECLARACION;
            datos_DECLARACION.NID_ESTADO = NID_ESTADOInicial;
            this.E_OBSERVACIONES = E_OBSERVACIONES;
            this.E_OBSERVACIONES_MARCADO = E_OBSERVACIONES_MARCADO;
            this.V_OBSERVACIONES_TESTADO = V_OBSERVACIONES_TESTADO;
            datos_DECLARACION.NID_ESTADO_TESTADO = NID_ESTADO_TESTADOInicial;
            this.L_AUTORIZA_PUBLICAR = L_AUTORIZA_PUBLICAR;
            this.F_ENVIO = F_ENVIO;
            this.L_CONFLICTO = L_CONFLICTO;
            this.V_HASH = V_HASH;
            datos_DECLARACION = new dald_DECLARACION(_VID_NOMBRE, _VID_FECHA, _VID_HOMOCLAVE, _NID_DECLARACION, this.C_EJERCICIO, this.NID_TIPO_DECLARACION, this.NID_ESTADO, this.E_OBSERVACIONES, this.E_OBSERVACIONES_MARCADO, this.V_OBSERVACIONES_TESTADO, this.NID_ESTADO_TESTADO, this.L_AUTORIZA_PUBLICAR, this.F_ENVIO, this.L_CONFLICTO, this.V_HASH, lOpcionesRegistroExistente);
        }
        public blld_DECLARACION(String VID_NOMBRE, String VID_FECHA, String VID_HOMOCLAVE, String C_EJERCICIO, Int32 NID_TIPO_DECLARACION, String E_OBSERVACIONES, String E_OBSERVACIONES_MARCADO, String V_OBSERVACIONES_TESTADO, Boolean L_AUTORIZA_PUBLICAR, System.Nullable<DateTime> F_ENVIO, System.Nullable<Boolean> L_CONFLICTO, String V_HASH)
            : base()
        {
            ExistingPrimaryKeyException.ExistingPrimaryKeyConditions lOpcionesRegistroExistente = ExistingPrimaryKeyException.ExistingPrimaryKeyConditions.ThrowException;
            String _VID_NOMBRE = VID_NOMBRE; 
            String _VID_FECHA = VID_FECHA; 
            String _VID_HOMOCLAVE = VID_HOMOCLAVE; 
            Int32 _NID_DECLARACION = dald_DECLARACION.nNuevo_NID_DECLARACION(VID_NOMBRE, VID_FECHA, VID_HOMOCLAVE);
            this.C_EJERCICIO = C_EJERCICIO;
            this.NID_TIPO_DECLARACION = NID_TIPO_DECLARACION;
            datos_DECLARACION.NID_ESTADO = NID_ESTADOInicial;
            this.E_OBSERVACIONES = E_OBSERVACIONES;
            this.E_OBSERVACIONES_MARCADO = E_OBSERVACIONES_MARCADO;
            this.V_OBSERVACIONES_TESTADO = V_OBSERVACIONES_TESTADO;
            datos_DECLARACION.NID_ESTADO_TESTADO = NID_ESTADO_TESTADOInicial;
            this.L_AUTORIZA_PUBLICAR = L_AUTORIZA_PUBLICAR;
            this.F_ENVIO = F_ENVIO;
            this.L_CONFLICTO = L_CONFLICTO;
            this.V_HASH = V_HASH;
            datos_DECLARACION = new dald_DECLARACION(_VID_NOMBRE, _VID_FECHA, _VID_HOMOCLAVE, _NID_DECLARACION, this.C_EJERCICIO, this.NID_TIPO_DECLARACION, this.NID_ESTADO, this.E_OBSERVACIONES, this.E_OBSERVACIONES_MARCADO, this.V_OBSERVACIONES_TESTADO, this.NID_ESTADO_TESTADO, this.L_AUTORIZA_PUBLICAR, this.F_ENVIO, this.L_CONFLICTO, this.V_HASH, lOpcionesRegistroExistente);
        }

        #endregion


        #region *** Metodos ***
        public void Reload_DECLARACION_ESCOLARIDADs()
        {
            _Reload_DECLARACION_ESCOLARIDADs();
        }
        public void Add_DECLARACION_ESCOLARIDADs(String VID_NOMBRE, String VID_FECHA, String VID_HOMOCLAVE, Int32 NID_DECLARACION, Int32 NID_ESCOLARIDAD, Int32 NID_NIVEL_ESCOLARIDAD, String V_INSTITUCION_EDUCATIVA, String V_CARRERA, Int32 NID_DOCUMENTO_OBTENIDO, DateTime F_OBTENCION, Int32 NID_PAIS, String E_OBSERVACIONES, String E_OBSERVACIONES_MARCADO, String V_OBSERVACIONES_TESTADO)
        {
            _Add_DECLARACION_ESCOLARIDADs(VID_NOMBRE, VID_FECHA, VID_HOMOCLAVE, NID_DECLARACION, NID_ESCOLARIDAD, NID_NIVEL_ESCOLARIDAD, V_INSTITUCION_EDUCATIVA, V_CARRERA, NID_DOCUMENTO_OBTENIDO, F_OBTENCION, NID_PAIS, E_OBSERVACIONES, E_OBSERVACIONES_MARCADO, V_OBSERVACIONES_TESTADO);
        }


        public void Reload_DECLARACION_APARTADOs()
        {
            _Reload_DECLARACION_APARTADOs();
        }
        public void Add_DECLARACION_APARTADOs(String VID_NOMBRE, String VID_FECHA, String VID_HOMOCLAVE, Int32 NID_DECLARACION, Int32 NID_APARTADO, System.Nullable<Boolean> L_ESTADO)
        {
            _Add_DECLARACION_APARTADOs(VID_NOMBRE, VID_FECHA, VID_HOMOCLAVE, NID_DECLARACION, NID_APARTADO, L_ESTADO);
        }


        public void Add_DECLARACION_CARGO(String VID_NOMBRE, String VID_FECHA, String VID_HOMOCLAVE, Int32 NID_DECLARACION, Int32 NID_PUESTO, String V_DENOMINACION, DateTime F_POSESION, DateTime F_INICIO, String VID_PRIMER_NIVEL, String VID_SEGUNDO_NIVEL, String V_FUNCION_PRINCIPAL, String E_OBSERVACIONES, String E_OBSERVACIONES_MARCADO, String V_OBSERVACIONES_TESTADO)
        {
            try
            {
                this._Add_DECLARACION_CARGO(VID_NOMBRE, VID_FECHA, VID_HOMOCLAVE, NID_DECLARACION, NID_PUESTO, V_DENOMINACION, F_POSESION, F_INICIO, VID_PRIMER_NIVEL, VID_SEGUNDO_NIVEL, V_FUNCION_PRINCIPAL, E_OBSERVACIONES, E_OBSERVACIONES_MARCADO, V_OBSERVACIONES_TESTADO);
            }
            catch (Exception ex)
            {
                if (ex is ExistingPrimaryKeyException)
                    this.DECLARACION_CARGO = new blld_DECLARACION_CARGO(VID_NOMBRE, VID_FECHA, VID_HOMOCLAVE, NID_DECLARACION);
                else
                    throw ex;
            }
        }


        public void Reload_DECLARACION_DEPENDIENTESs()
        {
            _Reload_DECLARACION_DEPENDIENTESs();
        }
        public void Add_DECLARACION_DEPENDIENTESs(String VID_NOMBRE, String VID_FECHA, String VID_HOMOCLAVE, Int32 NID_DECLARACION, Int32 NID_DEPENDIENTE, Int32 NID_TIPO_DEPENDIENTE, String E_NOMBRE, String E_PRIMER_A, String E_SEGUNDO_A, DateTime F_NACIMIENTO, String E_RFC, Boolean L_DEPENDE_ECO, String E_DOMICILIO, Boolean L_ACTIVO, Boolean L_CIUDADANO_EXTRANJERO, String E_CURP, String E_OBSERVACIONES, String E_OBSERVACIONES_MARCADO, String V_OBSERVACIONES_TESTADO, Boolean L_MISMO_DOMICILIO_DECLARANTE)
        {
            _Add_DECLARACION_DEPENDIENTESs(VID_NOMBRE, VID_FECHA, VID_HOMOCLAVE, NID_DECLARACION, NID_DEPENDIENTE, NID_TIPO_DEPENDIENTE, E_NOMBRE, E_PRIMER_A, E_SEGUNDO_A, F_NACIMIENTO, E_RFC, L_DEPENDE_ECO, E_DOMICILIO, L_ACTIVO, L_CIUDADANO_EXTRANJERO, E_CURP, E_OBSERVACIONES, E_OBSERVACIONES_MARCADO, V_OBSERVACIONES_TESTADO, L_MISMO_DOMICILIO_DECLARANTE);
        }


        public void Add_DECLARACION_DOM_LABORAL(String VID_NOMBRE, String VID_FECHA, String VID_HOMOCLAVE, Int32 NID_DECLARACION, String C_CODIGO_POSTAL, Int32 NID_PAIS, String CID_ENTIDAD_FEDERATIVA, String CID_MUNICIPIO, String V_COLONIA, String V_DOMICILIO, String V_CORREO_LABORAL, String V_TEL_LABORAL)
        {
            try
            {
                this._Add_DECLARACION_DOM_LABORAL(VID_NOMBRE, VID_FECHA, VID_HOMOCLAVE, NID_DECLARACION, C_CODIGO_POSTAL, NID_PAIS, CID_ENTIDAD_FEDERATIVA, CID_MUNICIPIO, V_COLONIA, V_DOMICILIO, V_CORREO_LABORAL, V_TEL_LABORAL);
            }
            catch (Exception ex)
            {
                if (ex is ExistingPrimaryKeyException)
                    this.DECLARACION_DOM_LABORAL = new blld_DECLARACION_DOM_LABORAL(VID_NOMBRE, VID_FECHA, VID_HOMOCLAVE, NID_DECLARACION);
                else
                    throw ex;
            }
        }


        public void Add_DECLARACION_DOM_PARTICULAR(String VID_NOMBRE, String VID_FECHA, String VID_HOMOCLAVE, Int32 NID_DECLARACION, String C_CODIGO_POSTAL, Int32 NID_PAIS, String CID_ENTIDAD_FEDERATIVA, String CID_MUNICIPIO, String V_COLONIA, String V_DOMICILIO, String V_CORREO, String V_TEL_PARTICULAR, String V_TEL_CELULAR, String E_OBSERVACIONES, String E_OBSERVACIONES_MARCADO, String V_OBSERVACIONES_TESTADO)
        {
            try
            {
                this._Add_DECLARACION_DOM_PARTICULAR(VID_NOMBRE, VID_FECHA, VID_HOMOCLAVE, NID_DECLARACION, C_CODIGO_POSTAL, NID_PAIS, CID_ENTIDAD_FEDERATIVA, CID_MUNICIPIO, V_COLONIA, V_DOMICILIO, V_CORREO, V_TEL_PARTICULAR, V_TEL_CELULAR, E_OBSERVACIONES, E_OBSERVACIONES_MARCADO, V_OBSERVACIONES_TESTADO);
            }
            catch (Exception ex)
            {
                if (ex is ExistingPrimaryKeyException)
                    this.DECLARACION_DOM_PARTICULAR = new blld_DECLARACION_DOM_PARTICULAR(VID_NOMBRE, VID_FECHA, VID_HOMOCLAVE, NID_DECLARACION);
                else
                    throw ex;
            }
        }


        public void Reload_DECLARACION_EGRESOSs()
        {
            _Reload_DECLARACION_EGRESOSs();
        }
        public void Add_DECLARACION_EGRESOSs(String VID_NOMBRE, String VID_FECHA, String VID_HOMOCLAVE, Int32 NID_DECLARACION, Int32 NID_EGRESO, String V_CONCEPTO, Decimal M_DECLARANTE, Decimal M_DEPENDIENTE, Decimal M_SUMA, Int32 N_NIVEL)
        {
            _Add_DECLARACION_EGRESOSs(VID_NOMBRE, VID_FECHA, VID_HOMOCLAVE, NID_DECLARACION, NID_EGRESO, V_CONCEPTO, M_DECLARANTE, M_DEPENDIENTE, M_SUMA, N_NIVEL);
        }


        public void Reload_DECLARACION_INGRESOSs()
        {
            _Reload_DECLARACION_INGRESOSs();
        }
        public void Add_DECLARACION_INGRESOSs(String VID_NOMBRE, String VID_FECHA, String VID_HOMOCLAVE, Int32 NID_DECLARACION, Int32 NID_INGRESO, String V_CONCEPTO, Decimal M_DECLARANTE, Decimal M_DEPENDIENTE, Decimal M_SUMA, Int32 N_NIVEL)
        {
            _Add_DECLARACION_INGRESOSs(VID_NOMBRE, VID_FECHA, VID_HOMOCLAVE, NID_DECLARACION, NID_INGRESO, V_CONCEPTO, M_DECLARANTE, M_DEPENDIENTE, M_SUMA, N_NIVEL);
        }


        public void Reload_DECLARACION_RESTRICCIONESs()
        {
            _Reload_DECLARACION_RESTRICCIONESs();
        }
        public void Add_DECLARACION_RESTRICCIONESs(String VID_NOMBRE, String VID_FECHA, String VID_HOMOCLAVE, Int32 NID_DECLARACION, Int32 NID_RESTRICCION, System.Nullable<Boolean> L_RESPUESTA, Boolean L_AUTO)
        {
            _Add_DECLARACION_RESTRICCIONESs(VID_NOMBRE, VID_FECHA, VID_HOMOCLAVE, NID_DECLARACION, NID_RESTRICCION, L_RESPUESTA, L_AUTO);
        }


        public void Add_MODIFICACION(String VID_NOMBRE, String VID_FECHA, String VID_HOMOCLAVE, Int32 NID_DECLARACION, System.Nullable<Boolean> L_PRESENTO_DEC, System.Nullable<DateTime> F_INICIO, System.Nullable<DateTime> F_FIN)
        {
            try
            {
                this._Add_MODIFICACION(VID_NOMBRE, VID_FECHA, VID_HOMOCLAVE, NID_DECLARACION, L_PRESENTO_DEC, F_INICIO, F_FIN);
            }
            catch (Exception ex)
            {
                if (ex is ExistingPrimaryKeyException)
                    this.MODIFICACION = new blld_MODIFICACION(VID_NOMBRE, VID_FECHA, VID_HOMOCLAVE, NID_DECLARACION);
                else
                    throw ex;
            }
        }


        public void Reload_DECLARACION_EXPERIENCIA_LABORALs()
        {
            _Reload_DECLARACION_EXPERIENCIA_LABORALs();
        }
        public void Add_DECLARACION_EXPERIENCIA_LABORALs(String VID_NOMBRE, String VID_FECHA, String VID_HOMOCLAVE, Int32 NID_DECLARACION, Int32 NID_EXPERIENCIA_LABORAL, Int32 NID_AMBITO_SECTOR, Int32 NID_NIVEL_GOBIERNO, Int32 NID_AMBITO_PUBLICO, String V_NOMBRE, String V_RFC, String V_AREA_ADSCRIPCION, String V_PUESTO, String V_FUNCION_PRINCIPAL, Int32 NID_SECTOR, DateTime F_INGRESO, DateTime F_EGRESO, Int32 NID_PAIS, String E_OBSERVACIONES, String E_OBSERVACIONES_MARCADO, String V_OBSERVACIONES_TESTADO)
        {
            _Add_DECLARACION_EXPERIENCIA_LABORALs(VID_NOMBRE, VID_FECHA, VID_HOMOCLAVE, NID_DECLARACION, NID_EXPERIENCIA_LABORAL, NID_AMBITO_SECTOR, NID_NIVEL_GOBIERNO, NID_AMBITO_PUBLICO, V_NOMBRE, V_RFC, V_AREA_ADSCRIPCION, V_PUESTO, V_FUNCION_PRINCIPAL, NID_SECTOR, F_INGRESO, F_EGRESO, NID_PAIS, E_OBSERVACIONES, E_OBSERVACIONES_MARCADO, V_OBSERVACIONES_TESTADO);
        }


        public void Reload_DECLARACION_REGIMEN_MATRIMONIALs()
        {
            _Reload_DECLARACION_REGIMEN_MATRIMONIALs();
        }
        public void Add_DECLARACION_REGIMEN_MATRIMONIALs(String VID_NOMBRE, String VID_FECHA, String VID_HOMOCLAVE, Int32 NID_DECLARACION, Int32 NID_REGIMEN, Int32 NID_REGIMEN_MATRIMONIAL)
        {
            _Add_DECLARACION_REGIMEN_MATRIMONIALs(VID_NOMBRE, VID_FECHA, VID_HOMOCLAVE, NID_DECLARACION, NID_REGIMEN, NID_REGIMEN_MATRIMONIAL);
        }


        public void Add_DECLARACION_CARGO_OTRO(String VID_NOMBRE, String VID_FECHA, String VID_HOMOCLAVE, Int32 NID_DECLARACION, Int32 NID_NIVEL_GOBIERNO, Int32 NID_AMBITO_PUBLICO, String VID_NOMBRE_ENTE, String V_AREA_ADSCRIPCION, String V_CARGO, Boolean L_HONORARIOS, String V_NIVEL_EMPLEO, String V_FUNCION_PRINCIPAL, DateTime F_POSESION, String V_TEL_LABORAL, String C_CODIGO_POSTAL, Int32 NID_PAIS, String CID_ENTIDAD_FEDERATIVA, String CID_MUNICIPIO, String V_COLONIA, String V_DOMICILIO, String V_OBSERVACIONES)
        {
            try
            {
                this._Add_DECLARACION_CARGO_OTRO(VID_NOMBRE, VID_FECHA, VID_HOMOCLAVE, NID_DECLARACION, NID_NIVEL_GOBIERNO, NID_AMBITO_PUBLICO, VID_NOMBRE_ENTE, V_AREA_ADSCRIPCION, V_CARGO, L_HONORARIOS, V_NIVEL_EMPLEO, V_FUNCION_PRINCIPAL, F_POSESION, V_TEL_LABORAL, C_CODIGO_POSTAL, NID_PAIS, CID_ENTIDAD_FEDERATIVA, CID_MUNICIPIO, V_COLONIA, V_DOMICILIO, V_OBSERVACIONES);
            }
            catch (Exception ex)
            {
                if (ex is ExistingPrimaryKeyException)
                    this.DECLARACION_CARGO_OTRO = new blld_DECLARACION_CARGO_OTRO(VID_NOMBRE, VID_FECHA, VID_HOMOCLAVE, NID_DECLARACION);
                else
                    throw ex;
            }
        }


        public void Add_ALTA(String VID_NOMBRE, String VID_FECHA, String VID_HOMOCLAVE, Int32 NID_DECLARACION)
        {
            try
            {
                this._Add_ALTA(VID_NOMBRE, VID_FECHA, VID_HOMOCLAVE, NID_DECLARACION);
            }
            catch (Exception ex)
            {
                if (ex is ExistingPrimaryKeyException)
                    this.ALTA = new blld_ALTA(VID_NOMBRE, VID_FECHA, VID_HOMOCLAVE, NID_DECLARACION);
                else
                    throw ex;
            }
        }



        #endregion

    }
}
